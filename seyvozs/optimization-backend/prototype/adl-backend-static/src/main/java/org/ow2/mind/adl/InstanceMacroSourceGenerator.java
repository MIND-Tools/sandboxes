/**
 * Copyright (C) 2012 Schneider-Electric
 *
 * This file is part of "Mind Compiler" is free software: you can redistribute 
 * it and/or modify it under the terms of the GNU Lesser General Public License 
 * as published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: mind@ow2.org
 *
 * Authors: Stephane Seyvoz, Assystem (for Schneider-Electric)
 * Contributors: 
 */

package org.ow2.mind.adl;

import static org.ow2.mind.NameHelper.toValidName;
import static org.ow2.mind.PathHelper.fullyQualifiedNameToPath;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;

import org.antlr.stringtemplate.StringTemplate;
import org.objectweb.fractal.adl.ADLException;
import org.objectweb.fractal.adl.CompilerError;
import org.objectweb.fractal.adl.Definition;
import org.ow2.mind.SourceFileWriter;
import org.ow2.mind.adl.graph.ComponentGraph;
import org.ow2.mind.io.IOErrors;

import com.google.inject.Inject;
import com.google.inject.name.Named;

public class InstanceMacroSourceGenerator extends AbstractSourceGenerator
implements InstanceSourceGenerator {

	/** The name to be used to inject the templateGroupName used by this class. */
	public static final String    TEMPLATE_NAME    = "optim.instances.implementations.optimizedmacro";

	/** The default templateGroupName used by this class. */
	public static final String    DEFAULT_TEMPLATE = "st.optim.instances.implementations.OptimizedMacro";

	protected static final String FILE_EXT         = ".optimized_macro";

	@Inject
	protected InstanceMacroSourceGenerator(
			@Named(TEMPLATE_NAME) final String templateGroupName) {
		super(templateGroupName);
	}

	public void visit(InstancesDescriptor instanceDesc, Map<Object, Object> context)
			throws ADLException {


		final File outputFile = outputFileLocatorItf.getCSourceOutputFile(
				getMacroFileName(instanceDesc), context);

		if (regenerate(outputFile, instanceDesc.instanceDefinition, context)) {

			final StringTemplate st;

			st = getInstanceOf("ComponentInstances");
			
			st.setAttribute("definition", instanceDesc.instanceDefinition);

			// SSZ : WARNING :	/!\ HERE WE CONSIDER AS A PRE-CONDITION THAT WE WILL HAVE
			// 					ONLY ONE AND ONLY ONE INSTANCE PER DEFINITION /!\
			st.setAttribute("instance", ((ArrayList<ComponentGraph>) instanceDesc.instances).get(0));

			try {
				SourceFileWriter.writeToFile(outputFile, st.toString());
			} catch (final IOException e) {
				throw new CompilerError(IOErrors.WRITE_ERROR, e,
						outputFile.getAbsolutePath());
			}

		}
	}

	// ---------------------------------------------------------------------------
	// public static methods
	// ---------------------------------------------------------------------------

	/**
	 * A static method that returns the name of the file that is generated by this
	 * component for the given {@link InstancesDescriptor};
	 * 
	 * @param instanceDesc an {@link InstancesDescriptor} node.
	 * @return the name of the file that is generated by this component for the
	 *         given {@link Definition};
	 */
	public static String getMacroFileName(
			final InstancesDescriptor instanceDesc) {
		String outputFileName = toValidName(instanceDesc.topLevelDefinition
				.getName());
		outputFileName += "_"
				+ toValidName(instanceDesc.instanceDefinition.getName()).replace('.',
						'_');

		outputFileName = fullyQualifiedNameToPath(outputFileName, FILE_EXT);
		return outputFileName;
	}

	protected void addDefinitions(final ComponentGraph graph,
			final Set<Definition> definitions) {
		definitions.add(graph.getDefinition());

		for (final ComponentGraph subComp : graph.getSubComponents()) {
			addDefinitions(subComp, definitions);
		}
	}

}
