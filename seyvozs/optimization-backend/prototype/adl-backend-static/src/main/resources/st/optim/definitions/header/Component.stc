template st.optim.definitions.header.Component: st.common.ComponentHelper
  implements st.optim.definitions.header.ComponentDefinitionHeader {

st.optim.membrane.ControllerGenerator ctrlGenerator = plugin(st.optim.membrane);

$${

// -----------------------------------------------------------------------------
// Implementation of the ComponentDefinitionHeader interface
// -----------------------------------------------------------------------------

ComponentDefinitionHeader(definition, instance) ::= <<
/* Generated file: <definition.name;format="nameToPath">.adl.h */
#ifndef __COMPONENT_<definition.name;format="toUpperCName">_ADL_H
#define __COMPONENT_<definition.name;format="toUpperCName">_ADL_H

#include "mindcommon.h"

/* Start including the interface descriptions */
<definition.interfaces:{#include "<it.signature; format="nameToPath">.itf.h"}; separator="\n">
<UsedInterfaceDefinitions(definition=definition)>
/* End including the interface descriptions */

<if (definition.astNodeTypes.("component"))>
/* Start including the sub-component descriptions */
<definition.components:{#include "<it.definitionReference.name;format="nameToPath">.adl.h"}; separator="\n">
/* End including the sub-component descriptions */
<endif>

<if (definition.astNodeTypes.("attribute"))>
/* Start including the attribute IDT */
<definition.attributes:{<if (it.idt)>#include "<it.idt; format="toCPath">"<endif>}; separator="\n">
/* End including the attribute IDT */
<endif>

<if (definition.astNodeTypes.("dataField"))>
/* Start including the data field IDT */
<definition.dataFields:{<if (it.idt)>#include "<it.idt; format="toCPath">"<endif>}; separator="\n">
/* End including the data field IDT */
<endif>

<ControllerGlobalDecls(definition=definition)>

/* Start definition of internal component data type */
<if (!(instance.decorations.("allow-instance-data-removal")))>
struct __component_<definition.name;format="toCName">_internal_data_t {
<TypeStructures(definition=definition, instance=instance)>
<if (!(instance.decorations.("allow-subcomps-data-removal")))>
<SubComponentStructures(definition=definition)>
<endif>
<ControllerStructures(definition=definition)>
<AttributeStructures(definition=definition)>
<DataFieldStructures(definition=definition)>

};
<else>
/* Internal data was optimized, so it was removed */
<endif>
<! SSZ : END MODIFICATION !>
/* End definition of internal component data type */

/* Start definition of component type */
<! SSZ : BEGIN MODIFICATION !>
<if (!(instance.decorations.("allow-instance-data-removal")))>
<ComponentTypeDef(definition=definition)> 
<endif>
<! SSZ : END MODIFICATION !>
/* End  definition of component type */

/* Start declaration of interface V-Tables. */
<ComponentVTableDecl(definition=definition)>
/* End declaration of interface V-Tables. */

/* Start declaration of factory */
<! SSZ : BEGIN MODIFICATION !><! Here and inside !>
<if (!(instance.decorations.("allow-instance-data-removal")))>
<FactoryDef(definition=definition, instance=instance)>
<endif>
<! SSZ : END MODIFICATION !>
/* End declaration of factory */

#endif /* __COMPONENT_<definition.name;format="toUpperCName">_ADL_H */

>>

// -----------------------------------------------------------------------------
// Internal templates
// -----------------------------------------------------------------------------

ControllerGlobalDecls(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:ControllerGlobalDecl(definition=definition, ctrl=it);separator="\n">
<endif>
>>

ControllerGlobalDecl(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerGlobalDecl)(definition=definition, controller=ctrl)>};separator="\n">
>>

// -----------------------------------------------------------------------------
// Used interface definitions

UsedInterfaceDefinitions(definition) ::= <<
<definition.astDecorations.("used-interface-definition").values:UsedInterfaceDefinition(usedItfName=it.interfaceName); separator="\n">
>>

UsedInterfaceDefinition(usedItfName) ::= <<
#include "<usedItfName; format="nameToPath">.itf.h"
>>

// -----------------------------------------------------------------------------
// Internal data type generation

TypeStructures(definition, instance) ::= <<
<if (definition.interfaces)>
<if (instance.decorations.("allow-external-type-data-removal"))>
  /* struct {
    <definition.interfaces:InterfaceDescriptorDecl(definition=definition, itf=it, instance=instance); separator="\n">
  } type; */
<else>
  struct {
    <definition.interfaces:InterfaceDescriptorDecl(definition=definition, itf=it, instance=instance); separator="\n">
  } type;
<endif>
<endif>
<if (definition.astNodeTypes.("internalInterface"))>
<if (definition.internalInterfaces)>
<if (instance.decorations.("allow-internal-type-data-removal"))>
  /* struct {
    <definition.internalInterfaces:InterfaceDescriptorDecl(definition=definition, itf=it, instance=instance, isInternal="true"); separator="\n">
  } inner_type; */
<else>
  struct {
    <definition.internalInterfaces:InterfaceDescriptorDecl(definition=definition, itf=it, instance=instance, isInternal="true"); separator="\n">
  } inner_type;
<endif>
<endif>
<endif>
>>

StaticBindingItfName(itfName, index, isInternal) ::= "<if (isInternal)>INTERNAL_<endif><itfName><if (index)>_<index><endif>"

InterfaceDescriptorDecl(definition, itf, instance, isInternal) ::= <<
<! SSZ : BEGIN MODIFICATION !>
<if (isClient.(itf.role))>
  <if (itf.numberOfElement)>
  <! Optimization : Here we check if bindings from our instance are static !>
    <if (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding.astDecorations.("is-static"))>
// Optimized : Removed declaration for memory saving 1
// <InterfaceType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
    <else>
// No optimization : default behavior 1
<InterfaceType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
    <endif>
  <else>
  	<if (itf.astDecorations.("binding-destination-is-controller"))>
// No optimization : Binding destination is a controller
<InterfaceType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
  	<else>
  		<if (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding.astDecorations.("is-static"))>
// Optimized : Interface is not collection, and is statically bound
// <InterfaceType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
    	<else>
// No optimization : Normal binding (no collection, no controller) and not static
<InterfaceType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
  		<endif>
  	<endif>
  <endif>
<else>
  <! Optimization : Here we check if the host component is in a @StaticBindings-tagged composite (decoration propagated) !>
  <if (definition.astDecorations.("parent-has-static-bindings"))>
    <! We do not optimize collection interfaces yet !>
    <if (itf.numberOfElement)>
// No optimization : Collection interfaces are not supported yet
<InterfaceDescType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
    <else>
      <! As we do not optimize collection interfaces, we've got to care whether a binding source is a collection so the destination isn't optimized either !>
      <if (instance.decorations.("reverse-collection-binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding.fromInterfaceNumber)>
// No optimization : Parent has @StaticBindings but binding source is a collection
<InterfaceDescType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
      <else>
      	<! Maybe our interface is a controller, that we don't want to optimize: exception case !>
      	<if (itf.astDecorations.("controller-interface"))>
// No optimization : Parent has @StaticBindings but the interface is a controller
<InterfaceDescType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
      	<else>
// Optimized : Parent has @StaticBinding, interface is not a controller, doesn't have a collection as binding source, and isn't collection 
// <InterfaceDescType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
      	<endif>
      <endif>
    <endif>
  <else>
    <! parent is not decorated with static-bindings but current component is decorated with static-bindings ? optimize internal server interface data !>
    <if (isInternal)>
      <if (definition.astDecorations.("has-static-bindings"))>
      	<! Maybe our interface is a controller, that we don't want to optimize: exception case: exception case !>
      	<if (itf.astDecorations.("binding-destination-is-controller"))>
// No optimization : interface is a controller (and internal)
<InterfaceDescType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
      	<else>
      		// Optimized : Removed declaration for memory saving, as the interface is internal and not a controller
      		// <InterfaceType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
      	<endif>
      <else>
      // No optimization : default behavior as no @StaticBindings concerns the host composite and the current component
      <InterfaceDescType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
      <endif>
    <else>
    // No optimization : default behavior for external interface as no @StaticBindings was specified on the parent
    <InterfaceDescType(signature=itf.signature)> <itf.name><if (itf.numberOfElement)>[<itf.numberOfElement>]<endif>;
    <endif>
  <endif>
<endif>
<! SSZ : END MODIFICATION !>
>>

SubComponentStructures(definition) ::= <<
<if (definition.astNodeTypes.("component"))>
<if (definition.components)>
  struct {
    <definition.components:ComponentDescriptorDecl(component=it); separator="\n">
  } components;
<endif>
<endif>
>>

ComponentDescriptorDecl(component) ::= <<
  <! SSZ : BEGIN MODIFICATION !>
  <if (!(component.astDecorations.("allow-instance-data-removal")))>
  <ComponentTypeName(definitionName=component.definitionReference.name)> *<component.name> ;
  <else>
  /*<ComponentTypeName(definitionName=component.definitionReference.name)> *<component.name> ;*/
  <endif>
  <! SSZ : END MODIFICATION !>
>>


AttributeStructures(definition) ::= <<
<if (definition.astNodeTypes.("attribute"))>
<if (definition.attributes)>
  struct {
    <definition.attributes:AttributeDecl(attr=it); separator="\n">
  } attributes;
<endif>
<endif>
>>

AttributeDecl(attr) ::= <<
<if (attrTypeNameMap.(attr.type))>
<attrTypeNameMap.(attr.type)> <attr.name>;
<else>
<attr.type> <attr.name>;
<endif>
>>

attrTypeNameMap ::= [
  "string" : "const char*"
]


DataFieldStructures(definition) ::= <<
<if (definition.astNodeTypes.("dataField"))>
<if (definition.dataFields)>
  struct {
    <definition.dataFields:DataFieldDecl(dataField=it); separator="\n">
  } dataFields;
<endif>
<endif>
>>

DataFieldDecl(dataField) ::= <<
<if (attrTypeNameMap.(dataField.type))>
<attrTypeNameMap.(dataField.type)> <dataField.name>;
<else>
<dataField.type> <dataField.name>;
<endif>
>>


ControllerStructures(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:ControllerDataDecl(definition=definition, ctrl=it)>
<endif>
>>

ControllerDataDecl(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerData)(definition=definition, controller=ctrl)>}>
>>

// -----------------------------------------------------------------------------
// Component typedef

ComponentTypeDef(definition) ::= <<
#ifdef __COMPONENT_IN_<definition.name;format="toUpperCName">
#ifdef COMP_DATA
#undef COMP_DATA
#endif
#define COMP_DATA struct __component_<definition.name;format="toCName">_internal_data_t __component_internal_data

#ifdef PRIVATE_DATA_T
#undef PRIVATE_DATA_T
#endif
#define PRIVATE_DATA_T <ComponentTypeName(definitionName=definition.name)>

<if (definition.astNodeTypes.("data"))>
  <if (definition.data)>
    <if (definition.data.cCode)>
/* Start inlined data code */
<definition.data.astSource; format="sourceTo#line">
<definition.data.cCode>
/* End inlined data code. */
        <if (definition.astDecorations.("is-singleton"))>
typedef struct {
  COMP_DATA;
} PRIVATE_DATA_T;
        <endif>
    <elseif (definition.data.path)>
/* Include data file */
#include "<definition.data.path; format="toCPath">"
      <if (definition.astDecorations.("is-singleton"))>
typedef struct {
  COMP_DATA;
} PRIVATE_DATA_T;
      <endif>
    <else>
/* No private data */
typedef struct {
  COMP_DATA;
} PRIVATE_DATA_T;
    <endif>
  <else>
    /* No private data */
typedef struct {
  COMP_DATA;
} PRIVATE_DATA_T;
  <endif>
<else>
/* No private data */
typedef struct {
  COMP_DATA;
} PRIVATE_DATA_T;
<endif>


<if (definition.astDecorations.("is-singleton"))>
<! SSZ : BEGIN MODIFICATION !>
<if (!(instance.decorations.("allow-instance-data-removal")))>
/* declaration of singleton instance as global variable. */
#define INSTANCE___component_<definition.name;format="toCName">_singleton_instance_DECLARED
extern PRIVATE_DATA_T __component_<definition.name;format="toCName">_singleton_instance;
<endif>
<! SSZ : END MODIFICATION !>
<endif>

#else /* __COMPONENT_IN_<definition.name;format="toUpperCName"> */
typedef struct {
  struct __component_<definition.name;format="toCName">_internal_data_t __component_internal_data;
} <ComponentTypeName(definitionName=definition.name)>;
#endif /* __COMPONENT_IN_<definition.name;format="toUpperCName"> */
>>

// -----------------------------------------------------------------------------
// V-Table declaration

ComponentVTableDecl(definition) ::= <<
<! SSZ : BEGIN MODIFICATION !>
/* Start declaration of server interface V-Tables. */
<definition.interfaces:ServerInterfaceVTableDecl(definition=definition, itf=it); separator="\n">
/* End declaration of server interface V-Tables. */

<if (definition.astNodeTypes.("internalInterface"))>
<if (definition.internalInterfaces)>
/* Start declaration of internal server interface V-Tables */
<definition.internalInterfaces:ServerInterfaceVTableDecl(definition=definition, itf=it); separator="\n">
/* End declaration of internal server interface V-Tables */
<endif>
<endif>
<! SSZ : END MODIFICATION !>
>>

ServerInterfaceVTableDecl(definition, itf) ::= <<
<! SSZ : BEGIN MODIFICATION !>
<if(isServer.(itf.role))>
<if (itf.numberOfElement)>
<itf.astDecorations.("collectionIndexes"):{index | extern <InterfaceVTableType(signature=itf.signature)> <vTableInstanceName(definition=definition,itf=itf,index=index)>;};separator="\n">
<else>
  <! Optimization : Here we check if bindings from our instance are static !>
  <if (definition.astDecorations.("parent-has-static-bindings"))>
    <! As we do not optimize collection interfaces, we've got to care whether a binding source is a collection so the destination isn't optimized either !>
      <if (instance.decorations.("reverse-collection-binding-descriptors").(StaticBindingItfName(itfName=itf.name)).binding.fromInterfaceNumber)>
// No optimization : default behavior 7
extern <InterfaceVTableType(signature=itf.signature)> <vTableInstanceName(definition=definition,itf=itf)>;
      <else>
      	<if (itf.astDecorations.("controller-interface"))>
// No optimization : Parent has @StaticBindings but binding destination is a controller
extern <InterfaceVTableType(signature=itf.signature)> <vTableInstanceName(definition=definition,itf=itf)>;
      	<else>
// Optimized : Removed reference as the VTable has already been garbaged anyway
// extern <InterfaceVTableType(signature=itf.signature)> <vTableInstanceName(definition=definition,itf=itf)>;
      	<endif>
      <endif>
  <else>
extern <InterfaceVTableType(signature=itf.signature)> <vTableInstanceName(definition=definition,itf=itf)>;
  <endif>
<endif>
<endif>
<! SSZ : END MODIFICATION !>
>>


// -----------------------------------------------------------------------------
// Factory macros

FactoryDef(definition, instance) ::= <<
#define <definition.name;format="toUpperCName">_DECLARE_INSTANCE(instance_name) \
extern <ComponentTypeName(definitionName=definition.name)> instance_name;

#define <definition.name;format="toUpperCName">_INIT_INSTANCE(instance_name<AddItfNames(definition=definition)><AddSubComponentNames(definition=definition)><AddAttributeNames(definition=definition)><AddControllersDataNames(definition=definition)>) \
<InitializeGlobalControllerStructures(definition=definition)><ComponentTypeName(definitionName=definition.name)> instance_name = { \
  { /* __component_internal_data: */ \
<InitializeInterfaces(definition=definition, instance=instance)><InitializeComponents(definition=definition)><InitializeControllerStructures(definition=definition)><InitializeAttributes(definition=definition)>  } \
};


int __component_<definition.name;format="toCName">_factory(void **instance, void *allocItf <ComponentFactoryParameters(definition=definition)>);
int __component_<definition.name;format="toCName">_destroy(void *instance, void *allocItf);
>>

AddItfNames(definition) ::= <<
<definition.interfaces:AddItfName(itf=it)><if (definition.astNodeTypes.("internalInterface"))>
<if (definition.internalInterfaces)>
<definition.internalInterfaces:AddItfName(itf=it)>
<endif>
<endif>
>>

AddItfName(itf) ::= <<
<if (isClient.(itf.role))>
<if (itf.numberOfElement)>
<itf.astDecorations.("collectionIndexes"):{, <itf.name>_<it>_ptr, <itf.name>_<it>_instance, <itf.name>_<it>_vTable}>
<else>
, <itf.name>_ptr, <itf.name>_instance, <itf.name>_vTable
<endif>
<endif>
>>

AddSubComponentNames(definition) ::= <<
<if (definition.astNodeTypes.("component"))><definition.components:{<if (!(it.astDecorations.("allow-instance-data-removal")))>, <it.name><else> /*, <it.name>*/<endif>}><endif>
>>

AddAttributeNames(definition) ::= <<
<if (definition.astNodeTypes.("attribute"))><definition.attributes:{<if (it.value)>, <it.name><endif>}><endif>
>>


InitializeInterfaces(definition, instance) ::= <<
<if (!(instance.decorations.("allow-external-type-data-removal")))>
<if (definition.interfaces)>    { /* type: */ \
      <trunc(definition.interfaces):{/* <it.name> : */ <InitializeInterface(definition=definition, instance=instance, itf=it)>}; separator="\ "> \
      /* <last(definition.interfaces).name> : */ <InitializeLastInterface(definition=definition, instance=instance, itf=last(definition.interfaces))> \
    }, \
<endif>
<endif>
<if (!(instance.decorations.("allow-internal-type-data-removal")))>
<if (definition.astNodeTypes.("internalInterface"))>
<if (definition.internalInterfaces)>    { /* inner_type */ \
      <trunc(definition.internalInterfaces):{/* <it.name> : */ <InitializeInterface(definition=definition, instance=instance, itf=it, isInternal="true")>}; separator="\ "> \
      /* <last(definition.internalInterfaces).name> : */ <InitializeLastInterface(definition=definition, instance=instance, itf=last(definition.internalInterfaces), isInternal="true")> \
    }, \
<endif>
<endif>
<endif>
>>

InitializeInterface(definition, instance, itf, isInternal) ::= <<
<if(isClient.(itf.role))>
  <if (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding.astDecorations.("is-static"))>
/* <InitializeClientInterface(definition=definition, itf=itf)>, */ \
  <else>
    <if (definition.astDecorations.("parent-has-static-bindings"))>
<! SSZ : Exception : If someone tries to optimize a collection interface, we don't optimize the latter yet !>
      <if (itf.numberOfElement)>
<InitializeClientInterface(definition=definition, itf=itf)>,
      <else>
      	<if (itf.astDecorations.("binding-destination-is-controller"))>
<InitializeClientInterface(definition=definition, itf=itf)>,
		<else>
<! SSZ : Exception : If someone tries to optimize a binding with a collection interface as destination, we don't optimize the latter yet !>
        	<if (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding.toInterfaceNumber)>
<InitializeClientInterface(definition=definition, itf=itf)>,
        	<else>
          		<if (!(instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding))>
            		<if (itf.contingency)>
<InitializeClientInterface(definition=definition, itf=itf)>,
            		<endif>
          		<else>
            		<if (isInternal)>
              			<if (definition.astDecorations.("has-static-bindings"))>
/* <InitializeClientInterface(definition=definition, itf=itf)>, */ \
             	 		<else>
<InitializeClientInterface(definition=definition, itf=itf)>,
              			<endif>
            		<else>
<InitializeClientInterface(definition=definition, itf=itf)>,
            		<endif>
          		<endif>
          	<endif>
        <endif>
      <endif>
    <else>
<InitializeClientInterface(definition=definition, itf=itf)>,
    <endif>
  <endif>
<else>
  <if (definition.astDecorations.("parent-has-static-bindings"))>
    <if (itf.numberOfElement)>
<InitializeServerInterface(definition=definition, itf=itf)>,
    <else>
      <if (instance.decorations.("reverse-collection-binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding.fromInterfaceNumber)>
<InitializeServerInterface(definition=definition, itf=itf)>,
      <else>
      	<if (itf.astDecorations.("controller-interface"))>
<InitializeServerInterface(definition=definition, itf=itf)>,
      	<else>
/* <InitializeServerInterface(definition=definition, itf=itf)>, */ \
		<endif>
      <endif>
    <endif>
  <else>
    <if (isInternal)>
      <if (definition.astDecorations.("has-static-bindings"))>
      	<if (itf.astDecorations.("controller-interface"))>
<InitializeServerInterface(definition=definition, itf=itf)>,
      	<else>
/* <InitializeServerInterface(definition=definition, itf=itf)>, */
		<endif>
      <else>
<InitializeServerInterface(definition=definition, itf=itf)>,
      <endif>
    <else>
<InitializeServerInterface(definition=definition, itf=itf)>,
    <endif>
  <endif>
<endif>
>>

InitializeLastInterface(definition, instance, itf, isInternal) ::= <<
<if(isClient.(itf.role))>
	<if (itf.astDecorations.("binding-destination-is-controller"))>
<InitializeClientInterface(definition=definition, itf=itf)>
	<else>
		<if (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding.astDecorations.("is-static"))>
/* <InitializeClientInterface(definition=definition, itf=itf)> */ \
  		<else>
    		<if (definition.astDecorations.("parent-has-static-bindings"))>
<! SSZ : Exception : If someone tries to optimize a collection interface, we don't optimize the latter yet !>
      			<if (itf.numberOfElement)>
<InitializeClientInterface(definition=definition, itf=itf)>
      			<else>
<! SSZ : Exception : If someone tries to optimize a binding with a collection interface as destination, we don't optimize the latter yet !>
        			<if (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding.toInterfaceNumber)>
<InitializeClientInterface(definition=definition, itf=itf)>
        			<else>
          				<if (!(instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding))>
            				<if (itf.contingency)>
<InitializeClientInterface(definition=definition, itf=itf)>
            				<endif>
          				<else>
            				<if (isInternal)>
              					<if (definition.astDecorations.("has-static-bindings"))>
/* <InitializeClientInterface(definition=definition, itf=itf)> */ \
              					<else>
<InitializeClientInterface(definition=definition, itf=itf)>
              					<endif>
            				<else>
<InitializeClientInterface(definition=definition, itf=itf)>
            				<endif>
          				<endif>
          			<endif>
      			<endif>
    		<else>
<InitializeClientInterface(definition=definition, itf=itf)>
    		<endif>
    	<endif>
    <endif>
<else>
  <if (definition.astDecorations.("parent-has-static-bindings"))>
<! SSZ : Exception : If someone tries to optimize a collection interface, we don't optimize the latter yet !>
    <if (itf.numberOfElement)>
<InitializeServerInterface(definition=definition, itf=itf)>
    <else>
<! As we do not optimize collection interfaces, we've got to care whether a binding source is a collection so the destination isn't optimized either !>
      <if (instance.decorations.("reverse-collection-binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal=isInternal)).binding.fromInterfaceNumber)>
<InitializeServerInterface(definition=definition, itf=itf)>
      <else>
      	<if (itf.astDecorations.("controller-interface"))>
<InitializeServerInterface(definition=definition, itf=itf)>
      	<else>
/* <InitializeServerInterface(definition=definition, itf=itf)> */ \
		<endif>
      <endif>
    <endif>
  <else>
    <if (isInternal)>
      <if (definition.astDecorations.("has-static-bindings"))>
      	<if (itf.astDecorations.("controller-interface"))>
<InitializeServerInterface(definition=definition, itf=itf)>
      	<else>
/* <InitializeServerInterface(definition=definition, itf=itf)> */
		<endif>
      <else>
<InitializeServerInterface(definition=definition, itf=itf)>
      <endif>
    <else>
<InitializeServerInterface(definition=definition, itf=itf)>
    <endif>
  <endif>
<endif>
>>

InitializeClientInterface(definition, itf) ::= <<
<if (itf.numberOfElement)>
{<itf.astDecorations.("collectionIndexes"):{ <itf.name>_<it>_ptr}; separator=", ">}
<else>
<itf.name>_ptr
<endif>
>>

InitializeServerInterface(definition, itf) ::= <<
<if (itf.numberOfElement)>
{<itf.astDecorations.("collectionIndexes"):{ {&instance_name, &<vTableInstanceName(definition=definition,itf=itf, index=it)>, <isBoundValue(definition=definition, itf=itf, index=it)>}}; separator=", ">}
<else>
{&instance_name, &<vTableInstanceName(definition=definition,itf=itf)>, <isBoundValue(definition=definition, itf=itf)>}
<endif>
>>

isBoundValue(definition, itf, index) ::= <<
<if (itf.astDecorations.("delegated-interface"))>
<itf.astDecorations.("delegated-interface").name><if (index)>_<index><endif>_ptr
<else>
&instance_name
<endif>
>>

InitializeComponents(definition) ::= <<
<if (definition.astNodeTypes.("component"))><if (definition.components)>    { /* components */ \
      <trunc(definition.components):{<SubCompName(component=it)>}> \
      <last(definition.components):{<LastSubCompName(component=it)>}> \
    }, \
<endif><endif>
>>

SubCompName(component) ::= <<
  <! SSZ : BEGIN MODIFICATION  added this new function !><if (component.astDecorations.("allow-instance-data-removal"))>  /* &(<component.name>), */<else>  &(<component.name>),<endif><! SSZ : END MODIFICATION !>
>>

LastSubCompName(component) ::= <<
  <! SSZ : BEGIN MODIFICATION  added this new function !><if (component.astDecorations.("allow-instance-data-removal"))>  /* &(<component.name>) */<else>  &(<component.name>)<endif><! SSZ : END MODIFICATION !>
>>

InitializeAttributes(definition) ::= <<
<if (definition.astNodeTypes.("attribute"))><if (definition.attributes)>    {  /* attributes: */ \
    <definition.attributes:{<if (it.value)>/* <it.name> : */ <it.name>, <endif>}> \
    }, \
<endif><endif>
>>

InitializeGlobalControllerStructures(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:InitializeGlobalControllerStructure(definition=definition, ctrl=it)>
<endif>
>>

InitializeGlobalControllerStructure(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerGlobalDataStaticInit)(definition=definition, controller=ctrl)>}>
>>

AddControllersDataNames(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:AddControllerDataNames(definition=definition, ctrl=it)>
<endif>
>>

AddControllerDataNames(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerDataNames)(definition=definition, controller=ctrl)>}>
>>

InitializeControllerStructures(definition) ::= <<
<if (definition.astNodeTypes.("controller"))>
<definition.controllers:InitializeControllerData(definition=definition, ctrl=it)>
<endif>
>>

InitializeControllerData(definition, ctrl) ::= <<
<ctrl.sources:{<(ctrlGenerator.(it.path).ControllerDataStaticInit)(definition=definition, controller=ctrl)>}>
>>


ComponentFactoryParameters(definition) ::= <<
<if (definition.astNodeTypes.("formalParameter"))>
<definition.formalParameters:ComponentFactoryParameter(definition=definition, parameter=it)>
<endif>
>>

ComponentFactoryParameter(definition, parameter) ::= <<
, 
<if (parameter.astDecorations.("inferred-type"))>
<parameter.astDecorations.("inferred-type").cType> <parameter.name;format="toCName">
<else>
int <parameter.name;format="toCName">
<endif>
>>

}$$ 
}