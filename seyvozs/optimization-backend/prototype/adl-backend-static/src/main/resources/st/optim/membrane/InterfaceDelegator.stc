template st.optim.membrane.InterfaceDelegator
  : st.common.ComponentHelper
  implements st.optim.membrane.ControllerGenerator {

st.interfaces.IDLDefinition idl2c = st.interfaces.IDL2C; 

$${

// -----------------------------------------------------------------------------
// Implementation of the ControllerGenerator interface
// -----------------------------------------------------------------------------

ControllerImplementation(definition, instance, controller, interfaceDefinitions) ::= <<
<ItfDelegator(instance=instance, itf=first(controller.controllerInterfaces).astDecorations.("referenced-interface"), interfaceDefinitions=interfaceDefinitions)>
>>

// -----------------------------------------------------------------------------
// Internal templates
// -----------------------------------------------------------------------------

ItfDelegator(instance, itf, interfaceDefinitions) ::= <<
/* Start interface delegator for interface <itf.name> */
<if (itf.numberOfElement)>
<itf.astDecorations.("collectionIndexes"):{index | <interfaceDefinitions.(itf.signature).methods:MethodDelegator(instance=instance, itf=itf, index=index, method=it);separator="\n">};separator="\n">
<else>
<interfaceDefinitions.(itf.signature).methods:MethodDelegator(instance=instance, itf=itf, method=it);separator="\n">
<endif>

/* End interface delegator for interface <itf.name> */


>>

StaticBindingItfName(itfName, index, isInternal) ::= "<if (isInternal)>INTERNAL_<endif><itfName><if (index)>_<index><endif>"

MethodDelegator(instance, itf, index, method) ::= <<
<if (definition.astDecorations.("is-singleton"))>
<(idl2c.methodDef)(method=method,withThisPtr="false",methodName=ProxyName(itfName=itf.name, index=index, methodName=method.name)) > { 
<else>
<(idl2c.methodDef)(method=method,withThisPtr="typed",methodName=ProxyName(itfName=itf.name, index=index, methodName=method.name)) > { 
<endif>

<if(method.vaArgs)>
  va_list args;
  <if (! ((idl2c.isVoidMethod)(method=method)))>
  <(idl2c.varDef)(type=method.type, name="retval")>;
  <endif>
  va_start (args, <last(method.parameters).name>);
  <if (! ((idl2c.isVoidMethod)(method=method)))>
  retval =
  <endif>
  CALL_INTERFACE_PTR_WITH_PARAM(CONTEXT_PTR_ACCESS->__component_internal_data.<if (isServer.(itf.role))>inner_<endif>type.<itf.name><if (index)>[<index>]<endif>, <method.vaArgs.dualMethodName>)
       <method.parameters:{<it.name>};separator=", "> , args PARAMS_RPARENT;
  va_end(args);
  <if (! ((idl2c.isVoidMethod)(method=method)))>
  return retval;
  <endif>
<else>
  <if (! ((idl2c.isVoidMethod)(method=method)))>
  return
  <endif>
  <if (method.parameters)>
  <! SSZ : BEGIN MODIFICATION !>
  <if (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal="true")).binding.astDecorations.("is-static"))>
  __component_<instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal="true")).serverComponent.definition.name; format="toCName">_<instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal="true")).binding.toInterface>_<method.name>(<method.parameters:{<it.name>};separator=", "> PARAMS_RPARENT;
  <elseif (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name)).binding.astDecorations.("is-static"))>
  __component_<instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name)).serverComponent.definition.name; format="toCName">_<instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name)).binding.toInterface>_<method.name>(<method.parameters:{<it.name>};separator=", "> PARAMS_RPARENT;
  <else>
  CALL_INTERFACE_PTR_WITH_PARAM(CONTEXT_PTR_ACCESS->__component_internal_data.<if (isServer.(itf.role))>inner_<endif>type.<itf.name><if (index)>[<index>]<endif>, <method.name>)
       <method.parameters:{<it.name>};separator=", "> PARAMS_RPARENT;
  <endif>
  <! SSZ : END MODIFICATION !>
  <else>
  <! SSZ : BEGIN MODIFICATION !>
  <if (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal="true")).binding.astDecorations.("is-static"))>
  __component_<instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal="true")).serverComponent.definition.name; format="toCName">_<instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name, isInternal="true")).binding.toInterface>_<method.name>();
  <elseif (instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name)).binding.astDecorations.("is-static"))>
  __component_<instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name)).serverComponent.definition.name; format="toCName">_<instance.decorations.("binding-descriptors").(StaticBindingItfName(itfName=itf.name)).binding.toInterface>_<method.name>();
  <else>
  CALL_INTERFACE_PTR_WITHOUT_PARAM(CONTEXT_PTR_ACCESS->__component_internal_data.<if (isServer.(itf.role))>inner_<endif>type.<itf.name><if (index)>[<index>]<endif>, <method.name>);
  <endif>
  <! SSZ : END MODIFICATION !>
  <endif>
<endif>

}

>>


ProxyName(itfName, index, methodName) ::= "INTERFACE<if (index)>_COLLECTION<endif>_METHOD(<itfName><if (index)>,<index><endif>, <methodName>)"

}$$
}