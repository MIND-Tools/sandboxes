/*
* generated by Xtext
*/

package org.ow2.mindEd.adl.textual.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FractalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AdlDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdlDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportDefinitionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cArchitecturedefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArchitecturedefinitionArchitectureDefinitionParserRuleCall_1_0 = (RuleCall)cArchitecturedefinitionAssignment_1.eContents().get(0);
		
		//AdlDefinition:
		//	imports+=ImportDefinition* architecturedefinition=ArchitectureDefinition;
		public ParserRule getRule() { return rule; }

		//imports+=ImportDefinition* architecturedefinition=ArchitectureDefinition
		public Group getGroup() { return cGroup; }

		//imports+=ImportDefinition*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportDefinition
		public RuleCall getImportsImportDefinitionParserRuleCall_0_0() { return cImportsImportDefinitionParserRuleCall_0_0; }

		//architecturedefinition=ArchitectureDefinition
		public Assignment getArchitecturedefinitionAssignment_1() { return cArchitecturedefinitionAssignment_1; }

		//ArchitectureDefinition
		public RuleCall getArchitecturedefinitionArchitectureDefinitionParserRuleCall_1_0() { return cArchitecturedefinitionArchitectureDefinitionParserRuleCall_1_0; }
	}

	public class ImportDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cImportNameAlternatives_1_0 = (Alternatives)cImportNameAssignment_1.eContents().get(0);
		private final RuleCall cImportNameFQNParserRuleCall_1_0_0 = (RuleCall)cImportNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cImportNameFULL_IMPORT_NAMEParserRuleCall_1_0_1 = (RuleCall)cImportNameAlternatives_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportDefinition:
		//	"import" importName=(FQN | FULL_IMPORT_NAME) ";";
		public ParserRule getRule() { return rule; }

		//"import" importName=(FQN | FULL_IMPORT_NAME) ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importName=(FQN | FULL_IMPORT_NAME)
		public Assignment getImportNameAssignment_1() { return cImportNameAssignment_1; }

		//FQN | FULL_IMPORT_NAME
		public Alternatives getImportNameAlternatives_1_0() { return cImportNameAlternatives_1_0; }

		//FQN
		public RuleCall getImportNameFQNParserRuleCall_1_0_0() { return cImportNameFQNParserRuleCall_1_0_0; }

		//FULL_IMPORT_NAME
		public RuleCall getImportNameFULL_IMPORT_NAMEParserRuleCall_1_0_1() { return cImportNameFULL_IMPORT_NAMEParserRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ArchitectureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArchitectureDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveComponentDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeComponentDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ArchitectureDefinition:
		//	ComponentTypeDefinition | PrimitiveComponentDefinition | CompositeComponentDefinition;
		public ParserRule getRule() { return rule; }

		//ComponentTypeDefinition | PrimitiveComponentDefinition | CompositeComponentDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentTypeDefinition
		public RuleCall getComponentTypeDefinitionParserRuleCall_0() { return cComponentTypeDefinitionParserRuleCall_0; }

		//PrimitiveComponentDefinition
		public RuleCall getPrimitiveComponentDefinitionParserRuleCall_1() { return cPrimitiveComponentDefinitionParserRuleCall_1; }

		//CompositeComponentDefinition
		public RuleCall getCompositeComponentDefinitionParserRuleCall_2() { return cCompositeComponentDefinitionParserRuleCall_2; }
	}

	public class PrimitiveComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cPrimitiveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameFQNParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cPrimitiveFormalArgumentsListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPrimitiveFormalArgumentsListFormalArgumentsListParserRuleCall_4_0 = (RuleCall)cPrimitiveFormalArgumentsListAssignment_4.eContents().get(0);
		private final Assignment cReferencesListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReferencesListPrimitiveReferencesListParserRuleCall_5_0 = (RuleCall)cReferencesListAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cBodyAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cBodyPrimitiveBodyParserRuleCall_6_0_1_0 = (RuleCall)cBodyAssignment_6_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Assignment cBodyAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cBodyPrimitiveBodyParserRuleCall_6_1_0 = (RuleCall)cBodyAssignment_6_1.eContents().get(0);
		
		//PrimitiveComponentDefinition:
		//	annotationsList=AnnotationsList? abstract?="abstract"? "primitive" name=FQN
		//	primitiveFormalArgumentsList=FormalArgumentsList? referencesList=PrimitiveReferencesList? ("{" body=PrimitiveBody? "}"
		//	| body=PrimitiveBody)?;
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? abstract?="abstract"? "primitive" name=FQN
		//primitiveFormalArgumentsList=FormalArgumentsList? referencesList=PrimitiveReferencesList? ("{" body=PrimitiveBody? "}"
		//| body=PrimitiveBody)?
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }

		//"primitive"
		public Keyword getPrimitiveKeyword_2() { return cPrimitiveKeyword_2; }

		//name=FQN
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_3_0() { return cNameFQNParserRuleCall_3_0; }

		//primitiveFormalArgumentsList=FormalArgumentsList?
		public Assignment getPrimitiveFormalArgumentsListAssignment_4() { return cPrimitiveFormalArgumentsListAssignment_4; }

		//FormalArgumentsList
		public RuleCall getPrimitiveFormalArgumentsListFormalArgumentsListParserRuleCall_4_0() { return cPrimitiveFormalArgumentsListFormalArgumentsListParserRuleCall_4_0; }

		//referencesList=PrimitiveReferencesList?
		public Assignment getReferencesListAssignment_5() { return cReferencesListAssignment_5; }

		//PrimitiveReferencesList
		public RuleCall getReferencesListPrimitiveReferencesListParserRuleCall_5_0() { return cReferencesListPrimitiveReferencesListParserRuleCall_5_0; }

		//("{" body=PrimitiveBody? "}" | body=PrimitiveBody)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"{" body=PrimitiveBody? "}"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0_0() { return cLeftCurlyBracketKeyword_6_0_0; }

		//body=PrimitiveBody?
		public Assignment getBodyAssignment_6_0_1() { return cBodyAssignment_6_0_1; }

		//PrimitiveBody
		public RuleCall getBodyPrimitiveBodyParserRuleCall_6_0_1_0() { return cBodyPrimitiveBodyParserRuleCall_6_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_0_2() { return cRightCurlyBracketKeyword_6_0_2; }

		//body=PrimitiveBody
		public Assignment getBodyAssignment_6_1() { return cBodyAssignment_6_1; }

		//PrimitiveBody
		public RuleCall getBodyPrimitiveBodyParserRuleCall_6_1_0() { return cBodyPrimitiveBodyParserRuleCall_6_1_0; }
	}

	public class PrimitiveDefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveDefinitionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cImplementationDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveDefinitionElement:
		//	InterfaceDefinition | AttributeDefinition | DataDefinition | ImplementationDefinition;
		public ParserRule getRule() { return rule; }

		//InterfaceDefinition | AttributeDefinition | DataDefinition | ImplementationDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall_0() { return cInterfaceDefinitionParserRuleCall_0; }

		//AttributeDefinition
		public RuleCall getAttributeDefinitionParserRuleCall_1() { return cAttributeDefinitionParserRuleCall_1; }

		//DataDefinition
		public RuleCall getDataDefinitionParserRuleCall_2() { return cDataDefinitionParserRuleCall_2; }

		//ImplementationDefinition
		public RuleCall getImplementationDefinitionParserRuleCall_3() { return cImplementationDefinitionParserRuleCall_3; }
	}

	public class ComponentTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFQNParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cReferencesListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReferencesListTypeReferencesListParserRuleCall_3_0 = (RuleCall)cReferencesListAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cBodyAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cBodyTypeBodyParserRuleCall_4_0_1_0 = (RuleCall)cBodyAssignment_4_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Assignment cBodyAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cBodyTypeBodyParserRuleCall_4_1_0 = (RuleCall)cBodyAssignment_4_1.eContents().get(0);
		
		//ComponentTypeDefinition:
		//	annotationsList=AnnotationsList? "type" name=FQN referencesList=TypeReferencesList? ("{" body=TypeBody? "}" |
		//	body=TypeBody)?;
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "type" name=FQN referencesList=TypeReferencesList? ("{" body=TypeBody? "}" |
		//body=TypeBody)?
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//name=FQN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_2_0() { return cNameFQNParserRuleCall_2_0; }

		//referencesList=TypeReferencesList?
		public Assignment getReferencesListAssignment_3() { return cReferencesListAssignment_3; }

		//TypeReferencesList
		public RuleCall getReferencesListTypeReferencesListParserRuleCall_3_0() { return cReferencesListTypeReferencesListParserRuleCall_3_0; }

		//("{" body=TypeBody? "}" | body=TypeBody)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"{" body=TypeBody? "}"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_0() { return cLeftCurlyBracketKeyword_4_0_0; }

		//body=TypeBody?
		public Assignment getBodyAssignment_4_0_1() { return cBodyAssignment_4_0_1; }

		//TypeBody
		public RuleCall getBodyTypeBodyParserRuleCall_4_0_1_0() { return cBodyTypeBodyParserRuleCall_4_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_2() { return cRightCurlyBracketKeyword_4_0_2; }

		//body=TypeBody
		public Assignment getBodyAssignment_4_1() { return cBodyAssignment_4_1; }

		//TypeBody
		public RuleCall getBodyTypeBodyParserRuleCall_4_1_0() { return cBodyTypeBodyParserRuleCall_4_1_0; }
	}

	public class TypeReferenceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReferenceDefinition");
		private final Assignment cReferenceNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReferenceNameFQNParserRuleCall_0 = (RuleCall)cReferenceNameAssignment.eContents().get(0);
		
		//TypeReferenceDefinition:
		//	referenceName=FQN;
		public ParserRule getRule() { return rule; }

		//referenceName=FQN
		public Assignment getReferenceNameAssignment() { return cReferenceNameAssignment; }

		//FQN
		public RuleCall getReferenceNameFQNParserRuleCall_0() { return cReferenceNameFQNParserRuleCall_0; }
	}

	public class TypeDefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinitionElement");
		private final RuleCall cInterfaceDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeDefinitionElement:
		//	InterfaceDefinition;
		public ParserRule getRule() { return rule; }

		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall() { return cInterfaceDefinitionParserRuleCall; }
	}

	public class CompositeComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cCompositeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFQNParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTemplateSpecifiersListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_3_0 = (RuleCall)cTemplateSpecifiersListAssignment_3.eContents().get(0);
		private final Assignment cCompositeFormalArgumentsListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_4_0 = (RuleCall)cCompositeFormalArgumentsListAssignment_4.eContents().get(0);
		private final Assignment cReferencesListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReferencesListCompositeReferencesListParserRuleCall_5_0 = (RuleCall)cReferencesListAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cBodyAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cBodyCompositeBodyParserRuleCall_6_0_1_0 = (RuleCall)cBodyAssignment_6_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Assignment cBodyAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cBodyCompositeBodyParserRuleCall_6_1_0 = (RuleCall)cBodyAssignment_6_1.eContents().get(0);
		
		//CompositeComponentDefinition:
		//	annotationsList=AnnotationsList? "composite" name=FQN templateSpecifiersList=TemplateSpecifiersList?
		//	compositeFormalArgumentsList=FormalArgumentsList? referencesList=CompositeReferencesList? ("{" body=CompositeBody "}"
		//	| body=CompositeBody)?;
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "composite" name=FQN templateSpecifiersList=TemplateSpecifiersList?
		//compositeFormalArgumentsList=FormalArgumentsList? referencesList=CompositeReferencesList? ("{" body=CompositeBody "}" |
		//body=CompositeBody)?
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"composite"
		public Keyword getCompositeKeyword_1() { return cCompositeKeyword_1; }

		//name=FQN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_2_0() { return cNameFQNParserRuleCall_2_0; }

		//templateSpecifiersList=TemplateSpecifiersList?
		public Assignment getTemplateSpecifiersListAssignment_3() { return cTemplateSpecifiersListAssignment_3; }

		//TemplateSpecifiersList
		public RuleCall getTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_3_0() { return cTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_3_0; }

		//compositeFormalArgumentsList=FormalArgumentsList?
		public Assignment getCompositeFormalArgumentsListAssignment_4() { return cCompositeFormalArgumentsListAssignment_4; }

		//FormalArgumentsList
		public RuleCall getCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_4_0() { return cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_4_0; }

		//referencesList=CompositeReferencesList?
		public Assignment getReferencesListAssignment_5() { return cReferencesListAssignment_5; }

		//CompositeReferencesList
		public RuleCall getReferencesListCompositeReferencesListParserRuleCall_5_0() { return cReferencesListCompositeReferencesListParserRuleCall_5_0; }

		//("{" body=CompositeBody "}" | body=CompositeBody)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"{" body=CompositeBody "}"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0_0() { return cLeftCurlyBracketKeyword_6_0_0; }

		//body=CompositeBody
		public Assignment getBodyAssignment_6_0_1() { return cBodyAssignment_6_0_1; }

		//CompositeBody
		public RuleCall getBodyCompositeBodyParserRuleCall_6_0_1_0() { return cBodyCompositeBodyParserRuleCall_6_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_0_2() { return cRightCurlyBracketKeyword_6_0_2; }

		//body=CompositeBody
		public Assignment getBodyAssignment_6_1() { return cBodyAssignment_6_1; }

		//CompositeBody
		public RuleCall getBodyCompositeBodyParserRuleCall_6_1_0() { return cBodyCompositeBodyParserRuleCall_6_1_0; }
	}

	public class TemplateSpecifiersListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateSpecifiersList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTemplateSpecifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0 = (RuleCall)cTemplateSpecifiersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTemplateSpecifiersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0 = (RuleCall)cTemplateSpecifiersAssignment_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TemplateSpecifiersList:
		//	"<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">";
		public ParserRule getRule() { return rule; }

		//"<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*
		public Group getGroup_1() { return cGroup_1; }

		//templateSpecifiers+=TemplateSpecifier
		public Assignment getTemplateSpecifiersAssignment_1_0() { return cTemplateSpecifiersAssignment_1_0; }

		//TemplateSpecifier
		public RuleCall getTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0() { return cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0; }

		//("," templateSpecifiers+=TemplateSpecifier)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//templateSpecifiers+=TemplateSpecifier
		public Assignment getTemplateSpecifiersAssignment_1_1_1() { return cTemplateSpecifiersAssignment_1_1_1; }

		//TemplateSpecifier
		public RuleCall getTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0() { return cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class FormalArgumentsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalArgumentsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFormalArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFormalArgumentsFormalArgumentParserRuleCall_1_0_0 = (RuleCall)cFormalArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFormalArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFormalArgumentsFormalArgumentParserRuleCall_1_1_1_0 = (RuleCall)cFormalArgumentsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FormalArgumentsList:
		//	"(" (formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*) ")";
		public ParserRule getRule() { return rule; }

		//"(" (formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*) ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*
		public Group getGroup_1() { return cGroup_1; }

		//formalArguments+=FormalArgument
		public Assignment getFormalArgumentsAssignment_1_0() { return cFormalArgumentsAssignment_1_0; }

		//FormalArgument
		public RuleCall getFormalArgumentsFormalArgumentParserRuleCall_1_0_0() { return cFormalArgumentsFormalArgumentParserRuleCall_1_0_0; }

		//("," formalArguments+=FormalArgument)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//formalArguments+=FormalArgument
		public Assignment getFormalArgumentsAssignment_1_1_1() { return cFormalArgumentsAssignment_1_1_1; }

		//FormalArgument
		public RuleCall getFormalArgumentsFormalArgumentParserRuleCall_1_1_1_0() { return cFormalArgumentsFormalArgumentParserRuleCall_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PrimitiveReferencesListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveReferencesList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferencesPrimitiveReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReferencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReferencesPrimitiveReferenceDefinitionParserRuleCall_2_1_0 = (RuleCall)cReferencesAssignment_2_1.eContents().get(0);
		
		//PrimitiveReferencesList:
		//	"extends" references+=PrimitiveReferenceDefinition ("," references+=PrimitiveReferenceDefinition)*;
		public ParserRule getRule() { return rule; }

		//"extends" references+=PrimitiveReferenceDefinition ("," references+=PrimitiveReferenceDefinition)*
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//references+=PrimitiveReferenceDefinition
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }

		//PrimitiveReferenceDefinition
		public RuleCall getReferencesPrimitiveReferenceDefinitionParserRuleCall_1_0() { return cReferencesPrimitiveReferenceDefinitionParserRuleCall_1_0; }

		//("," references+=PrimitiveReferenceDefinition)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//references+=PrimitiveReferenceDefinition
		public Assignment getReferencesAssignment_2_1() { return cReferencesAssignment_2_1; }

		//PrimitiveReferenceDefinition
		public RuleCall getReferencesPrimitiveReferenceDefinitionParserRuleCall_2_1_0() { return cReferencesPrimitiveReferenceDefinitionParserRuleCall_2_1_0; }
	}

	public class CompositeReferencesListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeReferencesList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferencesCompositeReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReferencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReferencesCompositeReferenceDefinitionParserRuleCall_2_1_0 = (RuleCall)cReferencesAssignment_2_1.eContents().get(0);
		
		//CompositeReferencesList:
		//	"extends" references+=CompositeReferenceDefinition ("," references+=CompositeReferenceDefinition)*;
		public ParserRule getRule() { return rule; }

		//"extends" references+=CompositeReferenceDefinition ("," references+=CompositeReferenceDefinition)*
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//references+=CompositeReferenceDefinition
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }

		//CompositeReferenceDefinition
		public RuleCall getReferencesCompositeReferenceDefinitionParserRuleCall_1_0() { return cReferencesCompositeReferenceDefinitionParserRuleCall_1_0; }

		//("," references+=CompositeReferenceDefinition)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//references+=CompositeReferenceDefinition
		public Assignment getReferencesAssignment_2_1() { return cReferencesAssignment_2_1; }

		//CompositeReferenceDefinition
		public RuleCall getReferencesCompositeReferenceDefinitionParserRuleCall_2_1_0() { return cReferencesCompositeReferenceDefinitionParserRuleCall_2_1_0; }
	}

	public class TypeReferencesListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReferencesList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferencesTypeReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReferencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReferencesTypeReferenceDefinitionParserRuleCall_2_1_0 = (RuleCall)cReferencesAssignment_2_1.eContents().get(0);
		
		//TypeReferencesList:
		//	"extends" references+=TypeReferenceDefinition ("," references+=TypeReferenceDefinition)*;
		public ParserRule getRule() { return rule; }

		//"extends" references+=TypeReferenceDefinition ("," references+=TypeReferenceDefinition)*
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//references+=TypeReferenceDefinition
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }

		//TypeReferenceDefinition
		public RuleCall getReferencesTypeReferenceDefinitionParserRuleCall_1_0() { return cReferencesTypeReferenceDefinitionParserRuleCall_1_0; }

		//("," references+=TypeReferenceDefinition)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//references+=TypeReferenceDefinition
		public Assignment getReferencesAssignment_2_1() { return cReferencesAssignment_2_1; }

		//TypeReferenceDefinition
		public RuleCall getReferencesTypeReferenceDefinitionParserRuleCall_2_1_0() { return cReferencesTypeReferenceDefinitionParserRuleCall_2_1_0; }
	}

	public class FormalArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalArgument");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FormalArgument:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CompositeDefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeDefinitionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubComponentDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBindingDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CompositeDefinitionElement:
		//	SubComponentDefinition | InterfaceDefinition | BindingDefinition;
		public ParserRule getRule() { return rule; }

		//SubComponentDefinition | InterfaceDefinition | BindingDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubComponentDefinition
		public RuleCall getSubComponentDefinitionParserRuleCall_0() { return cSubComponentDefinitionParserRuleCall_0; }

		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall_1() { return cInterfaceDefinitionParserRuleCall_1; }

		//BindingDefinition
		public RuleCall getBindingDefinitionParserRuleCall_2() { return cBindingDefinitionParserRuleCall_2; }
	}

	public class SubComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReferenceDefinitionComponentReferenceParserRuleCall_2_0 = (RuleCall)cReferenceDefinitionAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cBodyAlternatives_5_0 = (Alternatives)cBodyAssignment_5.eContents().get(0);
		private final RuleCall cBodySubComponentCompositeBodyParserRuleCall_5_0_0 = (RuleCall)cBodyAlternatives_5_0.eContents().get(0);
		private final RuleCall cBodySubComponentPrimitiveBodyParserRuleCall_5_0_1 = (RuleCall)cBodyAlternatives_5_0.eContents().get(1);
		
		//SubComponentDefinition:
		//	annotationsList=AnnotationsList? "contains" referenceDefinition=ComponentReference? "as" name=ID
		//	body=(SubComponentCompositeBody | SubComponentPrimitiveBody)?;
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "contains" referenceDefinition=ComponentReference? "as" name=ID
		//body=(SubComponentCompositeBody | SubComponentPrimitiveBody)?
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"contains"
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }

		//referenceDefinition=ComponentReference?
		public Assignment getReferenceDefinitionAssignment_2() { return cReferenceDefinitionAssignment_2; }

		//ComponentReference
		public RuleCall getReferenceDefinitionComponentReferenceParserRuleCall_2_0() { return cReferenceDefinitionComponentReferenceParserRuleCall_2_0; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//body=(SubComponentCompositeBody | SubComponentPrimitiveBody)?
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//SubComponentCompositeBody | SubComponentPrimitiveBody
		public Alternatives getBodyAlternatives_5_0() { return cBodyAlternatives_5_0; }

		//SubComponentCompositeBody
		public RuleCall getBodySubComponentCompositeBodyParserRuleCall_5_0_0() { return cBodySubComponentCompositeBodyParserRuleCall_5_0_0; }

		//SubComponentPrimitiveBody
		public RuleCall getBodySubComponentPrimitiveBodyParserRuleCall_5_0_1() { return cBodySubComponentPrimitiveBodyParserRuleCall_5_0_1; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeBodyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Body:
		//	CompositeBody | PrimitiveBody | TypeBody;
		public ParserRule getRule() { return rule; }

		//CompositeBody | PrimitiveBody | TypeBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeBody
		public RuleCall getCompositeBodyParserRuleCall_0() { return cCompositeBodyParserRuleCall_0; }

		//PrimitiveBody
		public RuleCall getPrimitiveBodyParserRuleCall_1() { return cPrimitiveBodyParserRuleCall_1; }

		//TypeBody
		public RuleCall getTypeBodyParserRuleCall_2() { return cTypeBodyParserRuleCall_2; }
	}

	public class SubComponentCompositeBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponentCompositeBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Assignment cAnonymousAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAnonymousCompositeKeyword_1_0 = (Keyword)cAnonymousAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsCompositeDefinitionElementParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SubComponentCompositeBody:
		//	annotationsList=AnnotationsList? anonymous?="composite" "{" (elements+=CompositeDefinitionElement ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? anonymous?="composite" "{" (elements+=CompositeDefinitionElement ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//anonymous?="composite"
		public Assignment getAnonymousAssignment_1() { return cAnonymousAssignment_1; }

		//"composite"
		public Keyword getAnonymousCompositeKeyword_1_0() { return cAnonymousCompositeKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(elements+=CompositeDefinitionElement ";"?)*
		public Group getGroup_3() { return cGroup_3; }

		//elements+=CompositeDefinitionElement
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//CompositeDefinitionElement
		public RuleCall getElementsCompositeDefinitionElementParserRuleCall_3_0_0() { return cElementsCompositeDefinitionElementParserRuleCall_3_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SubComponentPrimitiveBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponentPrimitiveBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Assignment cAnonymousAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAnonymousPrimitiveKeyword_1_0 = (Keyword)cAnonymousAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsPrimitiveDefinitionElementParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SubComponentPrimitiveBody:
		//	annotationsList=AnnotationsList? anonymous?="primitive" "{" (elements+=PrimitiveDefinitionElement ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? anonymous?="primitive" "{" (elements+=PrimitiveDefinitionElement ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//anonymous?="primitive"
		public Assignment getAnonymousAssignment_1() { return cAnonymousAssignment_1; }

		//"primitive"
		public Keyword getAnonymousPrimitiveKeyword_1_0() { return cAnonymousPrimitiveKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(elements+=PrimitiveDefinitionElement ";"?)*
		public Group getGroup_3() { return cGroup_3; }

		//elements+=PrimitiveDefinitionElement
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//PrimitiveDefinitionElement
		public RuleCall getElementsPrimitiveDefinitionElementParserRuleCall_3_0_0() { return cElementsPrimitiveDefinitionElementParserRuleCall_3_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CompositeBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsCompositeDefinitionElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CompositeBody:
		//	(elements+=CompositeDefinitionElement ";"?)*;
		public ParserRule getRule() { return rule; }

		//(elements+=CompositeDefinitionElement ";"?)*
		public Group getGroup() { return cGroup; }

		//elements+=CompositeDefinitionElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//CompositeDefinitionElement
		public RuleCall getElementsCompositeDefinitionElementParserRuleCall_0_0() { return cElementsCompositeDefinitionElementParserRuleCall_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class PrimitiveBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsPrimitiveDefinitionElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitiveBody:
		//	(elements+=PrimitiveDefinitionElement ";"?)*;
		public ParserRule getRule() { return rule; }

		//(elements+=PrimitiveDefinitionElement ";"?)*
		public Group getGroup() { return cGroup; }

		//elements+=PrimitiveDefinitionElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//PrimitiveDefinitionElement
		public RuleCall getElementsPrimitiveDefinitionElementParserRuleCall_0_0() { return cElementsPrimitiveDefinitionElementParserRuleCall_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class TypeBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsTypeDefinitionElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TypeBody:
		//	(elements+=TypeDefinitionElement ";"?)*;
		public ParserRule getRule() { return rule; }

		//(elements+=TypeDefinitionElement ";"?)*
		public Group getGroup() { return cGroup; }

		//elements+=TypeDefinitionElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//TypeDefinitionElement
		public RuleCall getElementsTypeDefinitionElementParserRuleCall_0_0() { return cElementsTypeDefinitionElementParserRuleCall_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeDefinitionElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveDefinitionElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDefinitionElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//	CompositeDefinitionElement | PrimitiveDefinitionElement | TypeDefinitionElement;
		public ParserRule getRule() { return rule; }

		//CompositeDefinitionElement | PrimitiveDefinitionElement | TypeDefinitionElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeDefinitionElement
		public RuleCall getCompositeDefinitionElementParserRuleCall_0() { return cCompositeDefinitionElementParserRuleCall_0; }

		//PrimitiveDefinitionElement
		public RuleCall getPrimitiveDefinitionElementParserRuleCall_1() { return cPrimitiveDefinitionElementParserRuleCall_1; }

		//TypeDefinitionElement
		public RuleCall getTypeDefinitionElementParserRuleCall_2() { return cTypeDefinitionElementParserRuleCall_2; }
	}

	public class ComponentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeReferenceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveReferenceDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeReferenceDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ComponentReference:
		//	CompositeReferenceDefinition | PrimitiveReferenceDefinition | TypeReferenceDefinition;
		public ParserRule getRule() { return rule; }

		//CompositeReferenceDefinition | PrimitiveReferenceDefinition | TypeReferenceDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeReferenceDefinition
		public RuleCall getCompositeReferenceDefinitionParserRuleCall_0() { return cCompositeReferenceDefinitionParserRuleCall_0; }

		//PrimitiveReferenceDefinition
		public RuleCall getPrimitiveReferenceDefinitionParserRuleCall_1() { return cPrimitiveReferenceDefinitionParserRuleCall_1; }

		//TypeReferenceDefinition
		public RuleCall getTypeReferenceDefinitionParserRuleCall_2() { return cTypeReferenceDefinitionParserRuleCall_2; }
	}

	public class CompositeReferenceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeReferenceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceNameFQNParserRuleCall_0_0 = (RuleCall)cReferenceNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTemplatesListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTemplatesListTemplateDefinitionParserRuleCall_1_1_0 = (RuleCall)cTemplatesListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTemplatesListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTemplatesListTemplateDefinitionParserRuleCall_1_2_1_0 = (RuleCall)cTemplatesListAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_2_1_0 = (RuleCall)cArgumentsListAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsListAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//CompositeReferenceDefinition:
		//	referenceName=FQN ("<" templatesList+=TemplateDefinition ("," templatesList+=TemplateDefinition)* ">")? ("("
		//	argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?;
		public ParserRule getRule() { return rule; }

		//referenceName=FQN ("<" templatesList+=TemplateDefinition ("," templatesList+=TemplateDefinition)* ">")? ("("
		//argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup() { return cGroup; }

		//referenceName=FQN
		public Assignment getReferenceNameAssignment_0() { return cReferenceNameAssignment_0; }

		//FQN
		public RuleCall getReferenceNameFQNParserRuleCall_0_0() { return cReferenceNameFQNParserRuleCall_0_0; }

		//("<" templatesList+=TemplateDefinition ("," templatesList+=TemplateDefinition)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//templatesList+=TemplateDefinition
		public Assignment getTemplatesListAssignment_1_1() { return cTemplatesListAssignment_1_1; }

		//TemplateDefinition
		public RuleCall getTemplatesListTemplateDefinitionParserRuleCall_1_1_0() { return cTemplatesListTemplateDefinitionParserRuleCall_1_1_0; }

		//("," templatesList+=TemplateDefinition)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//templatesList+=TemplateDefinition
		public Assignment getTemplatesListAssignment_1_2_1() { return cTemplatesListAssignment_1_2_1; }

		//TemplateDefinition
		public RuleCall getTemplatesListTemplateDefinitionParserRuleCall_1_2_1_0() { return cTemplatesListTemplateDefinitionParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_2_1() { return cArgumentsListAssignment_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_2_1_0; }

		//("," argumentsList+=ArgumentDefinition)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_2_2_1() { return cArgumentsListAssignment_2_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class PrimitiveReferenceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveReferenceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceNameFQNParserRuleCall_0_0 = (RuleCall)cReferenceNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_1_1_0 = (RuleCall)cArgumentsListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsListAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PrimitiveReferenceDefinition:
		//	referenceName=FQN ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?;
		public ParserRule getRule() { return rule; }

		//referenceName=FQN ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup() { return cGroup; }

		//referenceName=FQN
		public Assignment getReferenceNameAssignment_0() { return cReferenceNameAssignment_0; }

		//FQN
		public RuleCall getReferenceNameFQNParserRuleCall_0_0() { return cReferenceNameFQNParserRuleCall_0_0; }

		//("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_1_1() { return cArgumentsListAssignment_1_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_1_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_1_1_0; }

		//("," argumentsList+=ArgumentDefinition)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_1_2_1() { return cArgumentsListAssignment_1_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class TemplateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceCompositeReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//TemplateDefinition:
		//	(name=ID "=")? reference=CompositeReferenceDefinition;
		public ParserRule getRule() { return rule; }

		//(name=ID "=")? reference=CompositeReferenceDefinition
		public Group getGroup() { return cGroup; }

		//(name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//reference=CompositeReferenceDefinition
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//CompositeReferenceDefinition
		public RuleCall getReferenceCompositeReferenceDefinitionParserRuleCall_1_0() { return cReferenceCompositeReferenceDefinitionParserRuleCall_1_0; }
	}

	public class AttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAttributeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cAttributeNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributeNameIDTerminalRuleCall_3_0 = (RuleCall)cAttributeNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		//AttributeDefinition:
		//	annotationsList=AnnotationsList? "attribute" type=AttributeType? attributeName=ID ("=" value=Value)?;
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "attribute" type=AttributeType? attributeName=ID ("=" value=Value)?
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"attribute"
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }

		//type=AttributeType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_2_0() { return cTypeAttributeTypeParserRuleCall_2_0; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_3() { return cAttributeNameAssignment_3; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_3_0() { return cAttributeNameIDTerminalRuleCall_3_0; }

		//("=" value=Value)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//value=Value
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_1_0() { return cValueValueParserRuleCall_4_1_0; }
	}

	public class ArgumentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArgumentNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgumentNameIDTerminalRuleCall_0_0_0 = (RuleCall)cArgumentNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArgumentValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgumentValueValueParserRuleCall_0_2_0 = (RuleCall)cArgumentValueAssignment_0_2.eContents().get(0);
		private final Assignment cArgumentValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArgumentValueValueParserRuleCall_1_0 = (RuleCall)cArgumentValueAssignment_1.eContents().get(0);
		
		//ArgumentDefinition:
		//	argumentName=ID "=" argumentValue=Value | argumentValue=Value;
		public ParserRule getRule() { return rule; }

		//argumentName=ID "=" argumentValue=Value | argumentValue=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//argumentName=ID "=" argumentValue=Value
		public Group getGroup_0() { return cGroup_0; }

		//argumentName=ID
		public Assignment getArgumentNameAssignment_0_0() { return cArgumentNameAssignment_0_0; }

		//ID
		public RuleCall getArgumentNameIDTerminalRuleCall_0_0_0() { return cArgumentNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//argumentValue=Value
		public Assignment getArgumentValueAssignment_0_2() { return cArgumentValueAssignment_0_2; }

		//Value
		public RuleCall getArgumentValueValueParserRuleCall_0_2_0() { return cArgumentValueValueParserRuleCall_0_2_0; }

		//argumentValue=Value
		public Assignment getArgumentValueAssignment_1() { return cArgumentValueAssignment_1; }

		//Value
		public RuleCall getArgumentValueValueParserRuleCall_1_0() { return cArgumentValueValueParserRuleCall_1_0; }
	}

	public class InterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRoleRoleEnumRuleCall_1_0 = (RuleCall)cRoleAssignment_1.eContents().get(0);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureFQNParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Assignment cCollectionAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_6_0_0_0 = (Keyword)cCollectionAssignment_6_0_0.eContents().get(0);
		private final Assignment cCollectionsizeAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cCollectionsizeINTTerminalRuleCall_6_0_1_0 = (RuleCall)cCollectionsizeAssignment_6_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Assignment cCollectionAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final Keyword cCollectionLeftSquareBracketRightSquareBracketKeyword_6_1_0 = (Keyword)cCollectionAssignment_6_1.eContents().get(0);
		
		//InterfaceDefinition:
		//	annotationsList=AnnotationsList? role=Role optional?="optional"? signature=FQN? "as" name=ID (collection?="["
		//	collectionsize=INT? "]" | collection?="[]")?;
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? role=Role optional?="optional"? signature=FQN? "as" name=ID (collection?="["
		//collectionsize=INT? "]" | collection?="[]")?
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//role=Role
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }

		//Role
		public RuleCall getRoleRoleEnumRuleCall_1_0() { return cRoleRoleEnumRuleCall_1_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_2_0() { return cOptionalOptionalKeyword_2_0; }

		//signature=FQN?
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }

		//FQN
		public RuleCall getSignatureFQNParserRuleCall_3_0() { return cSignatureFQNParserRuleCall_3_0; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//(collection?="[" collectionsize=INT? "]" | collection?="[]")?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//collection?="[" collectionsize=INT? "]"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//collection?="["
		public Assignment getCollectionAssignment_6_0_0() { return cCollectionAssignment_6_0_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_6_0_0_0() { return cCollectionLeftSquareBracketKeyword_6_0_0_0; }

		//collectionsize=INT?
		public Assignment getCollectionsizeAssignment_6_0_1() { return cCollectionsizeAssignment_6_0_1; }

		//INT
		public RuleCall getCollectionsizeINTTerminalRuleCall_6_0_1_0() { return cCollectionsizeINTTerminalRuleCall_6_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_0_2() { return cRightSquareBracketKeyword_6_0_2; }

		//collection?="[]"
		public Assignment getCollectionAssignment_6_1() { return cCollectionAssignment_6_1; }

		//"[]"
		public Keyword getCollectionLeftSquareBracketRightSquareBracketKeyword_6_1_0() { return cCollectionLeftSquareBracketRightSquareBracketKeyword_6_1_0; }
	}

	public class BindingDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindingDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBindsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cThisKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Assignment cInterfaceSourceParentLabelAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cInterfaceSourceParentLabelIDTerminalRuleCall_1_1_1_0 = (RuleCall)cInterfaceSourceParentLabelAssignment_1_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInterfaceSourceLabelAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInterfaceSourceLabelIDTerminalRuleCall_1_3_0 = (RuleCall)cInterfaceSourceLabelAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cInterfaceSourceIndexAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cInterfaceSourceIndexINTTerminalRuleCall_1_4_1_0 = (RuleCall)cInterfaceSourceIndexAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		private final Keyword cToKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Alternatives cAlternatives_1_6 = (Alternatives)cGroup_1.eContents().get(6);
		private final Keyword cThisKeyword_1_6_0 = (Keyword)cAlternatives_1_6.eContents().get(0);
		private final Assignment cInterfaceTargetParentLabelAssignment_1_6_1 = (Assignment)cAlternatives_1_6.eContents().get(1);
		private final RuleCall cInterfaceTargetParentLabelIDTerminalRuleCall_1_6_1_0 = (RuleCall)cInterfaceTargetParentLabelAssignment_1_6_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cInterfaceTargetLabelAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cInterfaceTargetLabelIDTerminalRuleCall_1_8_0 = (RuleCall)cInterfaceTargetLabelAssignment_1_8.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cGroup_1.eContents().get(9);
		private final Keyword cLeftSquareBracketKeyword_1_9_0 = (Keyword)cGroup_1_9.eContents().get(0);
		private final Assignment cInterfaceTargetIndexAssignment_1_9_1 = (Assignment)cGroup_1_9.eContents().get(1);
		private final RuleCall cInterfaceTargetIndexINTTerminalRuleCall_1_9_1_0 = (RuleCall)cInterfaceTargetIndexAssignment_1_9_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_9_2 = (Keyword)cGroup_1_9.eContents().get(2);
		
		//BindingDefinition:
		//	annotationsList=AnnotationsList? ("binds" ("this" | interfaceSourceParentLabel=ID) "." interfaceSourceLabel=ID ("["
		//	interfaceSourceIndex=INT "]")? "to" ("this" | interfaceTargetParentLabel=ID) "." interfaceTargetLabel=ID ("["
		//	interfaceTargetIndex=INT "]")?);
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? ("binds" ("this" | interfaceSourceParentLabel=ID) "." interfaceSourceLabel=ID ("["
		//interfaceSourceIndex=INT "]")? "to" ("this" | interfaceTargetParentLabel=ID) "." interfaceTargetLabel=ID ("["
		//interfaceTargetIndex=INT "]")?)
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"binds" ("this" | interfaceSourceParentLabel=ID) "." interfaceSourceLabel=ID ("[" interfaceSourceIndex=INT "]")? "to"
		//("this" | interfaceTargetParentLabel=ID) "." interfaceTargetLabel=ID ("[" interfaceTargetIndex=INT "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"binds"
		public Keyword getBindsKeyword_1_0() { return cBindsKeyword_1_0; }

		//"this" | interfaceSourceParentLabel=ID
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"this"
		public Keyword getThisKeyword_1_1_0() { return cThisKeyword_1_1_0; }

		//interfaceSourceParentLabel=ID
		public Assignment getInterfaceSourceParentLabelAssignment_1_1_1() { return cInterfaceSourceParentLabelAssignment_1_1_1; }

		//ID
		public RuleCall getInterfaceSourceParentLabelIDTerminalRuleCall_1_1_1_0() { return cInterfaceSourceParentLabelIDTerminalRuleCall_1_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }

		//interfaceSourceLabel=ID
		public Assignment getInterfaceSourceLabelAssignment_1_3() { return cInterfaceSourceLabelAssignment_1_3; }

		//ID
		public RuleCall getInterfaceSourceLabelIDTerminalRuleCall_1_3_0() { return cInterfaceSourceLabelIDTerminalRuleCall_1_3_0; }

		//("[" interfaceSourceIndex=INT "]")?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_4_0() { return cLeftSquareBracketKeyword_1_4_0; }

		//interfaceSourceIndex=INT
		public Assignment getInterfaceSourceIndexAssignment_1_4_1() { return cInterfaceSourceIndexAssignment_1_4_1; }

		//INT
		public RuleCall getInterfaceSourceIndexINTTerminalRuleCall_1_4_1_0() { return cInterfaceSourceIndexINTTerminalRuleCall_1_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4_2() { return cRightSquareBracketKeyword_1_4_2; }

		//"to"
		public Keyword getToKeyword_1_5() { return cToKeyword_1_5; }

		//"this" | interfaceTargetParentLabel=ID
		public Alternatives getAlternatives_1_6() { return cAlternatives_1_6; }

		//"this"
		public Keyword getThisKeyword_1_6_0() { return cThisKeyword_1_6_0; }

		//interfaceTargetParentLabel=ID
		public Assignment getInterfaceTargetParentLabelAssignment_1_6_1() { return cInterfaceTargetParentLabelAssignment_1_6_1; }

		//ID
		public RuleCall getInterfaceTargetParentLabelIDTerminalRuleCall_1_6_1_0() { return cInterfaceTargetParentLabelIDTerminalRuleCall_1_6_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_7() { return cFullStopKeyword_1_7; }

		//interfaceTargetLabel=ID
		public Assignment getInterfaceTargetLabelAssignment_1_8() { return cInterfaceTargetLabelAssignment_1_8; }

		//ID
		public RuleCall getInterfaceTargetLabelIDTerminalRuleCall_1_8_0() { return cInterfaceTargetLabelIDTerminalRuleCall_1_8_0; }

		//("[" interfaceTargetIndex=INT "]")?
		public Group getGroup_1_9() { return cGroup_1_9; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_9_0() { return cLeftSquareBracketKeyword_1_9_0; }

		//interfaceTargetIndex=INT
		public Assignment getInterfaceTargetIndexAssignment_1_9_1() { return cInterfaceTargetIndexAssignment_1_9_1; }

		//INT
		public RuleCall getInterfaceTargetIndexINTTerminalRuleCall_1_9_1_0() { return cInterfaceTargetIndexINTTerminalRuleCall_1_9_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_9_2() { return cRightSquareBracketKeyword_1_9_2; }
	}

	public class DataDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFileCAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFileCFileCParserRuleCall_2_0_0 = (RuleCall)cFileCAssignment_2_0.eContents().get(0);
		private final Assignment cInlineCcodeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInlineCcodeInlineCodeCParserRuleCall_2_1_0 = (RuleCall)cInlineCcodeAssignment_2_1.eContents().get(0);
		
		//DataDefinition:
		//	annotationsList=AnnotationsList? "data" (fileC=FileC | inlineCcode=InlineCodeC);
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "data" (fileC=FileC | inlineCcode=InlineCodeC)
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"data"
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }

		//fileC=FileC | inlineCcode=InlineCodeC
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//fileC=FileC
		public Assignment getFileCAssignment_2_0() { return cFileCAssignment_2_0; }

		//FileC
		public RuleCall getFileCFileCParserRuleCall_2_0_0() { return cFileCFileCParserRuleCall_2_0_0; }

		//inlineCcode=InlineCodeC
		public Assignment getInlineCcodeAssignment_2_1() { return cInlineCcodeAssignment_2_1; }

		//InlineCodeC
		public RuleCall getInlineCcodeInlineCodeCParserRuleCall_2_1_0() { return cInlineCcodeInlineCodeCParserRuleCall_2_1_0; }
	}

	public class ImplementationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsListAnnotationsListParserRuleCall_0_0 = (RuleCall)cAnnotationsListAssignment_0.eContents().get(0);
		private final Keyword cSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFileCAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFileCFileCParserRuleCall_2_0_0 = (RuleCall)cFileCAssignment_2_0.eContents().get(0);
		private final Assignment cInlineCcodeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInlineCcodeInlineCodeCParserRuleCall_2_1_0 = (RuleCall)cInlineCcodeAssignment_2_1.eContents().get(0);
		
		//ImplementationDefinition:
		//	annotationsList=AnnotationsList? "source" (fileC=FileC | inlineCcode=InlineCodeC);
		public ParserRule getRule() { return rule; }

		//annotationsList=AnnotationsList? "source" (fileC=FileC | inlineCcode=InlineCodeC)
		public Group getGroup() { return cGroup; }

		//annotationsList=AnnotationsList?
		public Assignment getAnnotationsListAssignment_0() { return cAnnotationsListAssignment_0; }

		//AnnotationsList
		public RuleCall getAnnotationsListAnnotationsListParserRuleCall_0_0() { return cAnnotationsListAnnotationsListParserRuleCall_0_0; }

		//"source"
		public Keyword getSourceKeyword_1() { return cSourceKeyword_1; }

		//fileC=FileC | inlineCcode=InlineCodeC
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//fileC=FileC
		public Assignment getFileCAssignment_2_0() { return cFileCAssignment_2_0; }

		//FileC
		public RuleCall getFileCFileCParserRuleCall_2_0_0() { return cFileCFileCParserRuleCall_2_0_0; }

		//inlineCcode=InlineCodeC
		public Assignment getInlineCcodeAssignment_2_1() { return cInlineCcodeAssignment_2_1; }

		//InlineCodeC
		public RuleCall getInlineCcodeInlineCodeCParserRuleCall_2_1_0() { return cInlineCcodeInlineCodeCParserRuleCall_2_1_0; }
	}

	public class TemplateSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cConformstoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReferenceTypeReferenceDefinitionParserRuleCall_2_0 = (RuleCall)cReferenceAssignment_2.eContents().get(0);
		
		//TemplateSpecifier:
		//	name=ID "conformsto" reference=TypeReferenceDefinition;
		public ParserRule getRule() { return rule; }

		//name=ID "conformsto" reference=TypeReferenceDefinition
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"conformsto"
		public Keyword getConformstoKeyword_1() { return cConformstoKeyword_1; }

		//reference=TypeReferenceDefinition
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }

		//TypeReferenceDefinition
		public RuleCall getReferenceTypeReferenceDefinitionParserRuleCall_2_0() { return cReferenceTypeReferenceDefinitionParserRuleCall_2_0; }
	}

	public class FileCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectoryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectoryPathParserRuleCall_0_0 = (RuleCall)cDirectoryAssignment_0.eContents().get(0);
		private final Assignment cFileNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileNameFileNameParserRuleCall_1_0 = (RuleCall)cFileNameAssignment_1.eContents().get(0);
		
		//FileC:
		//	directory=Path? fileName=FileName;
		public ParserRule getRule() { return rule; }

		//directory=Path? fileName=FileName
		public Group getGroup() { return cGroup; }

		//directory=Path?
		public Assignment getDirectoryAssignment_0() { return cDirectoryAssignment_0; }

		//Path
		public RuleCall getDirectoryPathParserRuleCall_0_0() { return cDirectoryPathParserRuleCall_0_0; }

		//fileName=FileName
		public Assignment getFileNameAssignment_1() { return cFileNameAssignment_1; }

		//FileName
		public RuleCall getFileNameFileNameParserRuleCall_1_0() { return cFileNameFileNameParserRuleCall_1_0; }
	}

	public class FileNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FileName:
		//	ID ("." ID)?;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class InlineCodeCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineCodeC");
		private final Assignment cCodeCAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCodeCCodeCTerminalRuleCall_0 = (RuleCall)cCodeCAssignment.eContents().get(0);
		
		//InlineCodeC:
		//	codeC=CodeC;
		public ParserRule getRule() { return rule; }

		//codeC=CodeC
		public Assignment getCodeCAssignment() { return cCodeCAssignment; }

		//CodeC
		public RuleCall getCodeCCodeCTerminalRuleCall_0() { return cCodeCCodeCTerminalRuleCall_0; }
	}

	public class AnnotationsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		
		//AnnotationsList:
		//	annotations+=Annotation annotations+=Annotation*;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation annotations+=Annotation*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnnotationTypeParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationElementsAnnotationElementParserRuleCall_2_1_0 = (RuleCall)cAnnotationElementsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAnnotationElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0 = (RuleCall)cAnnotationElementsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Annotation:
		//	"@" name=AnnotationType ("(" annotationElements+=AnnotationElement ("," annotationElements+=AnnotationElement)* ")")?;
		public ParserRule getRule() { return rule; }

		//"@" name=AnnotationType ("(" annotationElements+=AnnotationElement ("," annotationElements+=AnnotationElement)* ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=AnnotationType
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AnnotationType
		public RuleCall getNameAnnotationTypeParserRuleCall_1_0() { return cNameAnnotationTypeParserRuleCall_1_0; }

		//("(" annotationElements+=AnnotationElement ("," annotationElements+=AnnotationElement)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//annotationElements+=AnnotationElement
		public Assignment getAnnotationElementsAssignment_2_1() { return cAnnotationElementsAssignment_2_1; }

		//AnnotationElement
		public RuleCall getAnnotationElementsAnnotationElementParserRuleCall_2_1_0() { return cAnnotationElementsAnnotationElementParserRuleCall_2_1_0; }

		//("," annotationElements+=AnnotationElement)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//annotationElements+=AnnotationElement
		public Assignment getAnnotationElementsAssignment_2_2_1() { return cAnnotationElementsAssignment_2_2_1; }

		//AnnotationElement
		public RuleCall getAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0() { return cAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class AnnotationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementValueElementValueParserRuleCall_0_0 = (RuleCall)cElementValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cElementNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementNameIDTerminalRuleCall_1_0_0 = (RuleCall)cElementNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementValueElementValueParserRuleCall_1_2_0 = (RuleCall)cElementValueAssignment_1_2.eContents().get(0);
		
		//AnnotationElement:
		//	elementValue=ElementValue | elementName=ID "=" elementValue=ElementValue;
		public ParserRule getRule() { return rule; }

		//elementValue=ElementValue | elementName=ID "=" elementValue=ElementValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//elementValue=ElementValue
		public Assignment getElementValueAssignment_0() { return cElementValueAssignment_0; }

		//ElementValue
		public RuleCall getElementValueElementValueParserRuleCall_0_0() { return cElementValueElementValueParserRuleCall_0_0; }

		//elementName=ID "=" elementValue=ElementValue
		public Group getGroup_1() { return cGroup_1; }

		//elementName=ID
		public Assignment getElementNameAssignment_1_0() { return cElementNameAssignment_1_0; }

		//ID
		public RuleCall getElementNameIDTerminalRuleCall_1_0_0() { return cElementNameIDTerminalRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//elementValue=ElementValue
		public Assignment getElementValueAssignment_1_2() { return cElementValueAssignment_1_2; }

		//ElementValue
		public RuleCall getElementValueElementValueParserRuleCall_1_2_0() { return cElementValueElementValueParserRuleCall_1_2_0; }
	}

	public class ElementValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElementValueArrayInitializerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementValue:
		//	ConstantValue | Annotation | ElementValueArrayInitializer;
		public ParserRule getRule() { return rule; }

		//ConstantValue | Annotation | ElementValueArrayInitializer
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstantValue
		public RuleCall getConstantValueParserRuleCall_0() { return cConstantValueParserRuleCall_0; }

		//Annotation
		public RuleCall getAnnotationParserRuleCall_1() { return cAnnotationParserRuleCall_1; }

		//ElementValueArrayInitializer
		public RuleCall getElementValueArrayInitializerParserRuleCall_2() { return cElementValueArrayInitializerParserRuleCall_2; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueConstantFormatParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ConstantValue:
		//	value=ConstantFormat;
		public ParserRule getRule() { return rule; }

		//value=ConstantFormat
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ConstantFormat
		public RuleCall getValueConstantFormatParserRuleCall_0() { return cValueConstantFormatParserRuleCall_0; }
	}

	public class ConstantFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstantFormat:
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class ElementValueArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValueArrayInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesElementValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesElementValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElementValueArrayInitializer:
		//	"{" values+=ElementValue ("," values+=ElementValue)* "}";
		public ParserRule getRule() { return rule; }

		//"{" values+=ElementValue ("," values+=ElementValue)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//values+=ElementValue
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//ElementValue
		public RuleCall getValuesElementValueParserRuleCall_1_0() { return cValuesElementValueParserRuleCall_1_0; }

		//("," values+=ElementValue)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=ElementValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//ElementValue
		public RuleCall getValuesElementValueParserRuleCall_2_1_0() { return cValuesElementValueParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignedINTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHexadecimalTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cNullKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Value:
		//	ID | signedINT | HexadecimalType | STRING | "null";
		public ParserRule getRule() { return rule; }

		//ID | signedINT | HexadecimalType | STRING | "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//signedINT
		public RuleCall getSignedINTParserRuleCall_1() { return cSignedINTParserRuleCall_1; }

		//HexadecimalType
		public RuleCall getHexadecimalTypeParserRuleCall_2() { return cHexadecimalTypeParserRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//"null"
		public Keyword getNullKeyword_4() { return cNullKeyword_4; }
	}

	public class HexadecimalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexadecimalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//HexadecimalType:
		//	"0x" INT;
		public ParserRule getRule() { return rule; }

		//"0x" INT
		public Group getGroup() { return cGroup; }

		//"0x"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class AnnotationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOverrideKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSingletonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLDFlagsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCFlagsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final RuleCall cFQNParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AnnotationType:
		//	"Override" | "Singleton" | "LDFlags" | "CFlags" | FQN;
		public ParserRule getRule() { return rule; }

		//"Override" | "Singleton" | "LDFlags" | "CFlags" | FQN
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Override"
		public Keyword getOverrideKeyword_0() { return cOverrideKeyword_0; }

		//"Singleton"
		public Keyword getSingletonKeyword_1() { return cSingletonKeyword_1; }

		//"LDFlags"
		public Keyword getLDFlagsKeyword_2() { return cLDFlagsKeyword_2; }

		//"CFlags"
		public Keyword getCFlagsKeyword_3() { return cCFlagsKeyword_3; }

		//FQN
		public RuleCall getFQNParserRuleCall_4() { return cFQNParserRuleCall_4; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSTRUCTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUNIONKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cENUMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AttributeType:
		//	"STRUCT" | "UNION" | "ENUM" | ID;
		public ParserRule getRule() { return rule; }

		//"STRUCT" | "UNION" | "ENUM" | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"STRUCT"
		public Keyword getSTRUCTKeyword_0() { return cSTRUCTKeyword_0; }

		//"UNION"
		public Keyword getUNIONKeyword_1() { return cUNIONKeyword_1; }

		//"ENUM"
		public Keyword getENUMKeyword_2() { return cENUMKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FULL_IMPORT_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FULL_IMPORT_NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FULL_IMPORT_NAME:
		//	FQN ".*";
		public ParserRule getRule() { return rule; }

		//FQN ".*"
		public Group getGroup() { return cGroup; }

		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }

		//".*"
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSLTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cSLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		/// * SSZ: grammar taken from the Mindc compiler adl-parser.jj file
		//void Path() : {}
		//{
		//  [ <SLASH> ] [ <DOT> <SLASH> ] ( <DOTDOT> <SLASH> )* 
		//  <IDENTIFIER> ( <SLASH> <IDENTIFIER> )* <DOT> <IDENTIFIER>
		//}
		// * / Path:
		//	(ID ":"? | "." | "..")? (SL ((ID "-"?)* | ".."))* SL;
		public ParserRule getRule() { return rule; }

		//(ID ":"? | "." | "..")? (SL ((ID "-"?)* | ".."))* SL
		public Group getGroup() { return cGroup; }

		//(ID ":"? | "." | "..")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ID ":"?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0_0() { return cIDTerminalRuleCall_0_0_0; }

		//":"?
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_0_2() { return cFullStopFullStopKeyword_0_2; }

		//(SL ((ID "-"?)* | ".."))*
		public Group getGroup_1() { return cGroup_1; }

		//SL
		public RuleCall getSLTerminalRuleCall_1_0() { return cSLTerminalRuleCall_1_0; }

		//(ID "-"?)* | ".."
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//(ID "-"?)*
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0_0() { return cIDTerminalRuleCall_1_1_0_0; }

		//"-"?
		public Keyword getHyphenMinusKeyword_1_1_0_1() { return cHyphenMinusKeyword_1_1_0_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_1_1() { return cFullStopFullStopKeyword_1_1_1; }

		//SL
		public RuleCall getSLTerminalRuleCall_2() { return cSLTerminalRuleCall_2; }
	}

	public class SignedINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signedINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//signedINT:
		//	("+" | "-")? INT;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class RoleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cProvidesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cProvidesProvidesKeyword_0_0 = (Keyword)cProvidesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRequiresEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRequiresRequiresKeyword_1_0 = (Keyword)cRequiresEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Role:
		//	provides | requires;
		public EnumRule getRule() { return rule; }

		//provides | requires
		public Alternatives getAlternatives() { return cAlternatives; }

		//provides
		public EnumLiteralDeclaration getProvidesEnumLiteralDeclaration_0() { return cProvidesEnumLiteralDeclaration_0; }

		//"provides"
		public Keyword getProvidesProvidesKeyword_0_0() { return cProvidesProvidesKeyword_0_0; }

		//requires
		public EnumLiteralDeclaration getRequiresEnumLiteralDeclaration_1() { return cRequiresEnumLiteralDeclaration_1; }

		//"requires"
		public Keyword getRequiresRequiresKeyword_1_0() { return cRequiresRequiresKeyword_1_0; }
	}
	
	private AdlDefinitionElements pAdlDefinition;
	private ImportDefinitionElements pImportDefinition;
	private ArchitectureDefinitionElements pArchitectureDefinition;
	private PrimitiveComponentDefinitionElements pPrimitiveComponentDefinition;
	private PrimitiveDefinitionElementElements pPrimitiveDefinitionElement;
	private ComponentTypeDefinitionElements pComponentTypeDefinition;
	private TypeReferenceDefinitionElements pTypeReferenceDefinition;
	private TypeDefinitionElementElements pTypeDefinitionElement;
	private CompositeComponentDefinitionElements pCompositeComponentDefinition;
	private TemplateSpecifiersListElements pTemplateSpecifiersList;
	private FormalArgumentsListElements pFormalArgumentsList;
	private PrimitiveReferencesListElements pPrimitiveReferencesList;
	private CompositeReferencesListElements pCompositeReferencesList;
	private TypeReferencesListElements pTypeReferencesList;
	private FormalArgumentElements pFormalArgument;
	private CompositeDefinitionElementElements pCompositeDefinitionElement;
	private SubComponentDefinitionElements pSubComponentDefinition;
	private BodyElements pBody;
	private SubComponentCompositeBodyElements pSubComponentCompositeBody;
	private SubComponentPrimitiveBodyElements pSubComponentPrimitiveBody;
	private CompositeBodyElements pCompositeBody;
	private PrimitiveBodyElements pPrimitiveBody;
	private TypeBodyElements pTypeBody;
	private ElementElements pElement;
	private ComponentReferenceElements pComponentReference;
	private CompositeReferenceDefinitionElements pCompositeReferenceDefinition;
	private PrimitiveReferenceDefinitionElements pPrimitiveReferenceDefinition;
	private TemplateDefinitionElements pTemplateDefinition;
	private AttributeDefinitionElements pAttributeDefinition;
	private ArgumentDefinitionElements pArgumentDefinition;
	private InterfaceDefinitionElements pInterfaceDefinition;
	private BindingDefinitionElements pBindingDefinition;
	private DataDefinitionElements pDataDefinition;
	private ImplementationDefinitionElements pImplementationDefinition;
	private TemplateSpecifierElements pTemplateSpecifier;
	private FileCElements pFileC;
	private FileNameElements pFileName;
	private InlineCodeCElements pInlineCodeC;
	private AnnotationsListElements pAnnotationsList;
	private AnnotationElements pAnnotation;
	private AnnotationElementElements pAnnotationElement;
	private ElementValueElements pElementValue;
	private ConstantValueElements pConstantValue;
	private ConstantFormatElements pConstantFormat;
	private ElementValueArrayInitializerElements pElementValueArrayInitializer;
	private ValueElements pValue;
	private HexadecimalTypeElements pHexadecimalType;
	private AnnotationTypeElements pAnnotationType;
	private AttributeTypeElements pAttributeType;
	private FQNElements pFQN;
	private RoleElements unknownRuleRole;
	private FULL_IMPORT_NAMEElements pFULL_IMPORT_NAME;
	private TerminalRule tCodeC;
	private TerminalRule tSL;
	private PathElements pPath;
	private SignedINTElements pSignedINT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FractalGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AdlDefinition:
	//	imports+=ImportDefinition* architecturedefinition=ArchitectureDefinition;
	public AdlDefinitionElements getAdlDefinitionAccess() {
		return (pAdlDefinition != null) ? pAdlDefinition : (pAdlDefinition = new AdlDefinitionElements());
	}
	
	public ParserRule getAdlDefinitionRule() {
		return getAdlDefinitionAccess().getRule();
	}

	//ImportDefinition:
	//	"import" importName=(FQN | FULL_IMPORT_NAME) ";";
	public ImportDefinitionElements getImportDefinitionAccess() {
		return (pImportDefinition != null) ? pImportDefinition : (pImportDefinition = new ImportDefinitionElements());
	}
	
	public ParserRule getImportDefinitionRule() {
		return getImportDefinitionAccess().getRule();
	}

	//ArchitectureDefinition:
	//	ComponentTypeDefinition | PrimitiveComponentDefinition | CompositeComponentDefinition;
	public ArchitectureDefinitionElements getArchitectureDefinitionAccess() {
		return (pArchitectureDefinition != null) ? pArchitectureDefinition : (pArchitectureDefinition = new ArchitectureDefinitionElements());
	}
	
	public ParserRule getArchitectureDefinitionRule() {
		return getArchitectureDefinitionAccess().getRule();
	}

	//PrimitiveComponentDefinition:
	//	annotationsList=AnnotationsList? abstract?="abstract"? "primitive" name=FQN
	//	primitiveFormalArgumentsList=FormalArgumentsList? referencesList=PrimitiveReferencesList? ("{" body=PrimitiveBody? "}"
	//	| body=PrimitiveBody)?;
	public PrimitiveComponentDefinitionElements getPrimitiveComponentDefinitionAccess() {
		return (pPrimitiveComponentDefinition != null) ? pPrimitiveComponentDefinition : (pPrimitiveComponentDefinition = new PrimitiveComponentDefinitionElements());
	}
	
	public ParserRule getPrimitiveComponentDefinitionRule() {
		return getPrimitiveComponentDefinitionAccess().getRule();
	}

	//PrimitiveDefinitionElement:
	//	InterfaceDefinition | AttributeDefinition | DataDefinition | ImplementationDefinition;
	public PrimitiveDefinitionElementElements getPrimitiveDefinitionElementAccess() {
		return (pPrimitiveDefinitionElement != null) ? pPrimitiveDefinitionElement : (pPrimitiveDefinitionElement = new PrimitiveDefinitionElementElements());
	}
	
	public ParserRule getPrimitiveDefinitionElementRule() {
		return getPrimitiveDefinitionElementAccess().getRule();
	}

	//ComponentTypeDefinition:
	//	annotationsList=AnnotationsList? "type" name=FQN referencesList=TypeReferencesList? ("{" body=TypeBody? "}" |
	//	body=TypeBody)?;
	public ComponentTypeDefinitionElements getComponentTypeDefinitionAccess() {
		return (pComponentTypeDefinition != null) ? pComponentTypeDefinition : (pComponentTypeDefinition = new ComponentTypeDefinitionElements());
	}
	
	public ParserRule getComponentTypeDefinitionRule() {
		return getComponentTypeDefinitionAccess().getRule();
	}

	//TypeReferenceDefinition:
	//	referenceName=FQN;
	public TypeReferenceDefinitionElements getTypeReferenceDefinitionAccess() {
		return (pTypeReferenceDefinition != null) ? pTypeReferenceDefinition : (pTypeReferenceDefinition = new TypeReferenceDefinitionElements());
	}
	
	public ParserRule getTypeReferenceDefinitionRule() {
		return getTypeReferenceDefinitionAccess().getRule();
	}

	//TypeDefinitionElement:
	//	InterfaceDefinition;
	public TypeDefinitionElementElements getTypeDefinitionElementAccess() {
		return (pTypeDefinitionElement != null) ? pTypeDefinitionElement : (pTypeDefinitionElement = new TypeDefinitionElementElements());
	}
	
	public ParserRule getTypeDefinitionElementRule() {
		return getTypeDefinitionElementAccess().getRule();
	}

	//CompositeComponentDefinition:
	//	annotationsList=AnnotationsList? "composite" name=FQN templateSpecifiersList=TemplateSpecifiersList?
	//	compositeFormalArgumentsList=FormalArgumentsList? referencesList=CompositeReferencesList? ("{" body=CompositeBody "}"
	//	| body=CompositeBody)?;
	public CompositeComponentDefinitionElements getCompositeComponentDefinitionAccess() {
		return (pCompositeComponentDefinition != null) ? pCompositeComponentDefinition : (pCompositeComponentDefinition = new CompositeComponentDefinitionElements());
	}
	
	public ParserRule getCompositeComponentDefinitionRule() {
		return getCompositeComponentDefinitionAccess().getRule();
	}

	//TemplateSpecifiersList:
	//	"<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">";
	public TemplateSpecifiersListElements getTemplateSpecifiersListAccess() {
		return (pTemplateSpecifiersList != null) ? pTemplateSpecifiersList : (pTemplateSpecifiersList = new TemplateSpecifiersListElements());
	}
	
	public ParserRule getTemplateSpecifiersListRule() {
		return getTemplateSpecifiersListAccess().getRule();
	}

	//FormalArgumentsList:
	//	"(" (formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*) ")";
	public FormalArgumentsListElements getFormalArgumentsListAccess() {
		return (pFormalArgumentsList != null) ? pFormalArgumentsList : (pFormalArgumentsList = new FormalArgumentsListElements());
	}
	
	public ParserRule getFormalArgumentsListRule() {
		return getFormalArgumentsListAccess().getRule();
	}

	//PrimitiveReferencesList:
	//	"extends" references+=PrimitiveReferenceDefinition ("," references+=PrimitiveReferenceDefinition)*;
	public PrimitiveReferencesListElements getPrimitiveReferencesListAccess() {
		return (pPrimitiveReferencesList != null) ? pPrimitiveReferencesList : (pPrimitiveReferencesList = new PrimitiveReferencesListElements());
	}
	
	public ParserRule getPrimitiveReferencesListRule() {
		return getPrimitiveReferencesListAccess().getRule();
	}

	//CompositeReferencesList:
	//	"extends" references+=CompositeReferenceDefinition ("," references+=CompositeReferenceDefinition)*;
	public CompositeReferencesListElements getCompositeReferencesListAccess() {
		return (pCompositeReferencesList != null) ? pCompositeReferencesList : (pCompositeReferencesList = new CompositeReferencesListElements());
	}
	
	public ParserRule getCompositeReferencesListRule() {
		return getCompositeReferencesListAccess().getRule();
	}

	//TypeReferencesList:
	//	"extends" references+=TypeReferenceDefinition ("," references+=TypeReferenceDefinition)*;
	public TypeReferencesListElements getTypeReferencesListAccess() {
		return (pTypeReferencesList != null) ? pTypeReferencesList : (pTypeReferencesList = new TypeReferencesListElements());
	}
	
	public ParserRule getTypeReferencesListRule() {
		return getTypeReferencesListAccess().getRule();
	}

	//FormalArgument:
	//	name=ID;
	public FormalArgumentElements getFormalArgumentAccess() {
		return (pFormalArgument != null) ? pFormalArgument : (pFormalArgument = new FormalArgumentElements());
	}
	
	public ParserRule getFormalArgumentRule() {
		return getFormalArgumentAccess().getRule();
	}

	//CompositeDefinitionElement:
	//	SubComponentDefinition | InterfaceDefinition | BindingDefinition;
	public CompositeDefinitionElementElements getCompositeDefinitionElementAccess() {
		return (pCompositeDefinitionElement != null) ? pCompositeDefinitionElement : (pCompositeDefinitionElement = new CompositeDefinitionElementElements());
	}
	
	public ParserRule getCompositeDefinitionElementRule() {
		return getCompositeDefinitionElementAccess().getRule();
	}

	//SubComponentDefinition:
	//	annotationsList=AnnotationsList? "contains" referenceDefinition=ComponentReference? "as" name=ID
	//	body=(SubComponentCompositeBody | SubComponentPrimitiveBody)?;
	public SubComponentDefinitionElements getSubComponentDefinitionAccess() {
		return (pSubComponentDefinition != null) ? pSubComponentDefinition : (pSubComponentDefinition = new SubComponentDefinitionElements());
	}
	
	public ParserRule getSubComponentDefinitionRule() {
		return getSubComponentDefinitionAccess().getRule();
	}

	//Body:
	//	CompositeBody | PrimitiveBody | TypeBody;
	public BodyElements getBodyAccess() {
		return (pBody != null) ? pBody : (pBody = new BodyElements());
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//SubComponentCompositeBody:
	//	annotationsList=AnnotationsList? anonymous?="composite" "{" (elements+=CompositeDefinitionElement ";"?)* "}";
	public SubComponentCompositeBodyElements getSubComponentCompositeBodyAccess() {
		return (pSubComponentCompositeBody != null) ? pSubComponentCompositeBody : (pSubComponentCompositeBody = new SubComponentCompositeBodyElements());
	}
	
	public ParserRule getSubComponentCompositeBodyRule() {
		return getSubComponentCompositeBodyAccess().getRule();
	}

	//SubComponentPrimitiveBody:
	//	annotationsList=AnnotationsList? anonymous?="primitive" "{" (elements+=PrimitiveDefinitionElement ";"?)* "}";
	public SubComponentPrimitiveBodyElements getSubComponentPrimitiveBodyAccess() {
		return (pSubComponentPrimitiveBody != null) ? pSubComponentPrimitiveBody : (pSubComponentPrimitiveBody = new SubComponentPrimitiveBodyElements());
	}
	
	public ParserRule getSubComponentPrimitiveBodyRule() {
		return getSubComponentPrimitiveBodyAccess().getRule();
	}

	//CompositeBody:
	//	(elements+=CompositeDefinitionElement ";"?)*;
	public CompositeBodyElements getCompositeBodyAccess() {
		return (pCompositeBody != null) ? pCompositeBody : (pCompositeBody = new CompositeBodyElements());
	}
	
	public ParserRule getCompositeBodyRule() {
		return getCompositeBodyAccess().getRule();
	}

	//PrimitiveBody:
	//	(elements+=PrimitiveDefinitionElement ";"?)*;
	public PrimitiveBodyElements getPrimitiveBodyAccess() {
		return (pPrimitiveBody != null) ? pPrimitiveBody : (pPrimitiveBody = new PrimitiveBodyElements());
	}
	
	public ParserRule getPrimitiveBodyRule() {
		return getPrimitiveBodyAccess().getRule();
	}

	//TypeBody:
	//	(elements+=TypeDefinitionElement ";"?)*;
	public TypeBodyElements getTypeBodyAccess() {
		return (pTypeBody != null) ? pTypeBody : (pTypeBody = new TypeBodyElements());
	}
	
	public ParserRule getTypeBodyRule() {
		return getTypeBodyAccess().getRule();
	}

	//Element:
	//	CompositeDefinitionElement | PrimitiveDefinitionElement | TypeDefinitionElement;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//ComponentReference:
	//	CompositeReferenceDefinition | PrimitiveReferenceDefinition | TypeReferenceDefinition;
	public ComponentReferenceElements getComponentReferenceAccess() {
		return (pComponentReference != null) ? pComponentReference : (pComponentReference = new ComponentReferenceElements());
	}
	
	public ParserRule getComponentReferenceRule() {
		return getComponentReferenceAccess().getRule();
	}

	//CompositeReferenceDefinition:
	//	referenceName=FQN ("<" templatesList+=TemplateDefinition ("," templatesList+=TemplateDefinition)* ">")? ("("
	//	argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?;
	public CompositeReferenceDefinitionElements getCompositeReferenceDefinitionAccess() {
		return (pCompositeReferenceDefinition != null) ? pCompositeReferenceDefinition : (pCompositeReferenceDefinition = new CompositeReferenceDefinitionElements());
	}
	
	public ParserRule getCompositeReferenceDefinitionRule() {
		return getCompositeReferenceDefinitionAccess().getRule();
	}

	//PrimitiveReferenceDefinition:
	//	referenceName=FQN ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?;
	public PrimitiveReferenceDefinitionElements getPrimitiveReferenceDefinitionAccess() {
		return (pPrimitiveReferenceDefinition != null) ? pPrimitiveReferenceDefinition : (pPrimitiveReferenceDefinition = new PrimitiveReferenceDefinitionElements());
	}
	
	public ParserRule getPrimitiveReferenceDefinitionRule() {
		return getPrimitiveReferenceDefinitionAccess().getRule();
	}

	//TemplateDefinition:
	//	(name=ID "=")? reference=CompositeReferenceDefinition;
	public TemplateDefinitionElements getTemplateDefinitionAccess() {
		return (pTemplateDefinition != null) ? pTemplateDefinition : (pTemplateDefinition = new TemplateDefinitionElements());
	}
	
	public ParserRule getTemplateDefinitionRule() {
		return getTemplateDefinitionAccess().getRule();
	}

	//AttributeDefinition:
	//	annotationsList=AnnotationsList? "attribute" type=AttributeType? attributeName=ID ("=" value=Value)?;
	public AttributeDefinitionElements getAttributeDefinitionAccess() {
		return (pAttributeDefinition != null) ? pAttributeDefinition : (pAttributeDefinition = new AttributeDefinitionElements());
	}
	
	public ParserRule getAttributeDefinitionRule() {
		return getAttributeDefinitionAccess().getRule();
	}

	//ArgumentDefinition:
	//	argumentName=ID "=" argumentValue=Value | argumentValue=Value;
	public ArgumentDefinitionElements getArgumentDefinitionAccess() {
		return (pArgumentDefinition != null) ? pArgumentDefinition : (pArgumentDefinition = new ArgumentDefinitionElements());
	}
	
	public ParserRule getArgumentDefinitionRule() {
		return getArgumentDefinitionAccess().getRule();
	}

	//InterfaceDefinition:
	//	annotationsList=AnnotationsList? role=Role optional?="optional"? signature=FQN? "as" name=ID (collection?="["
	//	collectionsize=INT? "]" | collection?="[]")?;
	public InterfaceDefinitionElements getInterfaceDefinitionAccess() {
		return (pInterfaceDefinition != null) ? pInterfaceDefinition : (pInterfaceDefinition = new InterfaceDefinitionElements());
	}
	
	public ParserRule getInterfaceDefinitionRule() {
		return getInterfaceDefinitionAccess().getRule();
	}

	//BindingDefinition:
	//	annotationsList=AnnotationsList? ("binds" ("this" | interfaceSourceParentLabel=ID) "." interfaceSourceLabel=ID ("["
	//	interfaceSourceIndex=INT "]")? "to" ("this" | interfaceTargetParentLabel=ID) "." interfaceTargetLabel=ID ("["
	//	interfaceTargetIndex=INT "]")?);
	public BindingDefinitionElements getBindingDefinitionAccess() {
		return (pBindingDefinition != null) ? pBindingDefinition : (pBindingDefinition = new BindingDefinitionElements());
	}
	
	public ParserRule getBindingDefinitionRule() {
		return getBindingDefinitionAccess().getRule();
	}

	//DataDefinition:
	//	annotationsList=AnnotationsList? "data" (fileC=FileC | inlineCcode=InlineCodeC);
	public DataDefinitionElements getDataDefinitionAccess() {
		return (pDataDefinition != null) ? pDataDefinition : (pDataDefinition = new DataDefinitionElements());
	}
	
	public ParserRule getDataDefinitionRule() {
		return getDataDefinitionAccess().getRule();
	}

	//ImplementationDefinition:
	//	annotationsList=AnnotationsList? "source" (fileC=FileC | inlineCcode=InlineCodeC);
	public ImplementationDefinitionElements getImplementationDefinitionAccess() {
		return (pImplementationDefinition != null) ? pImplementationDefinition : (pImplementationDefinition = new ImplementationDefinitionElements());
	}
	
	public ParserRule getImplementationDefinitionRule() {
		return getImplementationDefinitionAccess().getRule();
	}

	//TemplateSpecifier:
	//	name=ID "conformsto" reference=TypeReferenceDefinition;
	public TemplateSpecifierElements getTemplateSpecifierAccess() {
		return (pTemplateSpecifier != null) ? pTemplateSpecifier : (pTemplateSpecifier = new TemplateSpecifierElements());
	}
	
	public ParserRule getTemplateSpecifierRule() {
		return getTemplateSpecifierAccess().getRule();
	}

	//FileC:
	//	directory=Path? fileName=FileName;
	public FileCElements getFileCAccess() {
		return (pFileC != null) ? pFileC : (pFileC = new FileCElements());
	}
	
	public ParserRule getFileCRule() {
		return getFileCAccess().getRule();
	}

	//FileName:
	//	ID ("." ID)?;
	public FileNameElements getFileNameAccess() {
		return (pFileName != null) ? pFileName : (pFileName = new FileNameElements());
	}
	
	public ParserRule getFileNameRule() {
		return getFileNameAccess().getRule();
	}

	//InlineCodeC:
	//	codeC=CodeC;
	public InlineCodeCElements getInlineCodeCAccess() {
		return (pInlineCodeC != null) ? pInlineCodeC : (pInlineCodeC = new InlineCodeCElements());
	}
	
	public ParserRule getInlineCodeCRule() {
		return getInlineCodeCAccess().getRule();
	}

	//AnnotationsList:
	//	annotations+=Annotation annotations+=Annotation*;
	public AnnotationsListElements getAnnotationsListAccess() {
		return (pAnnotationsList != null) ? pAnnotationsList : (pAnnotationsList = new AnnotationsListElements());
	}
	
	public ParserRule getAnnotationsListRule() {
		return getAnnotationsListAccess().getRule();
	}

	//Annotation:
	//	"@" name=AnnotationType ("(" annotationElements+=AnnotationElement ("," annotationElements+=AnnotationElement)* ")")?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//AnnotationElement:
	//	elementValue=ElementValue | elementName=ID "=" elementValue=ElementValue;
	public AnnotationElementElements getAnnotationElementAccess() {
		return (pAnnotationElement != null) ? pAnnotationElement : (pAnnotationElement = new AnnotationElementElements());
	}
	
	public ParserRule getAnnotationElementRule() {
		return getAnnotationElementAccess().getRule();
	}

	//ElementValue:
	//	ConstantValue | Annotation | ElementValueArrayInitializer;
	public ElementValueElements getElementValueAccess() {
		return (pElementValue != null) ? pElementValue : (pElementValue = new ElementValueElements());
	}
	
	public ParserRule getElementValueRule() {
		return getElementValueAccess().getRule();
	}

	//ConstantValue:
	//	value=ConstantFormat;
	public ConstantValueElements getConstantValueAccess() {
		return (pConstantValue != null) ? pConstantValue : (pConstantValue = new ConstantValueElements());
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ConstantFormat:
	//	INT | STRING;
	public ConstantFormatElements getConstantFormatAccess() {
		return (pConstantFormat != null) ? pConstantFormat : (pConstantFormat = new ConstantFormatElements());
	}
	
	public ParserRule getConstantFormatRule() {
		return getConstantFormatAccess().getRule();
	}

	//ElementValueArrayInitializer:
	//	"{" values+=ElementValue ("," values+=ElementValue)* "}";
	public ElementValueArrayInitializerElements getElementValueArrayInitializerAccess() {
		return (pElementValueArrayInitializer != null) ? pElementValueArrayInitializer : (pElementValueArrayInitializer = new ElementValueArrayInitializerElements());
	}
	
	public ParserRule getElementValueArrayInitializerRule() {
		return getElementValueArrayInitializerAccess().getRule();
	}

	//Value:
	//	ID | signedINT | HexadecimalType | STRING | "null";
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//HexadecimalType:
	//	"0x" INT;
	public HexadecimalTypeElements getHexadecimalTypeAccess() {
		return (pHexadecimalType != null) ? pHexadecimalType : (pHexadecimalType = new HexadecimalTypeElements());
	}
	
	public ParserRule getHexadecimalTypeRule() {
		return getHexadecimalTypeAccess().getRule();
	}

	//AnnotationType:
	//	"Override" | "Singleton" | "LDFlags" | "CFlags" | FQN;
	public AnnotationTypeElements getAnnotationTypeAccess() {
		return (pAnnotationType != null) ? pAnnotationType : (pAnnotationType = new AnnotationTypeElements());
	}
	
	public ParserRule getAnnotationTypeRule() {
		return getAnnotationTypeAccess().getRule();
	}

	//AttributeType:
	//	"STRUCT" | "UNION" | "ENUM" | ID;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (pAttributeType != null) ? pAttributeType : (pAttributeType = new AttributeTypeElements());
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//enum Role:
	//	provides | requires;
	public RoleElements getRoleAccess() {
		return (unknownRuleRole != null) ? unknownRuleRole : (unknownRuleRole = new RoleElements());
	}
	
	public EnumRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//FULL_IMPORT_NAME:
	//	FQN ".*";
	public FULL_IMPORT_NAMEElements getFULL_IMPORT_NAMEAccess() {
		return (pFULL_IMPORT_NAME != null) ? pFULL_IMPORT_NAME : (pFULL_IMPORT_NAME = new FULL_IMPORT_NAMEElements());
	}
	
	public ParserRule getFULL_IMPORT_NAMERule() {
		return getFULL_IMPORT_NAMEAccess().getRule();
	}

	//terminal CodeC:
	//	"{{"->"}}";
	public TerminalRule getCodeCRule() {
		return (tCodeC != null) ? tCodeC : (tCodeC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CodeC"));
	} 

	//terminal SL:
	//	"\\" | "\\\\" | "/";
	public TerminalRule getSLRule() {
		return (tSL != null) ? tSL : (tSL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL"));
	} 

	/// * SSZ: grammar taken from the Mindc compiler adl-parser.jj file
	//void Path() : {}
	//{
	//  [ <SLASH> ] [ <DOT> <SLASH> ] ( <DOTDOT> <SLASH> )* 
	//  <IDENTIFIER> ( <SLASH> <IDENTIFIER> )* <DOT> <IDENTIFIER>
	//}
	// * / Path:
	//	(ID ":"? | "." | "..")? (SL ((ID "-"?)* | ".."))* SL;
	public PathElements getPathAccess() {
		return (pPath != null) ? pPath : (pPath = new PathElements());
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//signedINT:
	//	("+" | "-")? INT;
	public SignedINTElements getSignedINTAccess() {
		return (pSignedINT != null) ? pSignedINT : (pSignedINT = new SignedINTElements());
	}
	
	public ParserRule getSignedINTRule() {
		return getSignedINTAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
