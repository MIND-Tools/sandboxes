/*
* generated by Xtext
*/
grammar InternalFractalItf;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.ow2.mindEd.itf.editor.textual.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.ow2.mindEd.itf.editor.textual.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.ow2.mindEd.itf.editor.textual.services.FractalItfGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private FractalItfGrammarAccess grammarAccess;
 	
    public InternalFractalItfParser(TokenStream input, FractalItfGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ItfFile";	
   	}
   	
   	@Override
   	protected FractalItfGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleItfFile
entryRuleItfFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItfFileRule()); }
	 iv_ruleItfFile=ruleItfFile 
	 { $current=$iv_ruleItfFile.current; } 
	 EOF 
;

// Rule ItfFile
ruleItfFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getItfFileAccess().getIncludesIncludeDirectiveParserRuleCall_0_0()); 
	    }
		lv_includes_0_0=ruleIncludeDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItfFileRule());
	        }
       		add(
       			$current, 
       			"includes",
        		lv_includes_0_0, 
        		"IncludeDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getItfFileAccess().getConstantConstantDefinitionParserRuleCall_1_0_0()); 
	    }
		lv_constant_1_0=ruleConstantDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItfFileRule());
	        }
       		add(
       			$current, 
       			"constant",
        		lv_constant_1_0, 
        		"ConstantDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getItfFileAccess().getTypeTypeDefinitionParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItfFileRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getItfFileAccess().getInterfaceInterfaceDefinitionParserRuleCall_2_0()); 
	    }
		lv_interface_3_0=ruleInterfaceDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItfFileRule());
	        }
       		set(
       			$current, 
       			"interface",
        		lv_interface_3_0, 
        		"InterfaceDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getItfFileAccess().getSemicolonKeyword_3());
    }
)?)
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getTypedefSpecificationParserRuleCall_0_0()); 
    }
    this_TypedefSpecification_0=ruleTypedefSpecification
    { 
        $current = $this_TypedefSpecification_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getStructOrUnionSpecificationParserRuleCall_0_1()); 
    }
    this_StructOrUnionSpecification_1=ruleStructOrUnionSpecification
    { 
        $current = $this_StructOrUnionSpecification_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getEnumSpecificationParserRuleCall_0_2()); 
    }
    this_EnumSpecification_2=ruleEnumSpecification
    { 
        $current = $this_EnumSpecification_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleTypedefSpecification
entryRuleTypedefSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedefSpecificationRule()); }
	 iv_ruleTypedefSpecification=ruleTypedefSpecification 
	 { $current=$iv_ruleTypedefSpecification.current; } 
	 EOF 
;

// Rule TypedefSpecification
ruleTypedefSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='typedef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypedefSpecificationAccess().getTypedefKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedefSpecificationAccess().getQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0()); 
	    }
		lv_qualifedType_1_0=ruleQualifiedTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedefSpecificationRule());
	        }
       		set(
       			$current, 
       			"qualifedType",
        		lv_qualifedType_1_0, 
        		"QualifiedTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedefSpecificationAccess().getDecDeclaratorsParserRuleCall_2_0()); 
	    }
		lv_dec_2_0=ruleDeclarators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedefSpecificationRule());
	        }
       		set(
       			$current, 
       			"dec",
        		lv_dec_2_0, 
        		"Declarators");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedTypeSpecification
entryRuleQualifiedTypeSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedTypeSpecificationRule()); }
	 iv_ruleQualifiedTypeSpecification=ruleQualifiedTypeSpecification 
	 { $current=$iv_ruleQualifiedTypeSpecification.current; } 
	 EOF 
;

// Rule QualifiedTypeSpecification
ruleQualifiedTypeSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeQualifierTypeQualifierEnumRuleCall_0_0()); 
	    }
		lv_typeQualifier_0_0=ruleTypeQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedTypeSpecificationRule());
	        }
       		add(
       			$current, 
       			"typeQualifier",
        		lv_typeQualifier_0_0, 
        		"TypeQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedTypeSpecificationAccess().getTypeSpecTypeSpecificationParserRuleCall_1_0()); 
	    }
		lv_typeSpec_1_0=ruleTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedTypeSpecificationRule());
	        }
       		set(
       			$current, 
       			"typeSpec",
        		lv_typeSpec_1_0, 
        		"TypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeSpecification
entryRuleTypeSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSpecificationRule()); }
	 iv_ruleTypeSpecification=ruleTypeSpecification 
	 { $current=$iv_ruleTypeSpecification.current; } 
	 EOF 
;

// Rule TypeSpecification
ruleTypeSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeSpecificationAccess().getTypeDefNameTypedefNameParserRuleCall_0_0()); 
	    }
		lv_typeDefName_0_0=ruleTypedefName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSpecificationRule());
	        }
       		set(
       			$current, 
       			"typeDefName",
        		lv_typeDefName_0_0, 
        		"TypedefName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeSpecificationAccess().getStructOrUnionSpecificationParserRuleCall_1()); 
    }
    this_StructOrUnionSpecification_1=ruleStructOrUnionSpecification
    { 
        $current = $this_StructOrUnionSpecification_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeSpecificationAccess().getEnumSpecificationParserRuleCall_2()); 
    }
    this_EnumSpecification_2=ruleEnumSpecification
    { 
        $current = $this_EnumSpecification_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeSpecificationAccess().getTypeSpecifierTypeSpecifierEnumRuleCall_3_0()); 
	    }
		lv_typeSpecifier_3_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSpecificationRule());
	        }
       		add(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_3_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTypedefName
entryRuleTypedefName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedefNameRule()); } 
	 iv_ruleTypedefName=ruleTypedefName 
	 { $current=$iv_ruleTypedefName.current.getText(); }  
	 EOF 
;

// Rule TypedefName
ruleTypedefName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTypedefNameAccess().getQualifiedNameParserRuleCall()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleStructOrUnionSpecification
entryRuleStructOrUnionSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructOrUnionSpecificationRule()); }
	 iv_ruleStructOrUnionSpecification=ruleStructOrUnionSpecification 
	 { $current=$iv_ruleStructOrUnionSpecification.current; } 
	 EOF 
;

// Rule StructOrUnionSpecification
ruleStructOrUnionSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStructOrUnionSpecificationAccess().getStructOrUnionDefinitionParserRuleCall_0()); 
    }
    this_StructOrUnionDefinition_0=ruleStructOrUnionDefinition
    { 
        $current = $this_StructOrUnionDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStructOrUnionSpecificationAccess().getStructorUnionReferenceParserRuleCall_1()); 
    }
    this_StructorUnionReference_1=ruleStructorUnionReference
    { 
        $current = $this_StructorUnionReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStructOrUnionDefinition
entryRuleStructOrUnionDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructOrUnionDefinitionRule()); }
	 iv_ruleStructOrUnionDefinition=ruleStructOrUnionDefinition 
	 { $current=$iv_ruleStructOrUnionDefinition.current; } 
	 EOF 
;

// Rule StructOrUnionDefinition
ruleStructOrUnionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructOrUnionDefinitionAccess().getStructStructOrUnionParserRuleCall_0_0()); 
	    }
		lv_struct_0_0=ruleStructOrUnion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructOrUnionDefinitionRule());
	        }
       		set(
       			$current, 
       			"struct",
        		lv_struct_0_0, 
        		"StructOrUnion");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getStructOrUnionDefinitionAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructOrUnionDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)?	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStructOrUnionDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructOrUnionDefinitionAccess().getStructMemberStructMemberParserRuleCall_3_0()); 
	    }
		lv_structMember_3_0=ruleStructMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructOrUnionDefinitionRule());
	        }
       		add(
       			$current, 
       			"structMember",
        		lv_structMember_3_0, 
        		"StructMember");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStructOrUnionDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleStructorUnionReference
entryRuleStructorUnionReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructorUnionReferenceRule()); }
	 iv_ruleStructorUnionReference=ruleStructorUnionReference 
	 { $current=$iv_ruleStructorUnionReference.current; } 
	 EOF 
;

// Rule StructorUnionReference
ruleStructorUnionReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructorUnionReferenceAccess().getStructStructOrUnionParserRuleCall_0_0()); 
	    }
		lv_struct_0_0=ruleStructOrUnion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructorUnionReferenceRule());
	        }
       		set(
       			$current, 
       			"struct",
        		lv_struct_0_0, 
        		"StructOrUnion");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getStructorUnionReferenceAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructorUnionReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleStructOrUnion
entryRuleStructOrUnion returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructOrUnionRule()); } 
	 iv_ruleStructOrUnion=ruleStructOrUnion 
	 { $current=$iv_ruleStructOrUnion.current.getText(); }  
	 EOF 
;

// Rule StructOrUnion
ruleStructOrUnion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='struct' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructOrUnionAccess().getStructKeyword_0()); 
    }

    |
	kw='union' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStructOrUnionAccess().getUnionKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleStructMember
entryRuleStructMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructMemberRule()); }
	 iv_ruleStructMember=ruleStructMember 
	 { $current=$iv_ruleStructMember.current; } 
	 EOF 
;

// Rule StructMember
ruleStructMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructMemberAccess().getAnnotationsAnnotationsParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructMemberRule());
	        }
       		set(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStructMemberAccess().getQualTypeQualifiedTypeSpecificationParserRuleCall_1_0()); 
	    }
		lv_qualType_1_0=ruleQualifiedTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructMemberRule());
	        }
       		set(
       			$current, 
       			"qualType",
        		lv_qualType_1_0, 
        		"QualifiedTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStructMemberAccess().getDecDeclaratorsParserRuleCall_2_0()); 
	    }
		lv_dec_2_0=ruleDeclarators		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructMemberRule());
	        }
       		set(
       			$current, 
       			"dec",
        		lv_dec_2_0, 
        		"Declarators");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStructMemberAccess().getColonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructMemberAccess().getConstExprConstantExpressionParserRuleCall_3_1_0()); 
	    }
		lv_constExpr_4_0=ruleConstantExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructMemberRule());
	        }
       		set(
       			$current, 
       			"constExpr",
        		lv_constExpr_4_0, 
        		"ConstantExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStructMemberAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleEnumSpecification
entryRuleEnumSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumSpecificationRule()); }
	 iv_ruleEnumSpecification=ruleEnumSpecification 
	 { $current=$iv_ruleEnumSpecification.current; } 
	 EOF 
;

// Rule EnumSpecification
ruleEnumSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnumSpecificationAccess().getEnumDefinitionParserRuleCall_0()); 
    }
    this_EnumDefinition_0=ruleEnumDefinition
    { 
        $current = $this_EnumDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnumSpecificationAccess().getEnumReferenceParserRuleCall_1()); 
    }
    this_EnumReference_1=ruleEnumReference
    { 
        $current = $this_EnumReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEnumDefinition
entryRuleEnumDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumDefinitionRule()); }
	 iv_ruleEnumDefinition=ruleEnumDefinition 
	 { $current=$iv_ruleEnumDefinition.current; } 
	 EOF 
;

// Rule EnumDefinition
ruleEnumDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumDefinitionAccess().getEnumKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getEnumDefinitionAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)?	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDefinitionAccess().getEnumMemberListEnumMemberListParserRuleCall_3_0()); 
	    }
		lv_enumMemberList_3_0=ruleEnumMemberList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDefinitionRule());
	        }
       		set(
       			$current, 
       			"enumMemberList",
        		lv_enumMemberList_3_0, 
        		"EnumMemberList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEnumReference
entryRuleEnumReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumReferenceRule()); }
	 iv_ruleEnumReference=ruleEnumReference 
	 { $current=$iv_ruleEnumReference.current; } 
	 EOF 
;

// Rule EnumReference
ruleEnumReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumReferenceAccess().getEnumKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getEnumReferenceAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleEnumMemberList
entryRuleEnumMemberList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumMemberListRule()); }
	 iv_ruleEnumMemberList=ruleEnumMemberList 
	 { $current=$iv_ruleEnumMemberList.current; } 
	 EOF 
;

// Rule EnumMemberList
ruleEnumMemberList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnumMemberListAccess().getEnumMemberParserRuleCall_0()); 
    }
    this_EnumMember_0=ruleEnumMember
    { 
        $current = $this_EnumMember_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumMemberListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumMemberListAccess().getEnumMemberEnumMemberParserRuleCall_1_1_0()); 
	    }
		lv_enumMember_2_0=ruleEnumMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumMemberListRule());
	        }
       		add(
       			$current, 
       			"enumMember",
        		lv_enumMember_2_0, 
        		"EnumMember");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEnumMember
entryRuleEnumMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumMemberRule()); }
	 iv_ruleEnumMember=ruleEnumMember 
	 { $current=$iv_ruleEnumMember.current; } 
	 EOF 
;

// Rule EnumMember
ruleEnumMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumMemberAccess().getAnnotationsAnnotationsParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumMemberRule());
	        }
       		set(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getEnumMemberAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumMemberAccess().getConstExprConstantExpressionParserRuleCall_2_1_0()); 
	    }
		lv_constExpr_3_0=ruleConstantExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumMemberRule());
	        }
       		set(
       			$current, 
       			"constExpr",
        		lv_constExpr_3_0, 
        		"ConstantExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDeclarators
entryRuleDeclarators returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaratorsRule()); }
	 iv_ruleDeclarators=ruleDeclarators 
	 { $current=$iv_ruleDeclarators.current; } 
	 EOF 
;

// Rule Declarators
ruleDeclarators returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaratorsAccess().getDecDeclaratorParserRuleCall_0_0()); 
	    }
		lv_dec_0_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaratorsRule());
	        }
       		set(
       			$current, 
       			"dec",
        		lv_dec_0_0, 
        		"Declarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclaratorsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaratorsAccess().getDeclaratorListDeclaratorParserRuleCall_1_1_0()); 
	    }
		lv_declaratorList_2_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaratorsRule());
	        }
       		add(
       			$current, 
       			"declaratorList",
        		lv_declaratorList_2_0, 
        		"Declarator");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDeclarator
entryRuleDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaratorRule()); }
	 iv_ruleDeclarator=ruleDeclarator 
	 { $current=$iv_ruleDeclarator.current; } 
	 EOF 
;

// Rule Declarator
ruleDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaratorAccess().getPointerPointerSpecificationParserRuleCall_0_0()); 
	    }
		lv_pointer_0_0=rulePointerSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaratorRule());
	        }
       		set(
       			$current, 
       			"pointer",
        		lv_pointer_0_0, 
        		"PointerSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaratorAccess().getDcDirectDeclaratorParserRuleCall_1_0()); 
	    }
		lv_dc_1_0=ruleDirectDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaratorRule());
	        }
       		set(
       			$current, 
       			"dc",
        		lv_dc_1_0, 
        		"DirectDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAbstractDeclarator
entryRuleAbstractDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDeclaratorRule()); }
	 iv_ruleAbstractDeclarator=ruleAbstractDeclarator 
	 { $current=$iv_ruleAbstractDeclarator.current; } 
	 EOF 
;

// Rule AbstractDeclarator
ruleAbstractDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractDeclaratorAccess().getPointerPointerSpecificationParserRuleCall_0_0()); 
	    }
		lv_pointer_0_0=rulePointerSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractDeclaratorRule());
	        }
       		set(
       			$current, 
       			"pointer",
        		lv_pointer_0_0, 
        		"PointerSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractDeclaratorAccess().getDcAbstractDirectDeclaratorParserRuleCall_1_0()); 
	    }
		lv_dc_1_0=ruleAbstractDirectDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractDeclaratorRule());
	        }
       		set(
       			$current, 
       			"dc",
        		lv_dc_1_0, 
        		"AbstractDirectDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRulePointerSpecification
entryRulePointerSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointerSpecificationRule()); }
	 iv_rulePointerSpecification=rulePointerSpecification 
	 { $current=$iv_rulePointerSpecification.current; } 
	 EOF 
;

// Rule PointerSpecification
rulePointerSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPointerSpecificationAccess().getPointerSpecificationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPointerSpecificationAccess().getQualifiedPointerQualified_PointerSpecificationParserRuleCall_1_0()); 
	    }
		lv_qualifiedPointer_1_0=ruleQualified_PointerSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointerSpecificationRule());
	        }
       		add(
       			$current, 
       			"qualifiedPointer",
        		lv_qualifiedPointer_1_0, 
        		"Qualified_PointerSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleQualified_PointerSpecification
entryRuleQualified_PointerSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualified_PointerSpecificationRule()); }
	 iv_ruleQualified_PointerSpecification=ruleQualified_PointerSpecification 
	 { $current=$iv_ruleQualified_PointerSpecification.current; } 
	 EOF 
;

// Rule Qualified_PointerSpecification
ruleQualified_PointerSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getQualified_PointerSpecificationAccess().getQualified_PointerSpecificationAction_0(),
            $current);
    }
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQualified_PointerSpecificationAccess().getAsteriskKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualified_PointerSpecificationAccess().getTypeQualifierTypeQualifierEnumRuleCall_2_0()); 
	    }
		lv_typeQualifier_2_0=ruleTypeQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualified_PointerSpecificationRule());
	        }
       		add(
       			$current, 
       			"typeQualifier",
        		lv_typeQualifier_2_0, 
        		"TypeQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDirectDeclarator
entryRuleDirectDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectDeclaratorRule()); }
	 iv_ruleDirectDeclarator=ruleDirectDeclarator 
	 { $current=$iv_ruleDirectDeclarator.current; } 
	 EOF 
;

// Rule DirectDeclarator
ruleDirectDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getDirectDeclaratorAccess().getIdIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDirectDeclaratorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDirectDeclaratorAccess().getLeftParenthesisKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDirectDeclaratorAccess().getDecDeclaratorParserRuleCall_0_1_1_0()); 
	    }
		lv_dec_2_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectDeclaratorRule());
	        }
       		set(
       			$current, 
       			"dec",
        		lv_dec_2_0, 
        		"Declarator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDirectDeclaratorAccess().getRightParenthesisKeyword_0_1_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getDirectDeclaratorAccess().getArrayArraySpecificationParserRuleCall_1_0()); 
	    }
		lv_array_4_0=ruleArraySpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectDeclaratorRule());
	        }
       		add(
       			$current, 
       			"array",
        		lv_array_4_0, 
        		"ArraySpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAbstractDirectDeclarator
entryRuleAbstractDirectDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDirectDeclaratorRule()); }
	 iv_ruleAbstractDirectDeclarator=ruleAbstractDirectDeclarator 
	 { $current=$iv_ruleAbstractDirectDeclarator.current; } 
	 EOF 
;

// Rule AbstractDirectDeclarator
ruleAbstractDirectDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbstractDirectDeclaratorAccess().getLeftParenthesisKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractDirectDeclaratorAccess().getDecAbstractDeclaratorParserRuleCall_0_1_0()); 
	    }
		lv_dec_1_0=ruleAbstractDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractDirectDeclaratorRule());
	        }
       		set(
       			$current, 
       			"dec",
        		lv_dec_1_0, 
        		"AbstractDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractDirectDeclaratorAccess().getRightParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractDirectDeclaratorAccess().getArraysArraySpecificationParserRuleCall_0_3_0()); 
	    }
		lv_arrays_3_0=ruleArraySpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractDirectDeclaratorRule());
	        }
       		add(
       			$current, 
       			"arrays",
        		lv_arrays_3_0, 
        		"ArraySpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractDirectDeclaratorAccess().getArrayArraySpecificationParserRuleCall_1_0()); 
	    }
		lv_array_4_0=ruleArraySpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractDirectDeclaratorRule());
	        }
       		add(
       			$current, 
       			"array",
        		lv_array_4_0, 
        		"ArraySpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleArraySpecification
entryRuleArraySpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArraySpecificationRule()); }
	 iv_ruleArraySpecification=ruleArraySpecification 
	 { $current=$iv_ruleArraySpecification.current; } 
	 EOF 
;

// Rule ArraySpecification
ruleArraySpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArraySpecificationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArraySpecificationAccess().getConstExprConstantExpressionParserRuleCall_1_0()); 
	    }
		lv_constExpr_1_0=ruleConstantExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArraySpecificationRule());
	        }
       		set(
       			$current, 
       			"constExpr",
        		lv_constExpr_1_0, 
        		"ConstantExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArraySpecificationAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDefinitionRule()); }
	 iv_ruleConstantDefinition=ruleConstantDefinition 
	 { $current=$iv_ruleConstantDefinition.current; } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDefinitionAccess().getDefineKeyword_0());
    }
(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getConstantDefinitionAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getExprConstantExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleConstantExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"ConstantExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleInterfaceDefinition
entryRuleInterfaceDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceDefinitionRule()); }
	 iv_ruleInterfaceDefinition=ruleInterfaceDefinition 
	 { $current=$iv_ruleInterfaceDefinition.current; } 
	 EOF 
;

// Rule InterfaceDefinition
ruleInterfaceDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getAnnotationsAnnotationsParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceDefinitionRule());
	        }
       		set(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotations");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='interface' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceDefinitionAccess().getInterfaceKeyword_1());
    }
(	otherlv_2='unmanaged' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceDefinitionAccess().getUnmanagedKeyword_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getNameQualifiedNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterfaceDefinitionAccess().getColonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getFqn2QualifiedNameParserRuleCall_4_1_0()); 
	    }
		lv_fqn2_5_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceDefinitionRule());
	        }
       		set(
       			$current, 
       			"fqn2",
        		lv_fqn2_5_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInterfaceDefinitionAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceDefinitionAccess().getMethodDefMethodDefinitionParserRuleCall_6_0()); 
	    }
		lv_methodDef_7_0=ruleMethodDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceDefinitionRule());
	        }
       		add(
       			$current, 
       			"methodDef",
        		lv_methodDef_7_0, 
        		"MethodDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInterfaceDefinitionAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleMethodDefinition
entryRuleMethodDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodDefinitionRule()); }
	 iv_ruleMethodDefinition=ruleMethodDefinition 
	 { $current=$iv_ruleMethodDefinition.current; } 
	 EOF 
;

// Rule MethodDefinition
ruleMethodDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDefinitionAccess().getAnnotationsAnnotationsParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDefinitionRule());
	        }
       		set(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDefinitionAccess().getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0()); 
	    }
		lv_qualifiedTypeSpec_1_0=ruleQualifiedTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDefinitionRule());
	        }
       		set(
       			$current, 
       			"qualifiedTypeSpec",
        		lv_qualifiedTypeSpec_1_0, 
        		"QualifiedTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDefinitionAccess().getPointerSpecificationPointerSpecificationParserRuleCall_2_0()); 
	    }
		lv_pointerSpecification_2_0=rulePointerSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDefinitionRule());
	        }
       		set(
       			$current, 
       			"pointerSpecification",
        		lv_pointerSpecification_2_0, 
        		"PointerSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_id_3_0=RULE_ID
		{
			newLeafNode(lv_id_3_0, grammarAccess.getMethodDefinitionAccess().getIdIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"ID");
	    }

)
)((	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodDefinitionAccess().getLeftParenthesisKeyword_4_0_0());
    }
(	otherlv_5='void' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodDefinitionAccess().getVoidKeyword_4_0_1());
    }
)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodDefinitionAccess().getRightParenthesisKeyword_4_0_2());
    }
)
    |(	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMethodDefinitionAccess().getLeftParenthesisKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDefinitionAccess().getParameterListParameterListParserRuleCall_4_1_1_0()); 
	    }
		lv_ParameterList_8_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDefinitionRule());
	        }
       		set(
       			$current, 
       			"ParameterList",
        		lv_ParameterList_8_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMethodDefinitionAccess().getRightParenthesisKeyword_4_1_2());
    }
))	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMethodDefinitionAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getParamParameterParserRuleCall_0_0()); 
	    }
		lv_param_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getParamsParameterParserRuleCall_1_1_0()); 
	    }
		lv_params_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterListAccess().getCommaKeyword_2_0());
    }
	otherlv_4='...' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterListAccess().getFullStopFullStopFullStopKeyword_2_1());
    }
)?)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getAnnotationsAnnotationsParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getParameterQualifierParameterQualifierEnumRuleCall_1_0()); 
	    }
		lv_ParameterQualifier_1_0=ruleParameterQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		add(
       			$current, 
       			"ParameterQualifier",
        		lv_ParameterQualifier_1_0, 
        		"ParameterQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_2_0()); 
	    }
		lv_qualifiedTypeSpec_2_0=ruleQualifiedTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"qualifiedTypeSpec",
        		lv_qualifiedTypeSpec_2_0, 
        		"QualifiedTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getDecDeclaratorParserRuleCall_3_0_0()); 
	    }
		lv_dec_3_0=ruleDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"dec",
        		lv_dec_3_0, 
        		"Declarator");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getAbsDecAbstractDeclaratorParserRuleCall_3_1_0()); 
	    }
		lv_absDec_4_0=ruleAbstractDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"absDec",
        		lv_absDec_4_0, 
        		"AbstractDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleIncludeDirective
entryRuleIncludeDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeDirectiveRule()); }
	 iv_ruleIncludeDirective=ruleIncludeDirective 
	 { $current=$iv_ruleIncludeDirective.current; } 
	 EOF 
;

// Rule IncludeDirective
ruleIncludeDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#include' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIncludeDirectiveAccess().getIncludeKeyword_0());
    }
((
(
		lv_importedURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importedURI_1_0, grammarAccess.getIncludeDirectiveAccess().getImportedURISTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importedURI",
        		lv_importedURI_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_includeID_2_0=RULE_INCLUDELIB
		{
			newLeafNode(lv_includeID_2_0, grammarAccess.getIncludeDirectiveAccess().getIncludeIDIncludeLibTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"includeID",
        		lv_includeID_2_0, 
        		"IncludeLib");
	    }

)
)))
;





// Entry rule entryRuleAnnotations
entryRuleAnnotations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationsRule()); }
	 iv_ruleAnnotations=ruleAnnotations 
	 { $current=$iv_ruleAnnotations.current; } 
	 EOF 
;

// Rule Annotations
ruleAnnotations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationsAccess().getAnnotationsAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationsAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationsRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getFqnQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_fqn_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"fqn",
        		lv_fqn_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationAccess().getAnnotationParamatersAnnotationParametersParserRuleCall_2_0()); 
	    }
		lv_annotationParamaters_2_0=ruleAnnotationParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationRule());
	        }
       		set(
       			$current, 
       			"annotationParamaters",
        		lv_annotationParamaters_2_0, 
        		"AnnotationParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAnnotationParameters
entryRuleAnnotationParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationParametersRule()); }
	 iv_ruleAnnotationParameters=ruleAnnotationParameters 
	 { $current=$iv_ruleAnnotationParameters.current; } 
	 EOF 
;

// Rule AnnotationParameters
ruleAnnotationParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnnotationParametersAccess().getAnnotationParametersAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationParametersAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationParametersAccess().getValuePairAnnotationValuePairsParserRuleCall_2_0_0()); 
	    }
		lv_valuePair_2_0=ruleAnnotationValuePairs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationParametersRule());
	        }
       		set(
       			$current, 
       			"valuePair",
        		lv_valuePair_2_0, 
        		"AnnotationValuePairs");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationParametersAccess().getValueAnnotationValueParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationParametersRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"AnnotationValue");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnnotationParametersAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAnnotationValuePairs
entryRuleAnnotationValuePairs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationValuePairsRule()); }
	 iv_ruleAnnotationValuePairs=ruleAnnotationValuePairs 
	 { $current=$iv_ruleAnnotationValuePairs.current; } 
	 EOF 
;

// Rule AnnotationValuePairs
ruleAnnotationValuePairs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationValuePairsAccess().getFirstAnnotationValuePairParserRuleCall_0_0()); 
	    }
		lv_first_0_0=ruleAnnotationValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationValuePairsRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_0_0, 
        		"AnnotationValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationValuePairsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationValuePairsAccess().getListValueAnnotationValuePairParserRuleCall_1_1_0()); 
	    }
		lv_listValue_2_0=ruleAnnotationValuePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationValuePairsRule());
	        }
       		add(
       			$current, 
       			"listValue",
        		lv_listValue_2_0, 
        		"AnnotationValuePair");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnnotationValuePair
entryRuleAnnotationValuePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationValuePairRule()); }
	 iv_ruleAnnotationValuePair=ruleAnnotationValuePair 
	 { $current=$iv_ruleAnnotationValuePair.current; } 
	 EOF 
;

// Rule AnnotationValuePair
ruleAnnotationValuePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getAnnotationValuePairAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationValuePairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationValuePairAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotationValuePairAccess().getValueAnnotationValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotationValuePairRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"AnnotationValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAnnotationValue
entryRuleAnnotationValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationValueRule()); }
	 iv_ruleAnnotationValue=ruleAnnotationValue 
	 { $current=$iv_ruleAnnotationValue.current; } 
	 EOF 
;

// Rule AnnotationValue
ruleAnnotationValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationValueAccess().getSignedINTParserRuleCall_0()); 
    }
rulesignedINT
    { 
        afterParserOrEnumRuleCall();
    }

    |	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotationValueAccess().getNullKeyword_1());
    }

    |this_Boolean_2=RULE_BOOLEAN
    { 
    newLeafNode(this_Boolean_2, grammarAccess.getAnnotationValueAccess().getBooleanTerminalRuleCall_2()); 
    }

    |this_ID_3=RULE_ID
    { 
    newLeafNode(this_ID_3, grammarAccess.getAnnotationValueAccess().getIDTerminalRuleCall_3()); 
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationValueAccess().getAnnotationParserRuleCall_4()); 
    }
    this_Annotation_4=ruleAnnotation
    { 
        $current = $this_Annotation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationValueAccess().getArrayAnnotationValueParserRuleCall_5()); 
    }
    this_ArrayAnnotationValue_5=ruleArrayAnnotationValue
    { 
        $current = $this_ArrayAnnotationValue_5.current; 
        afterParserOrEnumRuleCall();
    }

    |this_STRING_6=RULE_STRING
    { 
    newLeafNode(this_STRING_6, grammarAccess.getAnnotationValueAccess().getSTRINGTerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRuleArrayAnnotationValue
entryRuleArrayAnnotationValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayAnnotationValueRule()); }
	 iv_ruleArrayAnnotationValue=ruleArrayAnnotationValue 
	 { $current=$iv_ruleArrayAnnotationValue.current; } 
	 EOF 
;

// Rule ArrayAnnotationValue
ruleArrayAnnotationValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayAnnotationValueAccess().getLeftCurlyBracketKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getArrayAnnotationValueAccess().getFirstValueAnnotationValueParserRuleCall_1_0_0()); 
	    }
		lv_firstValue_1_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayAnnotationValueRule());
	        }
       		set(
       			$current, 
       			"firstValue",
        		lv_firstValue_1_0, 
        		"AnnotationValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayAnnotationValueAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayAnnotationValueAccess().getValuesAnnotationValueParserRuleCall_1_1_1_0()); 
	    }
		lv_values_3_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayAnnotationValueRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"AnnotationValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayAnnotationValueAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRulesignedINT
entryRulesignedINT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedINTRule()); } 
	 iv_rulesignedINT=rulesignedINT 
	 { $current=$iv_rulesignedINT.current.getText(); }  
	 EOF 
;

// Rule signedINT
rulesignedINT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_AdditiveOperation_0=RULE_ADDITIVEOPERATION    {
		$current.merge(this_AdditiveOperation_0);
    }

    { 
    newLeafNode(this_AdditiveOperation_0, grammarAccess.getSignedINTAccess().getAdditiveOperationTerminalRuleCall_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getSignedINTAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); }
	 iv_ruleConstantExpression=ruleConstantExpression 
	 { $current=$iv_ruleConstantExpression.current; } 
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstantExpressionAccess().getLogicalOrExpressionParserRuleCall()); 
    }
    this_LogicalOrExpression_0=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLeftExprLogicalAndExpressionParserRuleCall_0_0()); 
	    }
		lv_leftExpr_0_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpr",
        		lv_leftExpr_0_0, 
        		"LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogicalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightExprLogicalOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpr_2_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_2_0, 
        		"LogicalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getLeftExprOrExpressionParserRuleCall_0_0()); 
	    }
		lv_leftExpr_0_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpr",
        		lv_leftExpr_0_0, 
        		"OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogicalAndExpressionAccess().getAmpersandAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightExprLogicalAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpr_2_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_2_0, 
        		"LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getLeftExprXorExpressionParserRuleCall_0_0()); 
	    }
		lv_leftExpr_0_0=ruleXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpr",
        		lv_leftExpr_0_0, 
        		"XorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrExpressionAccess().getVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightExprOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpr_2_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_2_0, 
        		"OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXorExpressionRule()); }
	 iv_ruleXorExpression=ruleXorExpression 
	 { $current=$iv_ruleXorExpression.current; } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXorExpressionAccess().getLeftExprAndExpressionParserRuleCall_0_0()); 
	    }
		lv_leftExpr_0_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpr",
        		lv_leftExpr_0_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='^' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXorExpressionAccess().getCircumflexAccentKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXorExpressionAccess().getRightExprXorExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpr_2_0=ruleXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_2_0, 
        		"XorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getLeftExprShiftExpressionParserRuleCall_0_0()); 
	    }
		lv_leftExpr_0_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpr",
        		lv_leftExpr_0_0, 
        		"ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='&' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightExprAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpr_2_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_2_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getLeftExprAdditiveExpressionParserRuleCall_0_0()); 
	    }
		lv_leftExpr_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpr",
        		lv_leftExpr_0_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_op_1_0=RULE_SHIFTOPERATION
		{
			newLeafNode(lv_op_1_0, grammarAccess.getShiftExpressionAccess().getOpShiftOperationTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShiftExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"ShiftOperation");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getRightExprShiftExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpr_2_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_2_0, 
        		"ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getLeftExprMulExpressionParserRuleCall_0_0()); 
	    }
		lv_leftExpr_0_0=ruleMulExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpr",
        		lv_leftExpr_0_0, 
        		"MulExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_op_1_0=RULE_ADDITIVEOPERATION
		{
			newLeafNode(lv_op_1_0, grammarAccess.getAdditiveExpressionAccess().getOpAdditiveOperationTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"AdditiveOperation");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightExprAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpr_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_2_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMulExpression
entryRuleMulExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMulExpressionRule()); }
	 iv_ruleMulExpression=ruleMulExpression 
	 { $current=$iv_ruleMulExpression.current; } 
	 EOF 
;

// Rule MulExpression
ruleMulExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMulExpressionAccess().getLeftExprCastExpressionParserRuleCall_0_0()); 
	    }
		lv_leftExpr_0_0=ruleCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMulExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpr",
        		lv_leftExpr_0_0, 
        		"CastExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_op_1_0=RULE_MULOPERATION
		{
			newLeafNode(lv_op_1_0, grammarAccess.getMulExpressionAccess().getOpMulOperationTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"MulOperation");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMulExpressionAccess().getRightExprMulExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpr_2_0=ruleMulExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMulExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpr",
        		lv_rightExpr_2_0, 
        		"MulExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCastExpression
entryRuleCastExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastExpressionRule()); }
	 iv_ruleCastExpression=ruleCastExpression 
	 { $current=$iv_ruleCastExpression.current; } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCastExpressionAccess().getLeftParenthesisKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastExpressionAccess().getTypeQualifiedTypeSpecificationParserRuleCall_0_1_0()); 
	    }
		lv_type_1_0=ruleQualifiedTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"QualifiedTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastExpressionAccess().getRightParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastExpressionAccess().getExprCastExpressionParserRuleCall_0_3_0()); 
	    }
		lv_expr_3_0=ruleCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"CastExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCastExpressionAccess().getUnaryExprUnaryExpressionParserRuleCall_1_0()); 
	    }
		lv_unaryExpr_4_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastExpressionRule());
	        }
       		set(
       			$current, 
       			"unaryExpr",
        		lv_unaryExpr_4_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_unaryExpr_0_0=RULE_UNARYOPERATION
		{
			newLeafNode(lv_unaryExpr_0_0, grammarAccess.getUnaryExpressionAccess().getUnaryExprUnaryOperationTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"unaryExpr",
        		lv_unaryExpr_0_0, 
        		"UnaryOperation");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPrimaryExprPrimaryExpressionParserRuleCall_1_0()); 
	    }
		lv_primaryExpr_1_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"primaryExpr",
        		lv_primaryExpr_1_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralLiteralParserRuleCall_0_0()); 
	    }
		lv_literal_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_0_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstantExpressionParserRuleCall_1_1()); 
    }
    this_ConstantExpression_2=ruleConstantExpression
    { 
        $current = $this_ConstantExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_ID_0=RULE_ID
    { 
    newLeafNode(this_ID_0, grammarAccess.getLiteralAccess().getIDTerminalRuleCall_0()); 
    }

    |this_STRING_1=RULE_STRING
    { 
    newLeafNode(this_STRING_1, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getFloatingPointLiteralParserRuleCall_2()); 
    }
ruleFloatingPointLiteral
    { 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getLiteralAccess().getRefConstantDefinitionCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleFloatingPointLiteral
entryRuleFloatingPointLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatingPointLiteralRule()); } 
	 iv_ruleFloatingPointLiteral=ruleFloatingPointLiteral 
	 { $current=$iv_ruleFloatingPointLiteral.current.getText(); }  
	 EOF 
;

// Rule FloatingPointLiteral
ruleFloatingPointLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_0_0()); 
    }
    this_signedINT_0=rulesignedINT    {
		$current.merge(this_signedINT_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPointLiteralAccess().getFullStopKeyword_0_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_0_2()); 
    }
    this_signedINT_2=rulesignedINT    {
		$current.merge(this_signedINT_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
    { 
        newCompositeNode(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_0_3()); 
    }
    this_Exponent_3=ruleExponent    {
		$current.merge(this_Exponent_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(    this_FDsymbol_4=RULE_FDSYMBOL    {
		$current.merge(this_FDsymbol_4);
    }

    { 
    newLeafNode(this_FDsymbol_4, grammarAccess.getFloatingPointLiteralAccess().getFDsymbolTerminalRuleCall_0_4()); 
    }
)?)
    |(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatingPointLiteralAccess().getFullStopKeyword_1_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_1_1()); 
    }
    this_signedINT_6=rulesignedINT    {
		$current.merge(this_signedINT_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+(
    { 
        newCompositeNode(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_1_2()); 
    }
    this_Exponent_7=ruleExponent    {
		$current.merge(this_Exponent_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(    this_FDsymbol_8=RULE_FDSYMBOL    {
		$current.merge(this_FDsymbol_8);
    }

    { 
    newLeafNode(this_FDsymbol_8, grammarAccess.getFloatingPointLiteralAccess().getFDsymbolTerminalRuleCall_1_3()); 
    }
)?)
    |((
    { 
        newCompositeNode(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_2_0()); 
    }
    this_signedINT_9=rulesignedINT    {
		$current.merge(this_signedINT_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    { 
        newCompositeNode(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_2_1()); 
    }
    this_Exponent_10=ruleExponent    {
		$current.merge(this_Exponent_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_FDsymbol_11=RULE_FDSYMBOL    {
		$current.merge(this_FDsymbol_11);
    }

    { 
    newLeafNode(this_FDsymbol_11, grammarAccess.getFloatingPointLiteralAccess().getFDsymbolTerminalRuleCall_2_2()); 
    }
)?)
    |((
    { 
        newCompositeNode(grammarAccess.getFloatingPointLiteralAccess().getSignedINTParserRuleCall_3_0()); 
    }
    this_signedINT_12=rulesignedINT    {
		$current.merge(this_signedINT_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+(
    { 
        newCompositeNode(grammarAccess.getFloatingPointLiteralAccess().getExponentParserRuleCall_3_1()); 
    }
    this_Exponent_13=ruleExponent    {
		$current.merge(this_Exponent_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(    this_FDsymbol_14=RULE_FDSYMBOL    {
		$current.merge(this_FDsymbol_14);
    }

    { 
    newLeafNode(this_FDsymbol_14, grammarAccess.getFloatingPointLiteralAccess().getFDsymbolTerminalRuleCall_3_2()); 
    }
)?))
    ;





// Entry rule entryRuleExponent
entryRuleExponent returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExponentRule()); } 
	 iv_ruleExponent=ruleExponent 
	 { $current=$iv_ruleExponent.current.getText(); }  
	 EOF 
;

// Rule Exponent
ruleExponent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_0()); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_1()); 
    }
)(    this_AdditiveOperation_2=RULE_ADDITIVEOPERATION    {
		$current.merge(this_AdditiveOperation_2);
    }

    { 
    newLeafNode(this_AdditiveOperation_2, grammarAccess.getExponentAccess().getAdditiveOperationTerminalRuleCall_1()); 
    }
)?(    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getExponentAccess().getINTTerminalRuleCall_2()); 
    }
)+)
    ;





// Rule TypeQualifier
ruleTypeQualifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='const' 
	{
        $current = grammarAccess.getTypeQualifierAccess().getConstEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeQualifierAccess().getConstEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='volatile' 
	{
        $current = grammarAccess.getTypeQualifierAccess().getVolatileEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeQualifierAccess().getVolatileEnumLiteralDeclaration_1()); 
    }
));



// Rule TypeSpecifier
ruleTypeSpecifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='void' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getVoidEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeSpecifierAccess().getVoidEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='char' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getCharEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeSpecifierAccess().getCharEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='short' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getShortEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTypeSpecifierAccess().getShortEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='int' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getIntEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTypeSpecifierAccess().getIntEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='long' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getLongEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTypeSpecifierAccess().getLongEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='float' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getFloatEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTypeSpecifierAccess().getFloatEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='double' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getDoubleEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getTypeSpecifierAccess().getDoubleEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='signed' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getSignedEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getTypeSpecifierAccess().getSignedEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='unsigned' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUnsignedEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getTypeSpecifierAccess().getUnsignedEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='string' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getStringEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getTypeSpecifierAccess().getStringEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='int8_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getInt8_tEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getTypeSpecifierAccess().getInt8_tEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='uint8_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUint8_tEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getTypeSpecifierAccess().getUint8_tEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='int16_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getInt16_tEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getTypeSpecifierAccess().getInt16_tEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='uint16_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUint16_tEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getTypeSpecifierAccess().getUint16_tEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='int32_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getInt32_tEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getTypeSpecifierAccess().getInt32_tEnumLiteralDeclaration_14()); 
    }
)
    |(	enumLiteral_15='uint32_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUint32_tEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getTypeSpecifierAccess().getUint32_tEnumLiteralDeclaration_15()); 
    }
)
    |(	enumLiteral_16='int64_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getInt64_tEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getTypeSpecifierAccess().getInt64_tEnumLiteralDeclaration_16()); 
    }
)
    |(	enumLiteral_17='uint64_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUint64_tEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getTypeSpecifierAccess().getUint64_tEnumLiteralDeclaration_17()); 
    }
)
    |(	enumLiteral_18='intptr_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getIntptr_tEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getTypeSpecifierAccess().getIntptr_tEnumLiteralDeclaration_18()); 
    }
)
    |(	enumLiteral_19='uintptr_t' 
	{
        $current = grammarAccess.getTypeSpecifierAccess().getUintptr_tEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getTypeSpecifierAccess().getUintptr_tEnumLiteralDeclaration_19()); 
    }
));



// Rule ParameterQualifier
ruleParameterQualifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='in' 
	{
        $current = grammarAccess.getParameterQualifierAccess().getInEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getParameterQualifierAccess().getInEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='out' 
	{
        $current = grammarAccess.getParameterQualifierAccess().getOutEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getParameterQualifierAccess().getOutEnumLiteralDeclaration_1()); 
    }
));



RULE_INCLUDELIB : '<' RULE_ID '.' RULE_ID '>';

RULE_BOOLEAN : ('true'|'false');

RULE_SHIFTOPERATION : ('<<'|'>>');

RULE_ADDITIVEOPERATION : ('+'|'-');

RULE_MULOPERATION : ('*'|'/'|'%');

RULE_UNARYOPERATION : ('&'|'*'|'+'|'-'|'~'|'!');

RULE_FDSYMBOL : ('f'|'F'|'d'|'D');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


