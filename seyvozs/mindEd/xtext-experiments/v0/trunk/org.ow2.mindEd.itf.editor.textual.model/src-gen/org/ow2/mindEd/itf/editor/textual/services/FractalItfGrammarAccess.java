/*
* generated by Xtext
*/

package org.ow2.mindEd.itf.editor.textual.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FractalItfGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ItfFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ItfFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIncludesIncludeDirectiveParserRuleCall_0_0 = (RuleCall)cIncludesAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConstantConstantDefinitionParserRuleCall_1_0_0 = (RuleCall)cConstantAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTypeTypeDefinitionParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfaceInterfaceDefinitionParserRuleCall_2_0 = (RuleCall)cInterfaceAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Type definition part
		// ItfFile:
		//
		//	includes+=IncludeDirective* (constant+=ConstantDefinition | type+=TypeDefinition)* interface=InterfaceDefinition
		//
		//	";"?;
		public ParserRule getRule() { return rule; }

		//includes+=IncludeDirective* (constant+=ConstantDefinition | type+=TypeDefinition)* interface=InterfaceDefinition ";"?
		public Group getGroup() { return cGroup; }

		//includes+=IncludeDirective*
		public Assignment getIncludesAssignment_0() { return cIncludesAssignment_0; }

		//IncludeDirective
		public RuleCall getIncludesIncludeDirectiveParserRuleCall_0_0() { return cIncludesIncludeDirectiveParserRuleCall_0_0; }

		//(constant+=ConstantDefinition | type+=TypeDefinition)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//constant+=ConstantDefinition
		public Assignment getConstantAssignment_1_0() { return cConstantAssignment_1_0; }

		//ConstantDefinition
		public RuleCall getConstantConstantDefinitionParserRuleCall_1_0_0() { return cConstantConstantDefinitionParserRuleCall_1_0_0; }

		//type+=TypeDefinition
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//TypeDefinition
		public RuleCall getTypeTypeDefinitionParserRuleCall_1_1_0() { return cTypeTypeDefinitionParserRuleCall_1_1_0; }

		//interface=InterfaceDefinition
		public Assignment getInterfaceAssignment_2() { return cInterfaceAssignment_2; }

		//InterfaceDefinition
		public RuleCall getInterfaceInterfaceDefinitionParserRuleCall_2_0() { return cInterfaceInterfaceDefinitionParserRuleCall_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cTypedefSpecificationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cStructOrUnionSpecificationParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cEnumSpecificationParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TypeDefinition:
		//
		//	(TypedefSpecification | StructOrUnionSpecification | EnumSpecification) ";";
		public ParserRule getRule() { return rule; }

		//(TypedefSpecification | StructOrUnionSpecification | EnumSpecification) ";"
		public Group getGroup() { return cGroup; }

		//TypedefSpecification | StructOrUnionSpecification | EnumSpecification
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//TypedefSpecification
		public RuleCall getTypedefSpecificationParserRuleCall_0_0() { return cTypedefSpecificationParserRuleCall_0_0; }

		//StructOrUnionSpecification
		public RuleCall getStructOrUnionSpecificationParserRuleCall_0_1() { return cStructOrUnionSpecificationParserRuleCall_0_1; }

		//EnumSpecification
		public RuleCall getEnumSpecificationParserRuleCall_0_2() { return cEnumSpecificationParserRuleCall_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class TypedefSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedefSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQualifedTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0 = (RuleCall)cQualifedTypeAssignment_1.eContents().get(0);
		private final Assignment cDecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecDeclaratorsParserRuleCall_2_0 = (RuleCall)cDecAssignment_2.eContents().get(0);
		
		//TypedefSpecification:
		//
		//	"typedef" qualifedType=QualifiedTypeSpecification dec=Declarators;
		public ParserRule getRule() { return rule; }

		//"typedef" qualifedType=QualifiedTypeSpecification dec=Declarators
		public Group getGroup() { return cGroup; }

		//"typedef"
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }

		//qualifedType=QualifiedTypeSpecification
		public Assignment getQualifedTypeAssignment_1() { return cQualifedTypeAssignment_1; }

		//QualifiedTypeSpecification
		public RuleCall getQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0() { return cQualifedTypeQualifiedTypeSpecificationParserRuleCall_1_0; }

		//dec=Declarators
		public Assignment getDecAssignment_2() { return cDecAssignment_2; }

		//Declarators
		public RuleCall getDecDeclaratorsParserRuleCall_2_0() { return cDecDeclaratorsParserRuleCall_2_0; }
	}

	public class QualifiedTypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedTypeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeQualifierTypeQualifierEnumRuleCall_0_0 = (RuleCall)cTypeQualifierAssignment_0.eContents().get(0);
		private final Assignment cTypeSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecTypeSpecificationParserRuleCall_1_0 = (RuleCall)cTypeSpecAssignment_1.eContents().get(0);
		
		//QualifiedTypeSpecification:
		//
		//	typeQualifier+=TypeQualifier* typeSpec=TypeSpecification;
		public ParserRule getRule() { return rule; }

		//typeQualifier+=TypeQualifier* typeSpec=TypeSpecification
		public Group getGroup() { return cGroup; }

		//typeQualifier+=TypeQualifier*
		public Assignment getTypeQualifierAssignment_0() { return cTypeQualifierAssignment_0; }

		//TypeQualifier
		public RuleCall getTypeQualifierTypeQualifierEnumRuleCall_0_0() { return cTypeQualifierTypeQualifierEnumRuleCall_0_0; }

		//typeSpec=TypeSpecification
		public Assignment getTypeSpecAssignment_1() { return cTypeSpecAssignment_1; }

		//TypeSpecification
		public RuleCall getTypeSpecTypeSpecificationParserRuleCall_1_0() { return cTypeSpecTypeSpecificationParserRuleCall_1_0; }
	}

	public class TypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeDefNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefNameTypedefNameParserRuleCall_0_0 = (RuleCall)cTypeDefNameAssignment_0.eContents().get(0);
		private final RuleCall cStructOrUnionSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumSpecificationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cTypeSpecifierAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTypeSpecifierTypeSpecifierEnumRuleCall_3_0 = (RuleCall)cTypeSpecifierAssignment_3.eContents().get(0);
		
		//TypeSpecification:
		//
		//	typeDefName=TypedefName | StructOrUnionSpecification | EnumSpecification | typeSpecifier+=TypeSpecifier+;
		public ParserRule getRule() { return rule; }

		//typeDefName=TypedefName | StructOrUnionSpecification | EnumSpecification | typeSpecifier+=TypeSpecifier+
		public Alternatives getAlternatives() { return cAlternatives; }

		//typeDefName=TypedefName
		public Assignment getTypeDefNameAssignment_0() { return cTypeDefNameAssignment_0; }

		//TypedefName
		public RuleCall getTypeDefNameTypedefNameParserRuleCall_0_0() { return cTypeDefNameTypedefNameParserRuleCall_0_0; }

		//StructOrUnionSpecification
		public RuleCall getStructOrUnionSpecificationParserRuleCall_1() { return cStructOrUnionSpecificationParserRuleCall_1; }

		//EnumSpecification
		public RuleCall getEnumSpecificationParserRuleCall_2() { return cEnumSpecificationParserRuleCall_2; }

		//typeSpecifier+=TypeSpecifier+
		public Assignment getTypeSpecifierAssignment_3() { return cTypeSpecifierAssignment_3; }

		//TypeSpecifier
		public RuleCall getTypeSpecifierTypeSpecifierEnumRuleCall_3_0() { return cTypeSpecifierTypeSpecifierEnumRuleCall_3_0; }
	}

	public class TypedefNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedefName");
		private final RuleCall cQualifiedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypedefName:
		//
		//	QualifiedName;
		public ParserRule getRule() { return rule; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall() { return cQualifiedNameParserRuleCall; }
	}

	public class StructOrUnionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructOrUnionSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructOrUnionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructorUnionReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StructOrUnionSpecification:
		//
		//	StructOrUnionDefinition | StructorUnionReference;
		public ParserRule getRule() { return rule; }

		//StructOrUnionDefinition | StructorUnionReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//StructOrUnionDefinition
		public RuleCall getStructOrUnionDefinitionParserRuleCall_0() { return cStructOrUnionDefinitionParserRuleCall_0; }

		//StructorUnionReference
		public RuleCall getStructorUnionReferenceParserRuleCall_1() { return cStructorUnionReferenceParserRuleCall_1; }
	}

	public class StructOrUnionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructOrUnionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStructStructOrUnionParserRuleCall_0_0 = (RuleCall)cStructAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStructMemberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStructMemberStructMemberParserRuleCall_3_0 = (RuleCall)cStructMemberAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructOrUnionDefinition:
		//
		//	struct=StructOrUnion id=ID? "{" structMember+=StructMember* "}";
		public ParserRule getRule() { return rule; }

		//struct=StructOrUnion id=ID? "{" structMember+=StructMember* "}"
		public Group getGroup() { return cGroup; }

		//struct=StructOrUnion
		public Assignment getStructAssignment_0() { return cStructAssignment_0; }

		//StructOrUnion
		public RuleCall getStructStructOrUnionParserRuleCall_0_0() { return cStructStructOrUnionParserRuleCall_0_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//structMember+=StructMember*
		public Assignment getStructMemberAssignment_3() { return cStructMemberAssignment_3; }

		//StructMember
		public RuleCall getStructMemberStructMemberParserRuleCall_3_0() { return cStructMemberStructMemberParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StructorUnionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructorUnionReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStructStructOrUnionParserRuleCall_0_0 = (RuleCall)cStructAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//StructorUnionReference:
		//
		//	struct=StructOrUnion id=ID;
		public ParserRule getRule() { return rule; }

		//struct=StructOrUnion id=ID
		public Group getGroup() { return cGroup; }

		//struct=StructOrUnion
		public Assignment getStructAssignment_0() { return cStructAssignment_0; }

		//StructOrUnion
		public RuleCall getStructStructOrUnionParserRuleCall_0_0() { return cStructStructOrUnionParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}

	public class StructOrUnionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructOrUnion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//StructOrUnion:
		//
		//	"struct" | "union";
		public ParserRule getRule() { return rule; }

		//"struct" | "union"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }

		//"union"
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }
	}

	public class StructMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cQualTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualTypeQualifiedTypeSpecificationParserRuleCall_1_0 = (RuleCall)cQualTypeAssignment_1.eContents().get(0);
		private final Assignment cDecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecDeclaratorsParserRuleCall_2_0 = (RuleCall)cDecAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstExprConstantExpressionParserRuleCall_3_1_0 = (RuleCall)cConstExprAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructMember:
		//
		//	annotations=Annotations qualType=QualifiedTypeSpecification dec=Declarators (":" constExpr=ConstantExpression)? ";";
		public ParserRule getRule() { return rule; }

		//annotations=Annotations qualType=QualifiedTypeSpecification dec=Declarators (":" constExpr=ConstantExpression)? ";"
		public Group getGroup() { return cGroup; }

		//annotations=Annotations
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//qualType=QualifiedTypeSpecification
		public Assignment getQualTypeAssignment_1() { return cQualTypeAssignment_1; }

		//QualifiedTypeSpecification
		public RuleCall getQualTypeQualifiedTypeSpecificationParserRuleCall_1_0() { return cQualTypeQualifiedTypeSpecificationParserRuleCall_1_0; }

		//dec=Declarators
		public Assignment getDecAssignment_2() { return cDecAssignment_2; }

		//Declarators
		public RuleCall getDecDeclaratorsParserRuleCall_2_0() { return cDecDeclaratorsParserRuleCall_2_0; }

		//(":" constExpr=ConstantExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//constExpr=ConstantExpression
		public Assignment getConstExprAssignment_3_1() { return cConstExprAssignment_3_1; }

		//ConstantExpression
		public RuleCall getConstExprConstantExpressionParserRuleCall_3_1_0() { return cConstExprConstantExpressionParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class EnumSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnumSpecification:
		//
		//	EnumDefinition | EnumReference;
		public ParserRule getRule() { return rule; }

		//EnumDefinition | EnumReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumDefinition
		public RuleCall getEnumDefinitionParserRuleCall_0() { return cEnumDefinitionParserRuleCall_0; }

		//EnumReference
		public RuleCall getEnumReferenceParserRuleCall_1() { return cEnumReferenceParserRuleCall_1; }
	}

	public class EnumDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumMemberListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnumMemberListEnumMemberListParserRuleCall_3_0 = (RuleCall)cEnumMemberListAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumDefinition:
		//
		//	"enum" id=ID? "{" enumMemberList=EnumMemberList "}";
		public ParserRule getRule() { return rule; }

		//"enum" id=ID? "{" enumMemberList=EnumMemberList "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//enumMemberList=EnumMemberList
		public Assignment getEnumMemberListAssignment_3() { return cEnumMemberListAssignment_3; }

		//EnumMemberList
		public RuleCall getEnumMemberListEnumMemberListParserRuleCall_3_0() { return cEnumMemberListEnumMemberListParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//EnumReference:
		//
		//	"enum" id=ID;
		public ParserRule getRule() { return rule; }

		//"enum" id=ID
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}

	public class EnumMemberListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumMemberList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEnumMemberParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEnumMemberAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnumMemberEnumMemberParserRuleCall_1_1_0 = (RuleCall)cEnumMemberAssignment_1_1.eContents().get(0);
		
		//EnumMemberList:
		//
		//	EnumMember ("," enumMember+=EnumMember)*;
		public ParserRule getRule() { return rule; }

		//EnumMember ("," enumMember+=EnumMember)*
		public Group getGroup() { return cGroup; }

		//EnumMember
		public RuleCall getEnumMemberParserRuleCall_0() { return cEnumMemberParserRuleCall_0; }

		//("," enumMember+=EnumMember)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//enumMember+=EnumMember
		public Assignment getEnumMemberAssignment_1_1() { return cEnumMemberAssignment_1_1; }

		//EnumMember
		public RuleCall getEnumMemberEnumMemberParserRuleCall_1_1_0() { return cEnumMemberEnumMemberParserRuleCall_1_1_0; }
	}

	public class EnumMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstExprConstantExpressionParserRuleCall_2_1_0 = (RuleCall)cConstExprAssignment_2_1.eContents().get(0);
		
		//EnumMember:
		//
		//	annotations=Annotations id=ID ("=" constExpr=ConstantExpression)?;
		public ParserRule getRule() { return rule; }

		//annotations=Annotations id=ID ("=" constExpr=ConstantExpression)?
		public Group getGroup() { return cGroup; }

		//annotations=Annotations
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//("=" constExpr=ConstantExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//constExpr=ConstantExpression
		public Assignment getConstExprAssignment_2_1() { return cConstExprAssignment_2_1; }

		//ConstantExpression
		public RuleCall getConstExprConstantExpressionParserRuleCall_2_1_0() { return cConstExprConstantExpressionParserRuleCall_2_1_0; }
	}

	public class DeclaratorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declarators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDecDeclaratorParserRuleCall_0_0 = (RuleCall)cDecAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclaratorListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaratorListDeclaratorParserRuleCall_1_1_0 = (RuleCall)cDeclaratorListAssignment_1_1.eContents().get(0);
		
		//Declarators:
		//
		//	dec=Declarator ("," declaratorList+=Declarator)*;
		public ParserRule getRule() { return rule; }

		//dec=Declarator ("," declaratorList+=Declarator)*
		public Group getGroup() { return cGroup; }

		//dec=Declarator
		public Assignment getDecAssignment_0() { return cDecAssignment_0; }

		//Declarator
		public RuleCall getDecDeclaratorParserRuleCall_0_0() { return cDecDeclaratorParserRuleCall_0_0; }

		//("," declaratorList+=Declarator)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//declaratorList+=Declarator
		public Assignment getDeclaratorListAssignment_1_1() { return cDeclaratorListAssignment_1_1; }

		//Declarator
		public RuleCall getDeclaratorListDeclaratorParserRuleCall_1_1_0() { return cDeclaratorListDeclaratorParserRuleCall_1_1_0; }
	}

	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPointerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPointerPointerSpecificationParserRuleCall_0_0 = (RuleCall)cPointerAssignment_0.eContents().get(0);
		private final Assignment cDcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDcDirectDeclaratorParserRuleCall_1_0 = (RuleCall)cDcAssignment_1.eContents().get(0);
		
		//Declarator:
		//
		//	pointer=PointerSpecification dc=DirectDeclarator;
		public ParserRule getRule() { return rule; }

		//pointer=PointerSpecification dc=DirectDeclarator
		public Group getGroup() { return cGroup; }

		//pointer=PointerSpecification
		public Assignment getPointerAssignment_0() { return cPointerAssignment_0; }

		//PointerSpecification
		public RuleCall getPointerPointerSpecificationParserRuleCall_0_0() { return cPointerPointerSpecificationParserRuleCall_0_0; }

		//dc=DirectDeclarator
		public Assignment getDcAssignment_1() { return cDcAssignment_1; }

		//DirectDeclarator
		public RuleCall getDcDirectDeclaratorParserRuleCall_1_0() { return cDcDirectDeclaratorParserRuleCall_1_0; }
	}

	public class AbstractDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPointerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPointerPointerSpecificationParserRuleCall_0_0 = (RuleCall)cPointerAssignment_0.eContents().get(0);
		private final Assignment cDcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDcAbstractDirectDeclaratorParserRuleCall_1_0 = (RuleCall)cDcAssignment_1.eContents().get(0);
		
		//AbstractDeclarator:
		//
		//	pointer=PointerSpecification dc=AbstractDirectDeclarator?;
		public ParserRule getRule() { return rule; }

		//pointer=PointerSpecification dc=AbstractDirectDeclarator?
		public Group getGroup() { return cGroup; }

		//pointer=PointerSpecification
		public Assignment getPointerAssignment_0() { return cPointerAssignment_0; }

		//PointerSpecification
		public RuleCall getPointerPointerSpecificationParserRuleCall_0_0() { return cPointerPointerSpecificationParserRuleCall_0_0; }

		//dc=AbstractDirectDeclarator?
		public Assignment getDcAssignment_1() { return cDcAssignment_1; }

		//AbstractDirectDeclarator
		public RuleCall getDcAbstractDirectDeclaratorParserRuleCall_1_0() { return cDcAbstractDirectDeclaratorParserRuleCall_1_0; }
	}

	public class PointerSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PointerSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointerSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQualifiedPointerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiedPointerQualified_PointerSpecificationParserRuleCall_1_0 = (RuleCall)cQualifiedPointerAssignment_1.eContents().get(0);
		
		//PointerSpecification:
		//
		//	{PointerSpecification} qualifiedPointer+=Qualified_PointerSpecification*;
		public ParserRule getRule() { return rule; }

		//{PointerSpecification} qualifiedPointer+=Qualified_PointerSpecification*
		public Group getGroup() { return cGroup; }

		//{PointerSpecification}
		public Action getPointerSpecificationAction_0() { return cPointerSpecificationAction_0; }

		//qualifiedPointer+=Qualified_PointerSpecification*
		public Assignment getQualifiedPointerAssignment_1() { return cQualifiedPointerAssignment_1; }

		//Qualified_PointerSpecification
		public RuleCall getQualifiedPointerQualified_PointerSpecificationParserRuleCall_1_0() { return cQualifiedPointerQualified_PointerSpecificationParserRuleCall_1_0; }
	}

	public class Qualified_PointerSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Qualified_PointerSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQualified_PointerSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeQualifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeQualifierTypeQualifierEnumRuleCall_2_0 = (RuleCall)cTypeQualifierAssignment_2.eContents().get(0);
		
		//Qualified_PointerSpecification:
		//
		//	{Qualified_PointerSpecification} "*" typeQualifier+=TypeQualifier*;
		public ParserRule getRule() { return rule; }

		//{Qualified_PointerSpecification} "*" typeQualifier+=TypeQualifier*
		public Group getGroup() { return cGroup; }

		//{Qualified_PointerSpecification}
		public Action getQualified_PointerSpecificationAction_0() { return cQualified_PointerSpecificationAction_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//typeQualifier+=TypeQualifier*
		public Assignment getTypeQualifierAssignment_2() { return cTypeQualifierAssignment_2; }

		//TypeQualifier
		public RuleCall getTypeQualifierTypeQualifierEnumRuleCall_2_0() { return cTypeQualifierTypeQualifierEnumRuleCall_2_0; }
	}

	public class DirectDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cDecAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cDecDeclaratorParserRuleCall_0_1_1_0 = (RuleCall)cDecAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArraySpecificationParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		
		//DirectDeclarator:
		//
		//	(id=ID | "(" dec=Declarator ")") array+=ArraySpecification*;
		public ParserRule getRule() { return rule; }

		//(id=ID | "(" dec=Declarator ")") array+=ArraySpecification*
		public Group getGroup() { return cGroup; }

		//id=ID | "(" dec=Declarator ")"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//id=ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_0() { return cIdIDTerminalRuleCall_0_0_0; }

		//"(" dec=Declarator ")"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }

		//dec=Declarator
		public Assignment getDecAssignment_0_1_1() { return cDecAssignment_0_1_1; }

		//Declarator
		public RuleCall getDecDeclaratorParserRuleCall_0_1_1_0() { return cDecDeclaratorParserRuleCall_0_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }

		//array+=ArraySpecification*
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }

		//ArraySpecification
		public RuleCall getArrayArraySpecificationParserRuleCall_1_0() { return cArrayArraySpecificationParserRuleCall_1_0; }
	}

	public class AbstractDirectDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDirectDeclarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDecAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDecAbstractDeclaratorParserRuleCall_0_1_0 = (RuleCall)cDecAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cArraysAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cArraysArraySpecificationParserRuleCall_0_3_0 = (RuleCall)cArraysAssignment_0_3.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArrayArraySpecificationParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		
		//AbstractDirectDeclarator:
		//
		//	"(" dec=AbstractDeclarator ")" arrays+=ArraySpecification* | array+=ArraySpecification+;
		public ParserRule getRule() { return rule; }

		//"(" dec=AbstractDeclarator ")" arrays+=ArraySpecification* | array+=ArraySpecification+
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" dec=AbstractDeclarator ")" arrays+=ArraySpecification*
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//dec=AbstractDeclarator
		public Assignment getDecAssignment_0_1() { return cDecAssignment_0_1; }

		//AbstractDeclarator
		public RuleCall getDecAbstractDeclaratorParserRuleCall_0_1_0() { return cDecAbstractDeclaratorParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//arrays+=ArraySpecification*
		public Assignment getArraysAssignment_0_3() { return cArraysAssignment_0_3; }

		//ArraySpecification
		public RuleCall getArraysArraySpecificationParserRuleCall_0_3_0() { return cArraysArraySpecificationParserRuleCall_0_3_0; }

		//array+=ArraySpecification+
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }

		//ArraySpecification
		public RuleCall getArrayArraySpecificationParserRuleCall_1_0() { return cArrayArraySpecificationParserRuleCall_1_0; }
	}

	public class ArraySpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArraySpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstExprConstantExpressionParserRuleCall_1_0 = (RuleCall)cConstExprAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArraySpecification:
		//
		//	"[" constExpr=ConstantExpression? "]";
		public ParserRule getRule() { return rule; }

		//"[" constExpr=ConstantExpression? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//constExpr=ConstantExpression?
		public Assignment getConstExprAssignment_1() { return cConstExprAssignment_1; }

		//ConstantExpression
		public RuleCall getConstExprConstantExpressionParserRuleCall_1_0() { return cConstExprConstantExpressionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// Interface definition part
		// QualifiedName:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ConstantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprConstantExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//ConstantDefinition:
		//
		//	"#define" id=ID expr=ConstantExpression?;
		public ParserRule getRule() { return rule; }

		//"#define" id=ID expr=ConstantExpression?
		public Group getGroup() { return cGroup; }

		//"#define"
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//expr=ConstantExpression?
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//ConstantExpression
		public RuleCall getExprConstantExpressionParserRuleCall_2_0() { return cExprConstantExpressionParserRuleCall_2_0; }
	}

	public class InterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cUnmanagedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFqn2Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFqn2QualifiedNameParserRuleCall_4_1_0 = (RuleCall)cFqn2Assignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMethodDefAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodDefMethodDefinitionParserRuleCall_6_0 = (RuleCall)cMethodDefAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InterfaceDefinition:
		//
		//	annotations=Annotations "interface" "unmanaged"? name=QualifiedName (":" fqn2=QualifiedName)? "{"
		//
		//	methodDef+=MethodDefinition* "}";
		public ParserRule getRule() { return rule; }

		//annotations=Annotations "interface" "unmanaged"? name=QualifiedName (":" fqn2=QualifiedName)? "{"
		//
		//methodDef+=MethodDefinition* "}"
		public Group getGroup() { return cGroup; }

		//annotations=Annotations
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//"unmanaged"?
		public Keyword getUnmanagedKeyword_2() { return cUnmanagedKeyword_2; }

		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }

		//(":" fqn2=QualifiedName)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//fqn2=QualifiedName
		public Assignment getFqn2Assignment_4_1() { return cFqn2Assignment_4_1; }

		//QualifiedName
		public RuleCall getFqn2QualifiedNameParserRuleCall_4_1_0() { return cFqn2QualifiedNameParserRuleCall_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//methodDef+=MethodDefinition*
		public Assignment getMethodDefAssignment_6() { return cMethodDefAssignment_6; }

		//MethodDefinition
		public RuleCall getMethodDefMethodDefinitionParserRuleCall_6_0() { return cMethodDefMethodDefinitionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MethodDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cQualifiedTypeSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0 = (RuleCall)cQualifiedTypeSpecAssignment_1.eContents().get(0);
		private final Assignment cPointerSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPointerSpecificationPointerSpecificationParserRuleCall_2_0 = (RuleCall)cPointerSpecificationAssignment_2.eContents().get(0);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cVoidKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParameterListAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParameterListParameterListParserRuleCall_4_1_1_0 = (RuleCall)cParameterListAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MethodDefinition:
		//
		//	annotations=Annotations qualifiedTypeSpec=QualifiedTypeSpecification pointerSpecification=PointerSpecification id=ID
		//
		//	("(" "void"? ")" | "(" ParameterList=ParameterList ")") ";";
		public ParserRule getRule() { return rule; }

		//annotations=Annotations qualifiedTypeSpec=QualifiedTypeSpecification pointerSpecification=PointerSpecification id=ID
		//
		//("(" "void"? ")" | "(" ParameterList=ParameterList ")") ";"
		public Group getGroup() { return cGroup; }

		//annotations=Annotations
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//qualifiedTypeSpec=QualifiedTypeSpecification
		public Assignment getQualifiedTypeSpecAssignment_1() { return cQualifiedTypeSpecAssignment_1; }

		//QualifiedTypeSpecification
		public RuleCall getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0() { return cQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_1_0; }

		//pointerSpecification=PointerSpecification
		public Assignment getPointerSpecificationAssignment_2() { return cPointerSpecificationAssignment_2; }

		//PointerSpecification
		public RuleCall getPointerSpecificationPointerSpecificationParserRuleCall_2_0() { return cPointerSpecificationPointerSpecificationParserRuleCall_2_0; }

		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//"(" "void"? ")" | "(" ParameterList=ParameterList ")"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"(" "void"? ")"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }

		//"void"?
		public Keyword getVoidKeyword_4_0_1() { return cVoidKeyword_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_0_2() { return cRightParenthesisKeyword_4_0_2; }

		//"(" ParameterList=ParameterList ")"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1_0() { return cLeftParenthesisKeyword_4_1_0; }

		//ParameterList=ParameterList
		public Assignment getParameterListAssignment_4_1_1() { return cParameterListAssignment_4_1_1; }

		//ParameterList
		public RuleCall getParameterListParameterListParserRuleCall_4_1_1_0() { return cParameterListParameterListParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_1_2() { return cRightParenthesisKeyword_4_1_2; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamParameterParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//ParameterList:
		//
		//	param=Parameter ("," params+=Parameter)* ("," "...")?;
		public ParserRule getRule() { return rule; }

		//param=Parameter ("," params+=Parameter)* ("," "...")?
		public Group getGroup() { return cGroup; }

		//param=Parameter
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//Parameter
		public RuleCall getParamParameterParserRuleCall_0_0() { return cParamParameterParserRuleCall_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_1_0() { return cParamsParameterParserRuleCall_1_1_0; }

		//("," "...")?
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cParameterQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterQualifierParameterQualifierEnumRuleCall_1_0 = (RuleCall)cParameterQualifierAssignment_1.eContents().get(0);
		private final Assignment cQualifiedTypeSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_2_0 = (RuleCall)cQualifiedTypeSpecAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cDecAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cDecDeclaratorParserRuleCall_3_0_0 = (RuleCall)cDecAssignment_3_0.eContents().get(0);
		private final Assignment cAbsDecAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cAbsDecAbstractDeclaratorParserRuleCall_3_1_0 = (RuleCall)cAbsDecAssignment_3_1.eContents().get(0);
		
		//Parameter:
		//
		//	annotations=Annotations ParameterQualifier+=ParameterQualifier* qualifiedTypeSpec=QualifiedTypeSpecification
		//
		//	(dec=Declarator | absDec=AbstractDeclarator);
		public ParserRule getRule() { return rule; }

		//annotations=Annotations ParameterQualifier+=ParameterQualifier* qualifiedTypeSpec=QualifiedTypeSpecification
		//
		//(dec=Declarator | absDec=AbstractDeclarator)
		public Group getGroup() { return cGroup; }

		//annotations=Annotations
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//ParameterQualifier+=ParameterQualifier*
		public Assignment getParameterQualifierAssignment_1() { return cParameterQualifierAssignment_1; }

		//ParameterQualifier
		public RuleCall getParameterQualifierParameterQualifierEnumRuleCall_1_0() { return cParameterQualifierParameterQualifierEnumRuleCall_1_0; }

		//qualifiedTypeSpec=QualifiedTypeSpecification
		public Assignment getQualifiedTypeSpecAssignment_2() { return cQualifiedTypeSpecAssignment_2; }

		//QualifiedTypeSpecification
		public RuleCall getQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_2_0() { return cQualifiedTypeSpecQualifiedTypeSpecificationParserRuleCall_2_0; }

		//dec=Declarator | absDec=AbstractDeclarator
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//dec=Declarator
		public Assignment getDecAssignment_3_0() { return cDecAssignment_3_0; }

		//Declarator
		public RuleCall getDecDeclaratorParserRuleCall_3_0_0() { return cDecDeclaratorParserRuleCall_3_0_0; }

		//absDec=AbstractDeclarator
		public Assignment getAbsDecAssignment_3_1() { return cAbsDecAssignment_3_1; }

		//AbstractDeclarator
		public RuleCall getAbsDecAbstractDeclaratorParserRuleCall_3_1_0() { return cAbsDecAbstractDeclaratorParserRuleCall_3_1_0; }
	}

	public class IncludeDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportedURIAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cImportedURISTRINGTerminalRuleCall_1_0_0 = (RuleCall)cImportedURIAssignment_1_0.eContents().get(0);
		private final Assignment cIncludeIDAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cIncludeIDIncludeLibTerminalRuleCall_1_1_0 = (RuleCall)cIncludeIDAssignment_1_1.eContents().get(0);
		
		//IncludeDirective:
		//
		//	"#include" (importedURI=STRING | includeID=IncludeLib);
		public ParserRule getRule() { return rule; }

		//"#include" (importedURI=STRING | includeID=IncludeLib)
		public Group getGroup() { return cGroup; }

		//"#include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//importedURI=STRING | includeID=IncludeLib
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//importedURI=STRING
		public Assignment getImportedURIAssignment_1_0() { return cImportedURIAssignment_1_0; }

		//STRING
		public RuleCall getImportedURISTRINGTerminalRuleCall_1_0_0() { return cImportedURISTRINGTerminalRuleCall_1_0_0; }

		//includeID=IncludeLib
		public Assignment getIncludeIDAssignment_1_1() { return cIncludeIDAssignment_1_1; }

		//IncludeLib
		public RuleCall getIncludeIDIncludeLibTerminalRuleCall_1_1_0() { return cIncludeIDIncludeLibTerminalRuleCall_1_1_0; }
	}

	public class AnnotationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		
		//Annotations:
		//
		//	{Annotations} annotations+=Annotation*;
		public ParserRule getRule() { return rule; }

		//{Annotations} annotations+=Annotation*
		public Group getGroup() { return cGroup; }

		//{Annotations}
		public Action getAnnotationsAction_0() { return cAnnotationsAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFqnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFqnQualifiedNameParserRuleCall_1_0 = (RuleCall)cFqnAssignment_1.eContents().get(0);
		private final Assignment cAnnotationParamatersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationParamatersAnnotationParametersParserRuleCall_2_0 = (RuleCall)cAnnotationParamatersAssignment_2.eContents().get(0);
		
		//Annotation:
		//
		//	"@" fqn=QualifiedName annotationParamaters=AnnotationParameters?;
		public ParserRule getRule() { return rule; }

		//"@" fqn=QualifiedName annotationParamaters=AnnotationParameters?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//fqn=QualifiedName
		public Assignment getFqnAssignment_1() { return cFqnAssignment_1; }

		//QualifiedName
		public RuleCall getFqnQualifiedNameParserRuleCall_1_0() { return cFqnQualifiedNameParserRuleCall_1_0; }

		//annotationParamaters=AnnotationParameters?
		public Assignment getAnnotationParamatersAssignment_2() { return cAnnotationParamatersAssignment_2; }

		//AnnotationParameters
		public RuleCall getAnnotationParamatersAnnotationParametersParserRuleCall_2_0() { return cAnnotationParamatersAnnotationParametersParserRuleCall_2_0; }
	}

	public class AnnotationParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnnotationParametersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValuePairAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValuePairAnnotationValuePairsParserRuleCall_2_0_0 = (RuleCall)cValuePairAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueAnnotationValueParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AnnotationParameters:
		//
		//	{AnnotationParameters} "(" (valuePair=AnnotationValuePairs | value=AnnotationValue)? ")";
		public ParserRule getRule() { return rule; }

		//{AnnotationParameters} "(" (valuePair=AnnotationValuePairs | value=AnnotationValue)? ")"
		public Group getGroup() { return cGroup; }

		//{AnnotationParameters}
		public Action getAnnotationParametersAction_0() { return cAnnotationParametersAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(valuePair=AnnotationValuePairs | value=AnnotationValue)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//valuePair=AnnotationValuePairs
		public Assignment getValuePairAssignment_2_0() { return cValuePairAssignment_2_0; }

		//AnnotationValuePairs
		public RuleCall getValuePairAnnotationValuePairsParserRuleCall_2_0_0() { return cValuePairAnnotationValuePairsParserRuleCall_2_0_0; }

		//value=AnnotationValue
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//AnnotationValue
		public RuleCall getValueAnnotationValueParserRuleCall_2_1_0() { return cValueAnnotationValueParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AnnotationValuePairsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationValuePairs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstAnnotationValuePairParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListValueAnnotationValuePairParserRuleCall_1_1_0 = (RuleCall)cListValueAssignment_1_1.eContents().get(0);
		
		//AnnotationValuePairs:
		//
		//	first=AnnotationValuePair ("," listValue+=AnnotationValuePair)*;
		public ParserRule getRule() { return rule; }

		//first=AnnotationValuePair ("," listValue+=AnnotationValuePair)*
		public Group getGroup() { return cGroup; }

		//first=AnnotationValuePair
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//AnnotationValuePair
		public RuleCall getFirstAnnotationValuePairParserRuleCall_0_0() { return cFirstAnnotationValuePairParserRuleCall_0_0; }

		//("," listValue+=AnnotationValuePair)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//listValue+=AnnotationValuePair
		public Assignment getListValueAssignment_1_1() { return cListValueAssignment_1_1; }

		//AnnotationValuePair
		public RuleCall getListValueAnnotationValuePairParserRuleCall_1_1_0() { return cListValueAnnotationValuePairParserRuleCall_1_1_0; }
	}

	public class AnnotationValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAnnotationValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AnnotationValuePair:
		//
		//	id=ID "=" value=AnnotationValue;
		public ParserRule getRule() { return rule; }

		//id=ID "=" value=AnnotationValue
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=AnnotationValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AnnotationValue
		public RuleCall getValueAnnotationValueParserRuleCall_2_0() { return cValueAnnotationValueParserRuleCall_2_0; }
	}

	public class AnnotationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignedINTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAnnotationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cArrayAnnotationValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSTRINGTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//AnnotationValue:
		//
		//	signedINT | "null" | Boolean | ID | Annotation | ArrayAnnotationValue | STRING;
		public ParserRule getRule() { return rule; }

		//signedINT | "null" | Boolean | ID | Annotation | ArrayAnnotationValue | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//signedINT
		public RuleCall getSignedINTParserRuleCall_0() { return cSignedINTParserRuleCall_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }

		//Boolean
		public RuleCall getBooleanTerminalRuleCall_2() { return cBooleanTerminalRuleCall_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//Annotation
		public RuleCall getAnnotationParserRuleCall_4() { return cAnnotationParserRuleCall_4; }

		//ArrayAnnotationValue
		public RuleCall getArrayAnnotationValueParserRuleCall_5() { return cArrayAnnotationValueParserRuleCall_5; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_6() { return cSTRINGTerminalRuleCall_6; }
	}

	public class ArrayAnnotationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayAnnotationValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFirstValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFirstValueAnnotationValueParserRuleCall_1_0_0 = (RuleCall)cFirstValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValuesAnnotationValueParserRuleCall_1_1_1_0 = (RuleCall)cValuesAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayAnnotationValue:
		//
		//	"{" (firstValue=AnnotationValue ("," values+=AnnotationValue)*)? "}";
		public ParserRule getRule() { return rule; }

		//"{" (firstValue=AnnotationValue ("," values+=AnnotationValue)*)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//(firstValue=AnnotationValue ("," values+=AnnotationValue)*)?
		public Group getGroup_1() { return cGroup_1; }

		//firstValue=AnnotationValue
		public Assignment getFirstValueAssignment_1_0() { return cFirstValueAssignment_1_0; }

		//AnnotationValue
		public RuleCall getFirstValueAnnotationValueParserRuleCall_1_0_0() { return cFirstValueAnnotationValueParserRuleCall_1_0_0; }

		//("," values+=AnnotationValue)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//values+=AnnotationValue
		public Assignment getValuesAssignment_1_1_1() { return cValuesAssignment_1_1_1; }

		//AnnotationValue
		public RuleCall getValuesAnnotationValueParserRuleCall_1_1_1_0() { return cValuesAnnotationValueParserRuleCall_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class SignedINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signedINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveOperationTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//signedINT:
		//
		//	AdditiveOperation? INT;
		public ParserRule getRule() { return rule; }

		//AdditiveOperation? INT
		public Group getGroup() { return cGroup; }

		//AdditiveOperation?
		public RuleCall getAdditiveOperationTerminalRuleCall_0() { return cAdditiveOperationTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantExpression");
		private final RuleCall cLogicalOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConstantExpression:
		//
		//	LogicalOrExpression;
		public ParserRule getRule() { return rule; }

		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall() { return cLogicalOrExpressionParserRuleCall; }
	}

	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExprLogicalAndExpressionParserRuleCall_0_0 = (RuleCall)cLeftExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExprLogicalOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightExprAssignment_1_1.eContents().get(0);
		
		//LogicalOrExpression:
		//
		//	leftExpr=LogicalAndExpression ("||" rightExpr=LogicalOrExpression)?;
		public ParserRule getRule() { return rule; }

		//leftExpr=LogicalAndExpression ("||" rightExpr=LogicalOrExpression)?
		public Group getGroup() { return cGroup; }

		//leftExpr=LogicalAndExpression
		public Assignment getLeftExprAssignment_0() { return cLeftExprAssignment_0; }

		//LogicalAndExpression
		public RuleCall getLeftExprLogicalAndExpressionParserRuleCall_0_0() { return cLeftExprLogicalAndExpressionParserRuleCall_0_0; }

		//("||" rightExpr=LogicalOrExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//rightExpr=LogicalOrExpression
		public Assignment getRightExprAssignment_1_1() { return cRightExprAssignment_1_1; }

		//LogicalOrExpression
		public RuleCall getRightExprLogicalOrExpressionParserRuleCall_1_1_0() { return cRightExprLogicalOrExpressionParserRuleCall_1_1_0; }
	}

	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExprOrExpressionParserRuleCall_0_0 = (RuleCall)cLeftExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExprLogicalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightExprAssignment_1_1.eContents().get(0);
		
		//LogicalAndExpression:
		//
		//	leftExpr=OrExpression ("&&" rightExpr=LogicalAndExpression)?;
		public ParserRule getRule() { return rule; }

		//leftExpr=OrExpression ("&&" rightExpr=LogicalAndExpression)?
		public Group getGroup() { return cGroup; }

		//leftExpr=OrExpression
		public Assignment getLeftExprAssignment_0() { return cLeftExprAssignment_0; }

		//OrExpression
		public RuleCall getLeftExprOrExpressionParserRuleCall_0_0() { return cLeftExprOrExpressionParserRuleCall_0_0; }

		//("&&" rightExpr=LogicalAndExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//rightExpr=LogicalAndExpression
		public Assignment getRightExprAssignment_1_1() { return cRightExprAssignment_1_1; }

		//LogicalAndExpression
		public RuleCall getRightExprLogicalAndExpressionParserRuleCall_1_1_0() { return cRightExprLogicalAndExpressionParserRuleCall_1_1_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExprXorExpressionParserRuleCall_0_0 = (RuleCall)cLeftExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExprOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightExprAssignment_1_1.eContents().get(0);
		
		//OrExpression:
		//
		//	leftExpr=XorExpression ("|" rightExpr=OrExpression)?;
		public ParserRule getRule() { return rule; }

		//leftExpr=XorExpression ("|" rightExpr=OrExpression)?
		public Group getGroup() { return cGroup; }

		//leftExpr=XorExpression
		public Assignment getLeftExprAssignment_0() { return cLeftExprAssignment_0; }

		//XorExpression
		public RuleCall getLeftExprXorExpressionParserRuleCall_0_0() { return cLeftExprXorExpressionParserRuleCall_0_0; }

		//("|" rightExpr=OrExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//rightExpr=OrExpression
		public Assignment getRightExprAssignment_1_1() { return cRightExprAssignment_1_1; }

		//OrExpression
		public RuleCall getRightExprOrExpressionParserRuleCall_1_1_0() { return cRightExprOrExpressionParserRuleCall_1_1_0; }
	}

	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExprAndExpressionParserRuleCall_0_0 = (RuleCall)cLeftExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExprXorExpressionParserRuleCall_1_1_0 = (RuleCall)cRightExprAssignment_1_1.eContents().get(0);
		
		//XorExpression:
		//
		//	leftExpr=AndExpression ("^" rightExpr=XorExpression)?;
		public ParserRule getRule() { return rule; }

		//leftExpr=AndExpression ("^" rightExpr=XorExpression)?
		public Group getGroup() { return cGroup; }

		//leftExpr=AndExpression
		public Assignment getLeftExprAssignment_0() { return cLeftExprAssignment_0; }

		//AndExpression
		public RuleCall getLeftExprAndExpressionParserRuleCall_0_0() { return cLeftExprAndExpressionParserRuleCall_0_0; }

		//("^" rightExpr=XorExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }

		//rightExpr=XorExpression
		public Assignment getRightExprAssignment_1_1() { return cRightExprAssignment_1_1; }

		//XorExpression
		public RuleCall getRightExprXorExpressionParserRuleCall_1_1_0() { return cRightExprXorExpressionParserRuleCall_1_1_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExprShiftExpressionParserRuleCall_0_0 = (RuleCall)cLeftExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExprAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightExprAssignment_1_1.eContents().get(0);
		
		//AndExpression:
		//
		//	leftExpr=ShiftExpression ("&" rightExpr=AndExpression)?;
		public ParserRule getRule() { return rule; }

		//leftExpr=ShiftExpression ("&" rightExpr=AndExpression)?
		public Group getGroup() { return cGroup; }

		//leftExpr=ShiftExpression
		public Assignment getLeftExprAssignment_0() { return cLeftExprAssignment_0; }

		//ShiftExpression
		public RuleCall getLeftExprShiftExpressionParserRuleCall_0_0() { return cLeftExprShiftExpressionParserRuleCall_0_0; }

		//("&" rightExpr=AndExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//rightExpr=AndExpression
		public Assignment getRightExprAssignment_1_1() { return cRightExprAssignment_1_1; }

		//AndExpression
		public RuleCall getRightExprAndExpressionParserRuleCall_1_1_0() { return cRightExprAndExpressionParserRuleCall_1_1_0; }
	}

	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExprAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cLeftExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpShiftOperationTerminalRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExprShiftExpressionParserRuleCall_1_1_0 = (RuleCall)cRightExprAssignment_1_1.eContents().get(0);
		
		//ShiftExpression:
		//
		//	leftExpr=AdditiveExpression (op=ShiftOperation rightExpr=ShiftExpression)?;
		public ParserRule getRule() { return rule; }

		//leftExpr=AdditiveExpression (op=ShiftOperation rightExpr=ShiftExpression)?
		public Group getGroup() { return cGroup; }

		//leftExpr=AdditiveExpression
		public Assignment getLeftExprAssignment_0() { return cLeftExprAssignment_0; }

		//AdditiveExpression
		public RuleCall getLeftExprAdditiveExpressionParserRuleCall_0_0() { return cLeftExprAdditiveExpressionParserRuleCall_0_0; }

		//(op=ShiftOperation rightExpr=ShiftExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//op=ShiftOperation
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//ShiftOperation
		public RuleCall getOpShiftOperationTerminalRuleCall_1_0_0() { return cOpShiftOperationTerminalRuleCall_1_0_0; }

		//rightExpr=ShiftExpression
		public Assignment getRightExprAssignment_1_1() { return cRightExprAssignment_1_1; }

		//ShiftExpression
		public RuleCall getRightExprShiftExpressionParserRuleCall_1_1_0() { return cRightExprShiftExpressionParserRuleCall_1_1_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExprMulExpressionParserRuleCall_0_0 = (RuleCall)cLeftExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpAdditiveOperationTerminalRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExprAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightExprAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression:
		//
		//	leftExpr=MulExpression (op=AdditiveOperation rightExpr=AdditiveExpression)?;
		public ParserRule getRule() { return rule; }

		//leftExpr=MulExpression (op=AdditiveOperation rightExpr=AdditiveExpression)?
		public Group getGroup() { return cGroup; }

		//leftExpr=MulExpression
		public Assignment getLeftExprAssignment_0() { return cLeftExprAssignment_0; }

		//MulExpression
		public RuleCall getLeftExprMulExpressionParserRuleCall_0_0() { return cLeftExprMulExpressionParserRuleCall_0_0; }

		//(op=AdditiveOperation rightExpr=AdditiveExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//op=AdditiveOperation
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//AdditiveOperation
		public RuleCall getOpAdditiveOperationTerminalRuleCall_1_0_0() { return cOpAdditiveOperationTerminalRuleCall_1_0_0; }

		//rightExpr=AdditiveExpression
		public Assignment getRightExprAssignment_1_1() { return cRightExprAssignment_1_1; }

		//AdditiveExpression
		public RuleCall getRightExprAdditiveExpressionParserRuleCall_1_1_0() { return cRightExprAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class MulExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MulExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExprCastExpressionParserRuleCall_0_0 = (RuleCall)cLeftExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpMulOperationTerminalRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExprMulExpressionParserRuleCall_1_1_0 = (RuleCall)cRightExprAssignment_1_1.eContents().get(0);
		
		//MulExpression:
		//
		//	leftExpr=CastExpression (op=MulOperation rightExpr=MulExpression)?;
		public ParserRule getRule() { return rule; }

		//leftExpr=CastExpression (op=MulOperation rightExpr=MulExpression)?
		public Group getGroup() { return cGroup; }

		//leftExpr=CastExpression
		public Assignment getLeftExprAssignment_0() { return cLeftExprAssignment_0; }

		//CastExpression
		public RuleCall getLeftExprCastExpressionParserRuleCall_0_0() { return cLeftExprCastExpressionParserRuleCall_0_0; }

		//(op=MulOperation rightExpr=MulExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//op=MulOperation
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//MulOperation
		public RuleCall getOpMulOperationTerminalRuleCall_1_0_0() { return cOpMulOperationTerminalRuleCall_1_0_0; }

		//rightExpr=MulExpression
		public Assignment getRightExprAssignment_1_1() { return cRightExprAssignment_1_1; }

		//MulExpression
		public RuleCall getRightExprMulExpressionParserRuleCall_1_1_0() { return cRightExprMulExpressionParserRuleCall_1_1_0; }
	}

	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeQualifiedTypeSpecificationParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExprAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExprCastExpressionParserRuleCall_0_3_0 = (RuleCall)cExprAssignment_0_3.eContents().get(0);
		private final Assignment cUnaryExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnaryExprUnaryExpressionParserRuleCall_1_0 = (RuleCall)cUnaryExprAssignment_1.eContents().get(0);
		
		//CastExpression:
		//
		//	"(" type=QualifiedTypeSpecification ")" expr=CastExpression | unaryExpr=UnaryExpression;
		public ParserRule getRule() { return rule; }

		//"(" type=QualifiedTypeSpecification ")" expr=CastExpression | unaryExpr=UnaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" type=QualifiedTypeSpecification ")" expr=CastExpression
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//type=QualifiedTypeSpecification
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//QualifiedTypeSpecification
		public RuleCall getTypeQualifiedTypeSpecificationParserRuleCall_0_1_0() { return cTypeQualifiedTypeSpecificationParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//expr=CastExpression
		public Assignment getExprAssignment_0_3() { return cExprAssignment_0_3; }

		//CastExpression
		public RuleCall getExprCastExpressionParserRuleCall_0_3_0() { return cExprCastExpressionParserRuleCall_0_3_0; }

		//unaryExpr=UnaryExpression
		public Assignment getUnaryExprAssignment_1() { return cUnaryExprAssignment_1; }

		//UnaryExpression
		public RuleCall getUnaryExprUnaryExpressionParserRuleCall_1_0() { return cUnaryExprUnaryExpressionParserRuleCall_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryExprUnaryOperationTerminalRuleCall_0_0 = (RuleCall)cUnaryExprAssignment_0.eContents().get(0);
		private final Assignment cPrimaryExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryExprPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cPrimaryExprAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//
		//	unaryExpr=UnaryOperation? primaryExpr=PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//unaryExpr=UnaryOperation? primaryExpr=PrimaryExpression
		public Group getGroup() { return cGroup; }

		//unaryExpr=UnaryOperation?
		public Assignment getUnaryExprAssignment_0() { return cUnaryExprAssignment_0; }

		//UnaryOperation
		public RuleCall getUnaryExprUnaryOperationTerminalRuleCall_0_0() { return cUnaryExprUnaryOperationTerminalRuleCall_0_0; }

		//primaryExpr=PrimaryExpression
		public Assignment getPrimaryExprAssignment_1() { return cPrimaryExprAssignment_1; }

		//PrimaryExpression
		public RuleCall getPrimaryExprPrimaryExpressionParserRuleCall_1_0() { return cPrimaryExprPrimaryExpressionParserRuleCall_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConstantExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression:
		//
		//	literal=Literal | "(" ConstantExpression ")";
		public ParserRule getRule() { return rule; }

		//literal=Literal | "(" ConstantExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }

		//"(" ConstantExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_1_1() { return cConstantExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatingPointLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cRefConstantDefinitionCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefConstantDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cRefConstantDefinitionCrossReference_3_0.eContents().get(1);
		
		//Literal:
		//
		//	ID | STRING | FloatingPointLiteral | ref=[ConstantDefinition];
		public ParserRule getRule() { return rule; }

		//ID | STRING | FloatingPointLiteral | ref=[ConstantDefinition]
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//FloatingPointLiteral
		public RuleCall getFloatingPointLiteralParserRuleCall_2() { return cFloatingPointLiteralParserRuleCall_2; }

		//ref=[ConstantDefinition]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//[ConstantDefinition]
		public CrossReference getRefConstantDefinitionCrossReference_3_0() { return cRefConstantDefinitionCrossReference_3_0; }

		//ID
		public RuleCall getRefConstantDefinitionIDTerminalRuleCall_3_0_1() { return cRefConstantDefinitionIDTerminalRuleCall_3_0_1; }
	}

	public class FloatingPointLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatingPointLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSignedINTParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cSignedINTParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExponentParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cFDsymbolTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSignedINTParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cExponentParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cFDsymbolTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cSignedINTParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cExponentParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cFDsymbolTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cSignedINTParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cExponentParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cFDsymbolTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//FloatingPointLiteral:
		//
		//	signedINT+ "." signedINT* Exponent? FDsymbol? | "." signedINT+ Exponent? FDsymbol? | signedINT+ Exponent FDsymbol? |
		//
		//	signedINT+ Exponent? FDsymbol?;
		public ParserRule getRule() { return rule; }

		//signedINT+ "." signedINT* Exponent? FDsymbol? | "." signedINT+ Exponent? FDsymbol? | signedINT+ Exponent FDsymbol? |
		//
		//signedINT+ Exponent? FDsymbol?
		public Alternatives getAlternatives() { return cAlternatives; }

		//signedINT+ "." signedINT* Exponent? FDsymbol?
		public Group getGroup_0() { return cGroup_0; }

		//signedINT+
		public RuleCall getSignedINTParserRuleCall_0_0() { return cSignedINTParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//signedINT*
		public RuleCall getSignedINTParserRuleCall_0_2() { return cSignedINTParserRuleCall_0_2; }

		//Exponent?
		public RuleCall getExponentParserRuleCall_0_3() { return cExponentParserRuleCall_0_3; }

		//FDsymbol?
		public RuleCall getFDsymbolTerminalRuleCall_0_4() { return cFDsymbolTerminalRuleCall_0_4; }

		//"." signedINT+ Exponent? FDsymbol?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//signedINT+
		public RuleCall getSignedINTParserRuleCall_1_1() { return cSignedINTParserRuleCall_1_1; }

		//Exponent?
		public RuleCall getExponentParserRuleCall_1_2() { return cExponentParserRuleCall_1_2; }

		//FDsymbol?
		public RuleCall getFDsymbolTerminalRuleCall_1_3() { return cFDsymbolTerminalRuleCall_1_3; }

		//signedINT+ Exponent FDsymbol?
		public Group getGroup_2() { return cGroup_2; }

		//signedINT+
		public RuleCall getSignedINTParserRuleCall_2_0() { return cSignedINTParserRuleCall_2_0; }

		//Exponent
		public RuleCall getExponentParserRuleCall_2_1() { return cExponentParserRuleCall_2_1; }

		//FDsymbol?
		public RuleCall getFDsymbolTerminalRuleCall_2_2() { return cFDsymbolTerminalRuleCall_2_2; }

		//signedINT+ Exponent? FDsymbol?
		public Group getGroup_3() { return cGroup_3; }

		//signedINT+
		public RuleCall getSignedINTParserRuleCall_3_0() { return cSignedINTParserRuleCall_3_0; }

		//Exponent?
		public RuleCall getExponentParserRuleCall_3_1() { return cExponentParserRuleCall_3_1; }

		//FDsymbol?
		public RuleCall getFDsymbolTerminalRuleCall_3_2() { return cFDsymbolTerminalRuleCall_3_2; }
	}

	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cAdditiveOperationTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Exponent:
		//
		//	("e" | "E") AdditiveOperation? INT+;
		public ParserRule getRule() { return rule; }

		//("e" | "E") AdditiveOperation? INT+
		public Group getGroup() { return cGroup; }

		//"e" | "E"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"e"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }

		//"E"
		public Keyword getEKeyword_0_1() { return cEKeyword_0_1; }

		//AdditiveOperation?
		public RuleCall getAdditiveOperationTerminalRuleCall_1() { return cAdditiveOperationTerminalRuleCall_1; }

		//INT+
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	public class TypeQualifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TypeQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cConstEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVolatileEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVolatileVolatileKeyword_1_0 = (Keyword)cVolatileEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TypeQualifier:
		//
		//	const | volatile;
		public EnumRule getRule() { return rule; }

		//const | volatile
		public Alternatives getAlternatives() { return cAlternatives; }

		//const
		public EnumLiteralDeclaration getConstEnumLiteralDeclaration_0() { return cConstEnumLiteralDeclaration_0; }

		//"const"
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }

		//volatile
		public EnumLiteralDeclaration getVolatileEnumLiteralDeclaration_1() { return cVolatileEnumLiteralDeclaration_1; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_1_0() { return cVolatileVolatileKeyword_1_0; }
	}

	public class TypeSpecifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVoidEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVoidVoidKeyword_0_0 = (Keyword)cVoidEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCharEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCharCharKeyword_1_0 = (Keyword)cCharEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cShortEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cShortShortKeyword_2_0 = (Keyword)cShortEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIntIntKeyword_3_0 = (Keyword)cIntEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLongEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLongLongKeyword_4_0 = (Keyword)cLongEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFloatFloatKeyword_5_0 = (Keyword)cFloatEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDoubleDoubleKeyword_6_0 = (Keyword)cDoubleEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSignedEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSignedSignedKeyword_7_0 = (Keyword)cSignedEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cUnsignedEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cUnsignedUnsignedKeyword_8_0 = (Keyword)cUnsignedEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cStringStringKeyword_9_0 = (Keyword)cStringEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cInt8_tEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cInt8_tInt8_tKeyword_10_0 = (Keyword)cInt8_tEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cUint8_tEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cUint8_tUint8_tKeyword_11_0 = (Keyword)cUint8_tEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cInt16_tEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cInt16_tInt16_tKeyword_12_0 = (Keyword)cInt16_tEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cUint16_tEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cUint16_tUint16_tKeyword_13_0 = (Keyword)cUint16_tEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cInt32_tEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cInt32_tInt32_tKeyword_14_0 = (Keyword)cInt32_tEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cUint32_tEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cUint32_tUint32_tKeyword_15_0 = (Keyword)cUint32_tEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cInt64_tEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cInt64_tInt64_tKeyword_16_0 = (Keyword)cInt64_tEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cUint64_tEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cUint64_tUint64_tKeyword_17_0 = (Keyword)cUint64_tEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cIntptr_tEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cIntptr_tIntptr_tKeyword_18_0 = (Keyword)cIntptr_tEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cUintptr_tEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cUintptr_tUintptr_tKeyword_19_0 = (Keyword)cUintptr_tEnumLiteralDeclaration_19.eContents().get(0);
		
		//enum TypeSpecifier:
		//
		//	void | char | short | int | long | float | double | signed | unsigned | string | int8_t | uint8_t | int16_t |
		//
		//	uint16_t | int32_t | uint32_t | int64_t | uint64_t | intptr_t | uintptr_t;
		public EnumRule getRule() { return rule; }

		//void | char | short | int | long | float | double | signed | unsigned | string | int8_t | uint8_t | int16_t | uint16_t |
		//
		//int32_t | uint32_t | int64_t | uint64_t | intptr_t | uintptr_t
		public Alternatives getAlternatives() { return cAlternatives; }

		//void
		public EnumLiteralDeclaration getVoidEnumLiteralDeclaration_0() { return cVoidEnumLiteralDeclaration_0; }

		//"void"
		public Keyword getVoidVoidKeyword_0_0() { return cVoidVoidKeyword_0_0; }

		//char
		public EnumLiteralDeclaration getCharEnumLiteralDeclaration_1() { return cCharEnumLiteralDeclaration_1; }

		//"char"
		public Keyword getCharCharKeyword_1_0() { return cCharCharKeyword_1_0; }

		//short
		public EnumLiteralDeclaration getShortEnumLiteralDeclaration_2() { return cShortEnumLiteralDeclaration_2; }

		//"short"
		public Keyword getShortShortKeyword_2_0() { return cShortShortKeyword_2_0; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_3() { return cIntEnumLiteralDeclaration_3; }

		//"int"
		public Keyword getIntIntKeyword_3_0() { return cIntIntKeyword_3_0; }

		//long
		public EnumLiteralDeclaration getLongEnumLiteralDeclaration_4() { return cLongEnumLiteralDeclaration_4; }

		//"long"
		public Keyword getLongLongKeyword_4_0() { return cLongLongKeyword_4_0; }

		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_5() { return cFloatEnumLiteralDeclaration_5; }

		//"float"
		public Keyword getFloatFloatKeyword_5_0() { return cFloatFloatKeyword_5_0; }

		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_6() { return cDoubleEnumLiteralDeclaration_6; }

		//"double"
		public Keyword getDoubleDoubleKeyword_6_0() { return cDoubleDoubleKeyword_6_0; }

		//signed
		public EnumLiteralDeclaration getSignedEnumLiteralDeclaration_7() { return cSignedEnumLiteralDeclaration_7; }

		//"signed"
		public Keyword getSignedSignedKeyword_7_0() { return cSignedSignedKeyword_7_0; }

		//unsigned
		public EnumLiteralDeclaration getUnsignedEnumLiteralDeclaration_8() { return cUnsignedEnumLiteralDeclaration_8; }

		//"unsigned"
		public Keyword getUnsignedUnsignedKeyword_8_0() { return cUnsignedUnsignedKeyword_8_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_9() { return cStringEnumLiteralDeclaration_9; }

		//"string"
		public Keyword getStringStringKeyword_9_0() { return cStringStringKeyword_9_0; }

		//int8_t
		public EnumLiteralDeclaration getInt8_tEnumLiteralDeclaration_10() { return cInt8_tEnumLiteralDeclaration_10; }

		//"int8_t"
		public Keyword getInt8_tInt8_tKeyword_10_0() { return cInt8_tInt8_tKeyword_10_0; }

		//uint8_t
		public EnumLiteralDeclaration getUint8_tEnumLiteralDeclaration_11() { return cUint8_tEnumLiteralDeclaration_11; }

		//"uint8_t"
		public Keyword getUint8_tUint8_tKeyword_11_0() { return cUint8_tUint8_tKeyword_11_0; }

		//int16_t
		public EnumLiteralDeclaration getInt16_tEnumLiteralDeclaration_12() { return cInt16_tEnumLiteralDeclaration_12; }

		//"int16_t"
		public Keyword getInt16_tInt16_tKeyword_12_0() { return cInt16_tInt16_tKeyword_12_0; }

		//uint16_t
		public EnumLiteralDeclaration getUint16_tEnumLiteralDeclaration_13() { return cUint16_tEnumLiteralDeclaration_13; }

		//"uint16_t"
		public Keyword getUint16_tUint16_tKeyword_13_0() { return cUint16_tUint16_tKeyword_13_0; }

		//int32_t
		public EnumLiteralDeclaration getInt32_tEnumLiteralDeclaration_14() { return cInt32_tEnumLiteralDeclaration_14; }

		//"int32_t"
		public Keyword getInt32_tInt32_tKeyword_14_0() { return cInt32_tInt32_tKeyword_14_0; }

		//uint32_t
		public EnumLiteralDeclaration getUint32_tEnumLiteralDeclaration_15() { return cUint32_tEnumLiteralDeclaration_15; }

		//"uint32_t"
		public Keyword getUint32_tUint32_tKeyword_15_0() { return cUint32_tUint32_tKeyword_15_0; }

		//int64_t
		public EnumLiteralDeclaration getInt64_tEnumLiteralDeclaration_16() { return cInt64_tEnumLiteralDeclaration_16; }

		//"int64_t"
		public Keyword getInt64_tInt64_tKeyword_16_0() { return cInt64_tInt64_tKeyword_16_0; }

		//uint64_t
		public EnumLiteralDeclaration getUint64_tEnumLiteralDeclaration_17() { return cUint64_tEnumLiteralDeclaration_17; }

		//"uint64_t"
		public Keyword getUint64_tUint64_tKeyword_17_0() { return cUint64_tUint64_tKeyword_17_0; }

		//intptr_t
		public EnumLiteralDeclaration getIntptr_tEnumLiteralDeclaration_18() { return cIntptr_tEnumLiteralDeclaration_18; }

		//"intptr_t"
		public Keyword getIntptr_tIntptr_tKeyword_18_0() { return cIntptr_tIntptr_tKeyword_18_0; }

		//uintptr_t
		public EnumLiteralDeclaration getUintptr_tEnumLiteralDeclaration_19() { return cUintptr_tEnumLiteralDeclaration_19; }

		//"uintptr_t"
		public Keyword getUintptr_tUintptr_tKeyword_19_0() { return cUintptr_tUintptr_tKeyword_19_0; }
	}

	public class ParameterQualifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		
		//// include directive
		// enum ParameterQualifier:
		//
		//	in | out;
		public EnumRule getRule() { return rule; }

		//in | out
		public Alternatives getAlternatives() { return cAlternatives; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }

		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }

		//"out"
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
	}
	
	private ItfFileElements pItfFile;
	private TypeDefinitionElements pTypeDefinition;
	private TypedefSpecificationElements pTypedefSpecification;
	private QualifiedTypeSpecificationElements pQualifiedTypeSpecification;
	private TypeQualifierElements unknownRuleTypeQualifier;
	private TypeSpecificationElements pTypeSpecification;
	private TypedefNameElements pTypedefName;
	private TypeSpecifierElements unknownRuleTypeSpecifier;
	private StructOrUnionSpecificationElements pStructOrUnionSpecification;
	private StructOrUnionDefinitionElements pStructOrUnionDefinition;
	private StructorUnionReferenceElements pStructorUnionReference;
	private StructOrUnionElements pStructOrUnion;
	private StructMemberElements pStructMember;
	private EnumSpecificationElements pEnumSpecification;
	private EnumDefinitionElements pEnumDefinition;
	private EnumReferenceElements pEnumReference;
	private EnumMemberListElements pEnumMemberList;
	private EnumMemberElements pEnumMember;
	private DeclaratorsElements pDeclarators;
	private DeclaratorElements pDeclarator;
	private AbstractDeclaratorElements pAbstractDeclarator;
	private PointerSpecificationElements pPointerSpecification;
	private Qualified_PointerSpecificationElements pQualified_PointerSpecification;
	private DirectDeclaratorElements pDirectDeclarator;
	private AbstractDirectDeclaratorElements pAbstractDirectDeclarator;
	private ArraySpecificationElements pArraySpecification;
	private QualifiedNameElements pQualifiedName;
	private ConstantDefinitionElements pConstantDefinition;
	private InterfaceDefinitionElements pInterfaceDefinition;
	private MethodDefinitionElements pMethodDefinition;
	private ParameterListElements pParameterList;
	private ParameterElements pParameter;
	private ParameterQualifierElements unknownRuleParameterQualifier;
	private IncludeDirectiveElements pIncludeDirective;
	private TerminalRule tIncludeLib;
	private AnnotationsElements pAnnotations;
	private AnnotationElements pAnnotation;
	private AnnotationParametersElements pAnnotationParameters;
	private AnnotationValuePairsElements pAnnotationValuePairs;
	private AnnotationValuePairElements pAnnotationValuePair;
	private AnnotationValueElements pAnnotationValue;
	private ArrayAnnotationValueElements pArrayAnnotationValue;
	private TerminalRule tBoolean;
	private SignedINTElements pSignedINT;
	private ConstantExpressionElements pConstantExpression;
	private LogicalOrExpressionElements pLogicalOrExpression;
	private LogicalAndExpressionElements pLogicalAndExpression;
	private OrExpressionElements pOrExpression;
	private XorExpressionElements pXorExpression;
	private AndExpressionElements pAndExpression;
	private ShiftExpressionElements pShiftExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MulExpressionElements pMulExpression;
	private CastExpressionElements pCastExpression;
	private UnaryExpressionElements pUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private LiteralElements pLiteral;
	private TerminalRule tShiftOperation;
	private TerminalRule tAdditiveOperation;
	private TerminalRule tMulOperation;
	private TerminalRule tUnaryOperation;
	private FloatingPointLiteralElements pFloatingPointLiteral;
	private ExponentElements pExponent;
	private TerminalRule tFDsymbol;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FractalItfGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ow2.mindEd.itf.editor.textual.FractalItf".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Type definition part
	// ItfFile:
	//
	//	includes+=IncludeDirective* (constant+=ConstantDefinition | type+=TypeDefinition)* interface=InterfaceDefinition
	//
	//	";"?;
	public ItfFileElements getItfFileAccess() {
		return (pItfFile != null) ? pItfFile : (pItfFile = new ItfFileElements());
	}
	
	public ParserRule getItfFileRule() {
		return getItfFileAccess().getRule();
	}

	//TypeDefinition:
	//
	//	(TypedefSpecification | StructOrUnionSpecification | EnumSpecification) ";";
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return (pTypeDefinition != null) ? pTypeDefinition : (pTypeDefinition = new TypeDefinitionElements());
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//TypedefSpecification:
	//
	//	"typedef" qualifedType=QualifiedTypeSpecification dec=Declarators;
	public TypedefSpecificationElements getTypedefSpecificationAccess() {
		return (pTypedefSpecification != null) ? pTypedefSpecification : (pTypedefSpecification = new TypedefSpecificationElements());
	}
	
	public ParserRule getTypedefSpecificationRule() {
		return getTypedefSpecificationAccess().getRule();
	}

	//QualifiedTypeSpecification:
	//
	//	typeQualifier+=TypeQualifier* typeSpec=TypeSpecification;
	public QualifiedTypeSpecificationElements getQualifiedTypeSpecificationAccess() {
		return (pQualifiedTypeSpecification != null) ? pQualifiedTypeSpecification : (pQualifiedTypeSpecification = new QualifiedTypeSpecificationElements());
	}
	
	public ParserRule getQualifiedTypeSpecificationRule() {
		return getQualifiedTypeSpecificationAccess().getRule();
	}

	//enum TypeQualifier:
	//
	//	const | volatile;
	public TypeQualifierElements getTypeQualifierAccess() {
		return (unknownRuleTypeQualifier != null) ? unknownRuleTypeQualifier : (unknownRuleTypeQualifier = new TypeQualifierElements());
	}
	
	public EnumRule getTypeQualifierRule() {
		return getTypeQualifierAccess().getRule();
	}

	//TypeSpecification:
	//
	//	typeDefName=TypedefName | StructOrUnionSpecification | EnumSpecification | typeSpecifier+=TypeSpecifier+;
	public TypeSpecificationElements getTypeSpecificationAccess() {
		return (pTypeSpecification != null) ? pTypeSpecification : (pTypeSpecification = new TypeSpecificationElements());
	}
	
	public ParserRule getTypeSpecificationRule() {
		return getTypeSpecificationAccess().getRule();
	}

	//TypedefName:
	//
	//	QualifiedName;
	public TypedefNameElements getTypedefNameAccess() {
		return (pTypedefName != null) ? pTypedefName : (pTypedefName = new TypedefNameElements());
	}
	
	public ParserRule getTypedefNameRule() {
		return getTypedefNameAccess().getRule();
	}

	//enum TypeSpecifier:
	//
	//	void | char | short | int | long | float | double | signed | unsigned | string | int8_t | uint8_t | int16_t |
	//
	//	uint16_t | int32_t | uint32_t | int64_t | uint64_t | intptr_t | uintptr_t;
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return (unknownRuleTypeSpecifier != null) ? unknownRuleTypeSpecifier : (unknownRuleTypeSpecifier = new TypeSpecifierElements());
	}
	
	public EnumRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}

	//StructOrUnionSpecification:
	//
	//	StructOrUnionDefinition | StructorUnionReference;
	public StructOrUnionSpecificationElements getStructOrUnionSpecificationAccess() {
		return (pStructOrUnionSpecification != null) ? pStructOrUnionSpecification : (pStructOrUnionSpecification = new StructOrUnionSpecificationElements());
	}
	
	public ParserRule getStructOrUnionSpecificationRule() {
		return getStructOrUnionSpecificationAccess().getRule();
	}

	//StructOrUnionDefinition:
	//
	//	struct=StructOrUnion id=ID? "{" structMember+=StructMember* "}";
	public StructOrUnionDefinitionElements getStructOrUnionDefinitionAccess() {
		return (pStructOrUnionDefinition != null) ? pStructOrUnionDefinition : (pStructOrUnionDefinition = new StructOrUnionDefinitionElements());
	}
	
	public ParserRule getStructOrUnionDefinitionRule() {
		return getStructOrUnionDefinitionAccess().getRule();
	}

	//StructorUnionReference:
	//
	//	struct=StructOrUnion id=ID;
	public StructorUnionReferenceElements getStructorUnionReferenceAccess() {
		return (pStructorUnionReference != null) ? pStructorUnionReference : (pStructorUnionReference = new StructorUnionReferenceElements());
	}
	
	public ParserRule getStructorUnionReferenceRule() {
		return getStructorUnionReferenceAccess().getRule();
	}

	//StructOrUnion:
	//
	//	"struct" | "union";
	public StructOrUnionElements getStructOrUnionAccess() {
		return (pStructOrUnion != null) ? pStructOrUnion : (pStructOrUnion = new StructOrUnionElements());
	}
	
	public ParserRule getStructOrUnionRule() {
		return getStructOrUnionAccess().getRule();
	}

	//StructMember:
	//
	//	annotations=Annotations qualType=QualifiedTypeSpecification dec=Declarators (":" constExpr=ConstantExpression)? ";";
	public StructMemberElements getStructMemberAccess() {
		return (pStructMember != null) ? pStructMember : (pStructMember = new StructMemberElements());
	}
	
	public ParserRule getStructMemberRule() {
		return getStructMemberAccess().getRule();
	}

	//EnumSpecification:
	//
	//	EnumDefinition | EnumReference;
	public EnumSpecificationElements getEnumSpecificationAccess() {
		return (pEnumSpecification != null) ? pEnumSpecification : (pEnumSpecification = new EnumSpecificationElements());
	}
	
	public ParserRule getEnumSpecificationRule() {
		return getEnumSpecificationAccess().getRule();
	}

	//EnumDefinition:
	//
	//	"enum" id=ID? "{" enumMemberList=EnumMemberList "}";
	public EnumDefinitionElements getEnumDefinitionAccess() {
		return (pEnumDefinition != null) ? pEnumDefinition : (pEnumDefinition = new EnumDefinitionElements());
	}
	
	public ParserRule getEnumDefinitionRule() {
		return getEnumDefinitionAccess().getRule();
	}

	//EnumReference:
	//
	//	"enum" id=ID;
	public EnumReferenceElements getEnumReferenceAccess() {
		return (pEnumReference != null) ? pEnumReference : (pEnumReference = new EnumReferenceElements());
	}
	
	public ParserRule getEnumReferenceRule() {
		return getEnumReferenceAccess().getRule();
	}

	//EnumMemberList:
	//
	//	EnumMember ("," enumMember+=EnumMember)*;
	public EnumMemberListElements getEnumMemberListAccess() {
		return (pEnumMemberList != null) ? pEnumMemberList : (pEnumMemberList = new EnumMemberListElements());
	}
	
	public ParserRule getEnumMemberListRule() {
		return getEnumMemberListAccess().getRule();
	}

	//EnumMember:
	//
	//	annotations=Annotations id=ID ("=" constExpr=ConstantExpression)?;
	public EnumMemberElements getEnumMemberAccess() {
		return (pEnumMember != null) ? pEnumMember : (pEnumMember = new EnumMemberElements());
	}
	
	public ParserRule getEnumMemberRule() {
		return getEnumMemberAccess().getRule();
	}

	//Declarators:
	//
	//	dec=Declarator ("," declaratorList+=Declarator)*;
	public DeclaratorsElements getDeclaratorsAccess() {
		return (pDeclarators != null) ? pDeclarators : (pDeclarators = new DeclaratorsElements());
	}
	
	public ParserRule getDeclaratorsRule() {
		return getDeclaratorsAccess().getRule();
	}

	//Declarator:
	//
	//	pointer=PointerSpecification dc=DirectDeclarator;
	public DeclaratorElements getDeclaratorAccess() {
		return (pDeclarator != null) ? pDeclarator : (pDeclarator = new DeclaratorElements());
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}

	//AbstractDeclarator:
	//
	//	pointer=PointerSpecification dc=AbstractDirectDeclarator?;
	public AbstractDeclaratorElements getAbstractDeclaratorAccess() {
		return (pAbstractDeclarator != null) ? pAbstractDeclarator : (pAbstractDeclarator = new AbstractDeclaratorElements());
	}
	
	public ParserRule getAbstractDeclaratorRule() {
		return getAbstractDeclaratorAccess().getRule();
	}

	//PointerSpecification:
	//
	//	{PointerSpecification} qualifiedPointer+=Qualified_PointerSpecification*;
	public PointerSpecificationElements getPointerSpecificationAccess() {
		return (pPointerSpecification != null) ? pPointerSpecification : (pPointerSpecification = new PointerSpecificationElements());
	}
	
	public ParserRule getPointerSpecificationRule() {
		return getPointerSpecificationAccess().getRule();
	}

	//Qualified_PointerSpecification:
	//
	//	{Qualified_PointerSpecification} "*" typeQualifier+=TypeQualifier*;
	public Qualified_PointerSpecificationElements getQualified_PointerSpecificationAccess() {
		return (pQualified_PointerSpecification != null) ? pQualified_PointerSpecification : (pQualified_PointerSpecification = new Qualified_PointerSpecificationElements());
	}
	
	public ParserRule getQualified_PointerSpecificationRule() {
		return getQualified_PointerSpecificationAccess().getRule();
	}

	//DirectDeclarator:
	//
	//	(id=ID | "(" dec=Declarator ")") array+=ArraySpecification*;
	public DirectDeclaratorElements getDirectDeclaratorAccess() {
		return (pDirectDeclarator != null) ? pDirectDeclarator : (pDirectDeclarator = new DirectDeclaratorElements());
	}
	
	public ParserRule getDirectDeclaratorRule() {
		return getDirectDeclaratorAccess().getRule();
	}

	//AbstractDirectDeclarator:
	//
	//	"(" dec=AbstractDeclarator ")" arrays+=ArraySpecification* | array+=ArraySpecification+;
	public AbstractDirectDeclaratorElements getAbstractDirectDeclaratorAccess() {
		return (pAbstractDirectDeclarator != null) ? pAbstractDirectDeclarator : (pAbstractDirectDeclarator = new AbstractDirectDeclaratorElements());
	}
	
	public ParserRule getAbstractDirectDeclaratorRule() {
		return getAbstractDirectDeclaratorAccess().getRule();
	}

	//ArraySpecification:
	//
	//	"[" constExpr=ConstantExpression? "]";
	public ArraySpecificationElements getArraySpecificationAccess() {
		return (pArraySpecification != null) ? pArraySpecification : (pArraySpecification = new ArraySpecificationElements());
	}
	
	public ParserRule getArraySpecificationRule() {
		return getArraySpecificationAccess().getRule();
	}

	//// Interface definition part
	// QualifiedName:
	//
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ConstantDefinition:
	//
	//	"#define" id=ID expr=ConstantExpression?;
	public ConstantDefinitionElements getConstantDefinitionAccess() {
		return (pConstantDefinition != null) ? pConstantDefinition : (pConstantDefinition = new ConstantDefinitionElements());
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}

	//InterfaceDefinition:
	//
	//	annotations=Annotations "interface" "unmanaged"? name=QualifiedName (":" fqn2=QualifiedName)? "{"
	//
	//	methodDef+=MethodDefinition* "}";
	public InterfaceDefinitionElements getInterfaceDefinitionAccess() {
		return (pInterfaceDefinition != null) ? pInterfaceDefinition : (pInterfaceDefinition = new InterfaceDefinitionElements());
	}
	
	public ParserRule getInterfaceDefinitionRule() {
		return getInterfaceDefinitionAccess().getRule();
	}

	//MethodDefinition:
	//
	//	annotations=Annotations qualifiedTypeSpec=QualifiedTypeSpecification pointerSpecification=PointerSpecification id=ID
	//
	//	("(" "void"? ")" | "(" ParameterList=ParameterList ")") ";";
	public MethodDefinitionElements getMethodDefinitionAccess() {
		return (pMethodDefinition != null) ? pMethodDefinition : (pMethodDefinition = new MethodDefinitionElements());
	}
	
	public ParserRule getMethodDefinitionRule() {
		return getMethodDefinitionAccess().getRule();
	}

	//ParameterList:
	//
	//	param=Parameter ("," params+=Parameter)* ("," "...")?;
	public ParameterListElements getParameterListAccess() {
		return (pParameterList != null) ? pParameterList : (pParameterList = new ParameterListElements());
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//
	//	annotations=Annotations ParameterQualifier+=ParameterQualifier* qualifiedTypeSpec=QualifiedTypeSpecification
	//
	//	(dec=Declarator | absDec=AbstractDeclarator);
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// include directive
	// enum ParameterQualifier:
	//
	//	in | out;
	public ParameterQualifierElements getParameterQualifierAccess() {
		return (unknownRuleParameterQualifier != null) ? unknownRuleParameterQualifier : (unknownRuleParameterQualifier = new ParameterQualifierElements());
	}
	
	public EnumRule getParameterQualifierRule() {
		return getParameterQualifierAccess().getRule();
	}

	//IncludeDirective:
	//
	//	"#include" (importedURI=STRING | includeID=IncludeLib);
	public IncludeDirectiveElements getIncludeDirectiveAccess() {
		return (pIncludeDirective != null) ? pIncludeDirective : (pIncludeDirective = new IncludeDirectiveElements());
	}
	
	public ParserRule getIncludeDirectiveRule() {
		return getIncludeDirectiveAccess().getRule();
	}

	//terminal IncludeLib:
	//
	//	"<" ID "." ID ">";
	public TerminalRule getIncludeLibRule() {
		return (tIncludeLib != null) ? tIncludeLib : (tIncludeLib = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IncludeLib"));
	} 

	//Annotations:
	//
	//	{Annotations} annotations+=Annotation*;
	public AnnotationsElements getAnnotationsAccess() {
		return (pAnnotations != null) ? pAnnotations : (pAnnotations = new AnnotationsElements());
	}
	
	public ParserRule getAnnotationsRule() {
		return getAnnotationsAccess().getRule();
	}

	//Annotation:
	//
	//	"@" fqn=QualifiedName annotationParamaters=AnnotationParameters?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//AnnotationParameters:
	//
	//	{AnnotationParameters} "(" (valuePair=AnnotationValuePairs | value=AnnotationValue)? ")";
	public AnnotationParametersElements getAnnotationParametersAccess() {
		return (pAnnotationParameters != null) ? pAnnotationParameters : (pAnnotationParameters = new AnnotationParametersElements());
	}
	
	public ParserRule getAnnotationParametersRule() {
		return getAnnotationParametersAccess().getRule();
	}

	//AnnotationValuePairs:
	//
	//	first=AnnotationValuePair ("," listValue+=AnnotationValuePair)*;
	public AnnotationValuePairsElements getAnnotationValuePairsAccess() {
		return (pAnnotationValuePairs != null) ? pAnnotationValuePairs : (pAnnotationValuePairs = new AnnotationValuePairsElements());
	}
	
	public ParserRule getAnnotationValuePairsRule() {
		return getAnnotationValuePairsAccess().getRule();
	}

	//AnnotationValuePair:
	//
	//	id=ID "=" value=AnnotationValue;
	public AnnotationValuePairElements getAnnotationValuePairAccess() {
		return (pAnnotationValuePair != null) ? pAnnotationValuePair : (pAnnotationValuePair = new AnnotationValuePairElements());
	}
	
	public ParserRule getAnnotationValuePairRule() {
		return getAnnotationValuePairAccess().getRule();
	}

	//AnnotationValue:
	//
	//	signedINT | "null" | Boolean | ID | Annotation | ArrayAnnotationValue | STRING;
	public AnnotationValueElements getAnnotationValueAccess() {
		return (pAnnotationValue != null) ? pAnnotationValue : (pAnnotationValue = new AnnotationValueElements());
	}
	
	public ParserRule getAnnotationValueRule() {
		return getAnnotationValueAccess().getRule();
	}

	//ArrayAnnotationValue:
	//
	//	"{" (firstValue=AnnotationValue ("," values+=AnnotationValue)*)? "}";
	public ArrayAnnotationValueElements getArrayAnnotationValueAccess() {
		return (pArrayAnnotationValue != null) ? pArrayAnnotationValue : (pArrayAnnotationValue = new ArrayAnnotationValueElements());
	}
	
	public ParserRule getArrayAnnotationValueRule() {
		return getArrayAnnotationValueAccess().getRule();
	}

	//terminal Boolean:
	//
	//	"true" | "false";
	public TerminalRule getBooleanRule() {
		return (tBoolean != null) ? tBoolean : (tBoolean = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean"));
	} 

	//signedINT:
	//
	//	AdditiveOperation? INT;
	public SignedINTElements getSignedINTAccess() {
		return (pSignedINT != null) ? pSignedINT : (pSignedINT = new SignedINTElements());
	}
	
	public ParserRule getSignedINTRule() {
		return getSignedINTAccess().getRule();
	}

	//ConstantExpression:
	//
	//	LogicalOrExpression;
	public ConstantExpressionElements getConstantExpressionAccess() {
		return (pConstantExpression != null) ? pConstantExpression : (pConstantExpression = new ConstantExpressionElements());
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}

	//LogicalOrExpression:
	//
	//	leftExpr=LogicalAndExpression ("||" rightExpr=LogicalOrExpression)?;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return (pLogicalOrExpression != null) ? pLogicalOrExpression : (pLogicalOrExpression = new LogicalOrExpressionElements());
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression:
	//
	//	leftExpr=OrExpression ("&&" rightExpr=LogicalAndExpression)?;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return (pLogicalAndExpression != null) ? pLogicalAndExpression : (pLogicalAndExpression = new LogicalAndExpressionElements());
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//OrExpression:
	//
	//	leftExpr=XorExpression ("|" rightExpr=OrExpression)?;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//XorExpression:
	//
	//	leftExpr=AndExpression ("^" rightExpr=XorExpression)?;
	public XorExpressionElements getXorExpressionAccess() {
		return (pXorExpression != null) ? pXorExpression : (pXorExpression = new XorExpressionElements());
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}

	//AndExpression:
	//
	//	leftExpr=ShiftExpression ("&" rightExpr=AndExpression)?;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//ShiftExpression:
	//
	//	leftExpr=AdditiveExpression (op=ShiftOperation rightExpr=ShiftExpression)?;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return (pShiftExpression != null) ? pShiftExpression : (pShiftExpression = new ShiftExpressionElements());
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//
	//	leftExpr=MulExpression (op=AdditiveOperation rightExpr=AdditiveExpression)?;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MulExpression:
	//
	//	leftExpr=CastExpression (op=MulOperation rightExpr=MulExpression)?;
	public MulExpressionElements getMulExpressionAccess() {
		return (pMulExpression != null) ? pMulExpression : (pMulExpression = new MulExpressionElements());
	}
	
	public ParserRule getMulExpressionRule() {
		return getMulExpressionAccess().getRule();
	}

	//CastExpression:
	//
	//	"(" type=QualifiedTypeSpecification ")" expr=CastExpression | unaryExpr=UnaryExpression;
	public CastExpressionElements getCastExpressionAccess() {
		return (pCastExpression != null) ? pCastExpression : (pCastExpression = new CastExpressionElements());
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}

	//UnaryExpression:
	//
	//	unaryExpr=UnaryOperation? primaryExpr=PrimaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression:
	//
	//	literal=Literal | "(" ConstantExpression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal:
	//
	//	ID | STRING | FloatingPointLiteral | ref=[ConstantDefinition];
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//terminal ShiftOperation:
	//
	//	"<<" | ">>";
	public TerminalRule getShiftOperationRule() {
		return (tShiftOperation != null) ? tShiftOperation : (tShiftOperation = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ShiftOperation"));
	} 

	//terminal AdditiveOperation:
	//
	//	"+" | "-";
	public TerminalRule getAdditiveOperationRule() {
		return (tAdditiveOperation != null) ? tAdditiveOperation : (tAdditiveOperation = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperation"));
	} 

	//terminal MulOperation:
	//
	//	"*" | "/" | "%";
	public TerminalRule getMulOperationRule() {
		return (tMulOperation != null) ? tMulOperation : (tMulOperation = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MulOperation"));
	} 

	//terminal UnaryOperation:
	//
	//	"&" | "*" | "+" | "-" | "~" | "!";
	public TerminalRule getUnaryOperationRule() {
		return (tUnaryOperation != null) ? tUnaryOperation : (tUnaryOperation = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperation"));
	} 

	//FloatingPointLiteral:
	//
	//	signedINT+ "." signedINT* Exponent? FDsymbol? | "." signedINT+ Exponent? FDsymbol? | signedINT+ Exponent FDsymbol? |
	//
	//	signedINT+ Exponent? FDsymbol?;
	public FloatingPointLiteralElements getFloatingPointLiteralAccess() {
		return (pFloatingPointLiteral != null) ? pFloatingPointLiteral : (pFloatingPointLiteral = new FloatingPointLiteralElements());
	}
	
	public ParserRule getFloatingPointLiteralRule() {
		return getFloatingPointLiteralAccess().getRule();
	}

	//Exponent:
	//
	//	("e" | "E") AdditiveOperation? INT+;
	public ExponentElements getExponentAccess() {
		return (pExponent != null) ? pExponent : (pExponent = new ExponentElements());
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}

	//terminal FDsymbol:
	//
	//	"f" | "F" | "d" | "D";
	public TerminalRule getFDsymbolRule() {
		return (tFDsymbol != null) ? tFDsymbol : (tFDsymbol = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FDsymbol"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
