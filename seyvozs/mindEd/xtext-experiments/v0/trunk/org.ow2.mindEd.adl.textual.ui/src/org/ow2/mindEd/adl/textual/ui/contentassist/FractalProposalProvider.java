/*
 * generated by Xtext
 */
package org.ow2.mindEd.adl.textual.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.ow2.mindEd.adl.textual.fractal.ArchitectureDefinition;
import org.ow2.mindEd.adl.textual.fractal.ProvidedInterfaceDefinition;
import org.ow2.mindEd.adl.textual.fractal.RequiredInterfaceDefinition;
import org.ow2.mindEd.adl.textual.fractal.SubComponentDefinition;
import org.ow2.mindEd.adl.textual.ui.contentassist.AbstractFractalProposalProvider;
import org.ow2.mindEd.itf.editor.textual.fractalIDL.InterfaceDefinition;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class FractalProposalProvider extends AbstractFractalProposalProvider {

	/**
	 * Content assist for sub-component (anonymous definition or instance) name.
	 * Default name is the same as the previously declared type, with first letter in lower case.
	 * 
	 * @see org.ow2.fractal.mind.xtext.contentassist.AbstractFractalProposalProvider#complete_ID(
	 * 		org.ow2.mindEd.adl.textual.fractal.SubComponentDefinition,
	 *      org.eclipse.xtext.Assignment,
	 *      org.eclipse.xtext.ui.core.editor.contentassist.ContentAssistContext,
	 *      org.eclipse.xtext.ui.core.editor.contentassist.ICompletionProposalAcceptor)
	 * 
	 * The same suggestion can be implemented with 
	 * public void completeSubComponentDefinition_Name(SubComponentDefinition subCompDef, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	 * but we wanted to try the auto-insertable feature (when there's only 1 choice).
	 * The tentative doesn't seem to work, however.
	 */
	public void complete_ID(SubComponentDefinition subCompDef, RuleCall ruleCall, final ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {

		// Proposal to add for content assist
		String proposal = null;
		ICompletionProposal completionProposal = null;

		ArchitectureDefinition archDef = subCompDef.getType();
		String typeName = archDef.getName();

		// Filter the complete QualifiedName to keep only the last substring
		String simpleName = typeName.substring(typeName.lastIndexOf(".") + 1);

		proposal = simpleName.substring(0,1).toLowerCase().concat(simpleName.substring(1)) + "Comp";

		completionProposal = createCompletionProposal(proposal, proposal + " - Instance name suggestion", null, context);

		// It is everytime, but you never know... let's protect things
		if (completionProposal instanceof ConfigurableCompletionProposal)
			((ConfigurableCompletionProposal) completionProposal).setAutoInsertable(true);

		acceptor.accept(completionProposal);

	}

	/**
	 * Content assist for required interface instance name.
	 * Default name is the same as the previously declared type, with first letter in lower case.
	 * 
	 * @see org.ow2.fractal.mind.xtext.contentassist.AbstractFractalProposalProvider#complete_ID(
	 * 		org.ow2.mindEd.adl.textual.fractal.RequiredInterfaceDefinition,
	 *      org.eclipse.xtext.Assignment,
	 *      org.eclipse.xtext.ui.core.editor.contentassist.ContentAssistContext,
	 *      org.eclipse.xtext.ui.core.editor.contentassist.ICompletionProposalAcceptor)
	 * 
	 * The same suggestion can be implemented with 
	 * public void completeRequiredInterfaceDefinition_Name(RequiredInterfaceDefinition reqItfDef, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	 * but we wanted to try the auto-insertable feature (when there's only 1 choice).
	 * The tentative doesn't seem to work, however.
	 * 
	 */
	public void complete_ID(RequiredInterfaceDefinition reqItfDef, RuleCall ruleCall, final ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {

		// Proposal to add for content assist
		String proposal = null;
		ICompletionProposal completionProposal = null;

		InterfaceDefinition itfDef = reqItfDef.getSignature();
		String typeName = itfDef.getName();

		// Filter the complete QualifiedName to keep only the last substring
		String simpleName = typeName.substring(typeName.lastIndexOf(".") + 1);

		proposal = simpleName.substring(0,1).toLowerCase().concat(simpleName.substring(1)) + "Itf";

		completionProposal = createCompletionProposal(proposal, proposal + " - Interface name suggestion", null, context);

		// It is everytime, but you never know... let's protect things
		if (completionProposal instanceof ConfigurableCompletionProposal)
			((ConfigurableCompletionProposal) completionProposal).setAutoInsertable(true);

		acceptor.accept(completionProposal);

	}

	/**
	 * Content assist for provided interface instance name.
	 * Default name is the same as the previously declared type, with first letter in lower case.
	 * 
	 * @see org.ow2.fractal.mind.xtext.contentassist.AbstractFractalProposalProvider#complete_ID(
	 * 		org.ow2.mindEd.adl.textual.fractal.ProvidedInterfaceDefinition,
	 *      org.eclipse.xtext.Assignment,
	 *      org.eclipse.xtext.ui.core.editor.contentassist.ContentAssistContext,
	 *      org.eclipse.xtext.ui.core.editor.contentassist.ICompletionProposalAcceptor)
	 *      
	 * The same suggestion can be implemented with 
	 * public void completeProvidedInterfaceDefinition_Name(ProvidedInterfaceDefinition prvdItfDef, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor)
	 * but we wanted to try the auto-insertable feature (when there's only 1 choice).
	 * The tentative doesn't seem to work, however.
	 */
	public void complete_ID(ProvidedInterfaceDefinition prvdItfDef, RuleCall ruleCall, final ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {

		// Proposal to add for content assist
		String proposal = null;
		ICompletionProposal completionProposal = null;

		InterfaceDefinition itfDef = prvdItfDef.getSignature();
		String typeName = itfDef.getName();

		// Filter the complete QualifiedName to keep only the last substring
		String simpleName = typeName.substring(typeName.lastIndexOf(".") + 1);

		proposal = simpleName.substring(0,1).toLowerCase().concat(simpleName.substring(1)) + "Itf";

		completionProposal = createCompletionProposal(proposal, proposal + " - Interface name suggestion", null, context);

		// It is everytime, but you never know... let's protect things
		if (completionProposal instanceof ConfigurableCompletionProposal)
			((ConfigurableCompletionProposal) completionProposal).setAutoInsertable(true);

		acceptor.accept(completionProposal);

	}

}
