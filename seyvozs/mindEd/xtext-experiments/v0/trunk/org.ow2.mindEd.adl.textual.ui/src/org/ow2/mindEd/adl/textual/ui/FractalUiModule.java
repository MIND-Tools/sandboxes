/*
 * generated by Xtext
 */
package org.ow2.mindEd.adl.textual.ui;

import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.ui.editor.autoedit.AbstractEditStrategyProvider;
import org.eclipse.xtext.ui.editor.autoedit.DefaultAutoEditStrategyProvider;
import org.eclipse.xtext.ui.editor.contentassist.ContentProposalLabelProvider;
import org.eclipse.xtext.ui.editor.hyperlinking.IHyperlinkHelper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.AbstractAntlrTokenToAttributeIdMapper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration;
import org.ow2.mindEd.adl.textual.ui.navigation.FractalHyperlink;
import org.ow2.mindEd.ide.ui.navigator.MindLabelProvider;

import com.google.inject.Binder;

/**
 * Use this class to register components to be used within the IDE.
 */
public class FractalUiModule extends org.ow2.mindEd.adl.textual.ui.AbstractFractalUiModule {
	public FractalUiModule(AbstractUIPlugin plugin) {
		super(plugin);
	}

	/**
	 * Hyperlinks
	 * @return
	 */
	public Class<? extends IHyperlinkHelper> bindIHyperlinkHelper() {
		return FractalHyperlink.class;
	}

	/**
	 * register mapping tokens to IDs
	 * @return MIND ADL tokens mapping
	 */

	public Class<? extends AbstractAntlrTokenToAttributeIdMapper> bindTokenToAttributeIdMapper() {
		return AntlrTokenToAttributeIdMapper.class;
	}

	/**
	 * register syntax coloring
	 * @return class which define MIND ADL syntax coloring
	 */
	public Class<? extends IHighlightingConfiguration> bindILexicalHighlightingConfiguration() {
		return LexicalHighlightingConfiguration.class;
	}

// Doesn't work since MindLabelProvider.getImage filters on Mind-specific types (legacy types dependency)
// and our content is never recognized
//	/**
//	 * In the first version of MindEd the injection used to be implicit according to the
//	 * http://www.eclipse.org/Xtext/documentation.html#labelProvider
//	 * behavior as it found the label provider thanks to EMF (see the imported EPackage paragraph)
//	 * Here with the newly generated EMF model (from xtext) we define the binding manually
//	 * 
//	 * The org.eclipse.ui.navigator (needed by MindLabelProvider) dependency was added accordingly
//	 * in the Manifest.MF file. 
//	 */
//	@Override
//	public void configureContentProposalLabelProvider(Binder binder) {
//		binder.bind(ILabelProvider.class)
//		.annotatedWith(ContentProposalLabelProvider.class)
//		.to(MindLabelProvider.class);
//	}

}
