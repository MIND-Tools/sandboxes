/*
 * generated by Xtext
 */
package org.ow2.mindEd.adl.textual.scoping;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.ow2.mindEd.adl.textual.fractal.ArchitectureDefinition;
import org.ow2.mindEd.adl.textual.fractal.BindingDefinition;
import org.ow2.mindEd.adl.textual.fractal.CompositeDefinition;
import org.ow2.mindEd.adl.textual.fractal.HostedInterfaceDefinition;
import org.ow2.mindEd.adl.textual.fractal.PrimitiveDefinition;
import org.ow2.mindEd.adl.textual.fractal.ProvidedInterfaceDefinition;
import org.ow2.mindEd.adl.textual.fractal.RequiredInterfaceDefinition;
import org.ow2.mindEd.adl.textual.fractal.SubComponentDefinition;
import org.ow2.mindEd.adl.textual.fractal.TypeDefinition;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class FractalScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_BindingDefinition_interfaceSourceLabel(BindingDefinition bindingDef, EReference ref) {
		ArchitectureDefinition sourceComponentArchDef = bindingDef.getInterfaceSourceParentLabel().getType();

		if (sourceComponentArchDef instanceof TypeDefinition) {
			// Get all the elements
			EList<HostedInterfaceDefinition> elements = ((TypeDefinition) sourceComponentArchDef).getElements();
			// Then filter for RequiredInterfaceDefinition(s)

			EList<RequiredInterfaceDefinition> reqItfList = new BasicEList<RequiredInterfaceDefinition>();
			for (EObject currentEObject : elements) {
				if (currentEObject instanceof RequiredInterfaceDefinition) {
					reqItfList.add((RequiredInterfaceDefinition) currentEObject);
				}
			}
			// Obtain and return a scope according to the computed list
			return Scopes.scopeFor(reqItfList);
		} else if (sourceComponentArchDef instanceof CompositeDefinition) {
			// Get all the elements
			EList<EObject> elements = ((CompositeDefinition) sourceComponentArchDef).getElements();
			// Then filter for RequiredInterfaceDefinition(s)

			EList<RequiredInterfaceDefinition> reqItfList = new BasicEList<RequiredInterfaceDefinition>();
			for (EObject currentEObject : elements) {
				if (currentEObject instanceof RequiredInterfaceDefinition) {
					reqItfList.add((RequiredInterfaceDefinition) currentEObject);
				}
			}
			// Obtain and return a scope according to the computed list
			return Scopes.scopeFor(reqItfList);
		} else if (sourceComponentArchDef instanceof PrimitiveDefinition) {
			// Get all the elements
			EList<EObject> elements = ((PrimitiveDefinition) sourceComponentArchDef).getElements();
			// Then filter for RequiredInterfaceDefinition(s)

			EList<RequiredInterfaceDefinition> reqItfList = new BasicEList<RequiredInterfaceDefinition>();
			for (EObject currentEObject : elements) {
				if (currentEObject instanceof RequiredInterfaceDefinition) {
					reqItfList.add((RequiredInterfaceDefinition) currentEObject);
				}
			}
			// Obtain and return a scope according to the computed list
			return Scopes.scopeFor(reqItfList);
		} else {
			// error case
			return null;
		}
	}

	public IScope scope_BindingDefinition_interfaceTargetLabel(BindingDefinition bindingDef, EReference ref) {
		ArchitectureDefinition targetComponentArchDef = bindingDef.getInterfaceTargetParentLabel().getType();

		if (targetComponentArchDef instanceof TypeDefinition) {
			// Get all the elements
			EList<HostedInterfaceDefinition> elements = ((TypeDefinition) targetComponentArchDef).getElements();
			// Then filter for RequiredInterfaceDefinition(s)

			EList<ProvidedInterfaceDefinition> reqItfList = new BasicEList<ProvidedInterfaceDefinition>();
			for (EObject currentEObject : elements) {
				if (currentEObject instanceof ProvidedInterfaceDefinition) {
					reqItfList.add((ProvidedInterfaceDefinition) currentEObject);
				}
			}
			// Obtain and return a scope according to the computed list
			return Scopes.scopeFor(reqItfList);
		} else if (targetComponentArchDef instanceof CompositeDefinition) {
			// Get all the elements
			EList<EObject> elements = ((CompositeDefinition) targetComponentArchDef).getElements();
			// Then filter for RequiredInterfaceDefinition(s)

			EList<ProvidedInterfaceDefinition> reqItfList = new BasicEList<ProvidedInterfaceDefinition>();
			for (EObject currentEObject : elements) {
				if (currentEObject instanceof ProvidedInterfaceDefinition) {
					reqItfList.add((ProvidedInterfaceDefinition) currentEObject);
				}
			}
			// Obtain and return a scope according to the computed list
			return Scopes.scopeFor(reqItfList);
		} else if (targetComponentArchDef instanceof PrimitiveDefinition) {
			// Get all the elements
			EList<EObject> elements = ((PrimitiveDefinition) targetComponentArchDef).getElements();
			// Then filter for RequiredInterfaceDefinition(s)

			EList<ProvidedInterfaceDefinition> reqItfList = new BasicEList<ProvidedInterfaceDefinition>();
			for (EObject currentEObject : elements) {
				if (currentEObject instanceof ProvidedInterfaceDefinition) {
					reqItfList.add((ProvidedInterfaceDefinition) currentEObject);
				}
			}
			// Obtain and return a scope according to the computed list
			return Scopes.scopeFor(reqItfList);
		} else {
			// error case
			return null;
		}
	}
	
//	public IScope getScope(SubComponentDefinition subCompDef, EReference ref){
//		return null;
//		
//	}

	@Override
	public IScope getScope(EObject context, EReference reference){
		System.out.println(
			"scope_" + reference.getEContainingClass().getName()
			+ "_" + reference.getName()
			+ "(" + context.eClass().getName() + ", ..)"
		);
		return super.getScope(context, reference);
	}

//	// SSZ: custom scope trial for direct package declaration
//	public IScope scope_SubComponentDefinition_type(SubComponentDefinition subCompDef, EReference reference) {
//		CompositeDefinition compositeDef = null;
//		
//		// Container should always be a CompositeDefinition
//		EObject container = subCompDef.eContainer();
//		if (container instanceof CompositeDefinition) {
//			compositeDef = (CompositeDefinition) container;
//			return super.getScope(compositeDef, reference);
//		} else return IScope.NULLSCOPE;
//	}
	
}
