/*
* generated by Xtext
*/

package org.ow2.mindEd.adl.textual.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FractalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AdlDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdlDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportDefinitionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cArchitectureDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArchitectureDefinitionArchitectureDefinitionParserRuleCall_1_0 = (RuleCall)cArchitectureDefinitionAssignment_1.eContents().get(0);
		
		//AdlDefinition:
		//
		//	imports+=ImportDefinition* architectureDefinition=ArchitectureDefinition;
		public ParserRule getRule() { return rule; }

		//imports+=ImportDefinition* architectureDefinition=ArchitectureDefinition
		public Group getGroup() { return cGroup; }

		//imports+=ImportDefinition*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportDefinition
		public RuleCall getImportsImportDefinitionParserRuleCall_0_0() { return cImportsImportDefinitionParserRuleCall_0_0; }

		//architectureDefinition=ArchitectureDefinition
		public Assignment getArchitectureDefinitionAssignment_1() { return cArchitectureDefinitionAssignment_1; }

		//ArchitectureDefinition
		public RuleCall getArchitectureDefinitionArchitectureDefinitionParserRuleCall_1_0() { return cArchitectureDefinitionArchitectureDefinitionParserRuleCall_1_0; }
	}

	public class ArchitectureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArchitectureDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *
		//
		// * SSZ Note: Mind package scoping is handled thanks to the
		//
		// * org.ow2.mindEd.adl.textual.scoping.FractalImportedNamespaceAwareLocalScopeProvider
		//
		// * to be able to manage implicit declaration during the component declaration.
		//
		// * / //// OLD
		//
		////AdlDefinition :
		//
		////	elements += AbstractElement*
		//
		////;
		//
		////
		//
		////AbstractElement:
		//
		////	/ * PackageDeclaration | * / ImportDefinition | ArchitectureDefinition
		//
		////;
		//
		//ArchitectureDefinition:
		//
		//	CompositeDefinition | PrimitiveDefinition | TypeDefinition;
		public ParserRule getRule() { return rule; }

		//CompositeDefinition | PrimitiveDefinition | TypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeDefinition
		public RuleCall getCompositeDefinitionParserRuleCall_0() { return cCompositeDefinitionParserRuleCall_0; }

		//PrimitiveDefinition
		public RuleCall getPrimitiveDefinitionParserRuleCall_1() { return cPrimitiveDefinitionParserRuleCall_1; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_2() { return cTypeDefinitionParserRuleCall_2; }
	}

	public class ImportDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportDefinition: //(annotationsList=AnnotationsList)?
		//
		//	"import" importedNamespace=QualifiedNameWithWildcard ";";
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//"import" importedNamespace=QualifiedNameWithWildcard ";"
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// *
		//
		//PackageDeclaration:
		//
		//	'package' name = QualifiedName ';'
		//
		//;
		//
		// * / QualifiedNameWithWildcard:
		//
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class CompositeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTemplateSpecifiersListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_2_0 = (RuleCall)cTemplateSpecifiersListAssignment_2.eContents().get(0);
		private final Assignment cCompositeFormalArgumentsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0 = (RuleCall)cCompositeFormalArgumentsListAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperTypeArchitectureDefinitionCrossReference_4_1_0 = (CrossReference)cSuperTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperTypeArchitectureDefinitionQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cSuperTypeArchitectureDefinitionCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cElementsAlternatives_6_0 = (Alternatives)cElementsAssignment_6.eContents().get(0);
		private final RuleCall cElementsHostedInterfaceDefinitionParserRuleCall_6_0_0 = (RuleCall)cElementsAlternatives_6_0.eContents().get(0);
		private final RuleCall cElementsSubComponentDefinitionParserRuleCall_6_0_1 = (RuleCall)cElementsAlternatives_6_0.eContents().get(1);
		private final RuleCall cElementsBindingDefinitionParserRuleCall_6_0_2 = (RuleCall)cElementsAlternatives_6_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CompositeDefinition: //(annotationsList=AnnotationsList)?
		//
		//	"composite" name=QualifiedName templateSpecifiersList=TemplateSpecifiersList? // <ID conformsto TypeDefinition, ID2 conformsto TypeDef2, ...>
		//
		//	compositeFormalArgumentsList=FormalArgumentsList? // (arg1, arg2, ...)
		//
		//	("extends" superType=[ArchitectureDefinition|QualifiedName])? "{" elements+=(HostedInterfaceDefinition |
		//
		//	SubComponentDefinition | BindingDefinition)* "}";
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//"composite" name=QualifiedName templateSpecifiersList=TemplateSpecifiersList? // <ID conformsto TypeDefinition, ID2 conformsto TypeDef2, ...>
		//
		//compositeFormalArgumentsList=FormalArgumentsList? // (arg1, arg2, ...)
		//
		//("extends" superType=[ArchitectureDefinition|QualifiedName])? "{" elements+=(HostedInterfaceDefinition |
		//
		//SubComponentDefinition | BindingDefinition)* "}"
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//"composite"
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//templateSpecifiersList=TemplateSpecifiersList?
		public Assignment getTemplateSpecifiersListAssignment_2() { return cTemplateSpecifiersListAssignment_2; }

		//TemplateSpecifiersList
		public RuleCall getTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_2_0() { return cTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_2_0; }

		//compositeFormalArgumentsList=FormalArgumentsList?
		public Assignment getCompositeFormalArgumentsListAssignment_3() { return cCompositeFormalArgumentsListAssignment_3; }

		//FormalArgumentsList
		public RuleCall getCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0() { return cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0; }

		//("extends" superType=[ArchitectureDefinition|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//superType=[ArchitectureDefinition|QualifiedName]
		public Assignment getSuperTypeAssignment_4_1() { return cSuperTypeAssignment_4_1; }

		//[ArchitectureDefinition|QualifiedName]
		public CrossReference getSuperTypeArchitectureDefinitionCrossReference_4_1_0() { return cSuperTypeArchitectureDefinitionCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeArchitectureDefinitionQualifiedNameParserRuleCall_4_1_0_1() { return cSuperTypeArchitectureDefinitionQualifiedNameParserRuleCall_4_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//elements+=(HostedInterfaceDefinition | SubComponentDefinition | BindingDefinition)*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//HostedInterfaceDefinition | SubComponentDefinition | BindingDefinition
		public Alternatives getElementsAlternatives_6_0() { return cElementsAlternatives_6_0; }

		//HostedInterfaceDefinition
		public RuleCall getElementsHostedInterfaceDefinitionParserRuleCall_6_0_0() { return cElementsHostedInterfaceDefinitionParserRuleCall_6_0_0; }

		//SubComponentDefinition
		public RuleCall getElementsSubComponentDefinitionParserRuleCall_6_0_1() { return cElementsSubComponentDefinitionParserRuleCall_6_0_1; }

		//BindingDefinition
		public RuleCall getElementsBindingDefinitionParserRuleCall_6_0_2() { return cElementsBindingDefinitionParserRuleCall_6_0_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class PrimitiveDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCompositeFormalArgumentsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0 = (RuleCall)cCompositeFormalArgumentsListAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperTypeArchitectureDefinitionCrossReference_4_1_0 = (CrossReference)cSuperTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperTypeArchitectureDefinitionQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cSuperTypeArchitectureDefinitionCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cElementsAlternatives_6_0 = (Alternatives)cElementsAssignment_6.eContents().get(0);
		private final RuleCall cElementsProvidedInterfaceDefinitionParserRuleCall_6_0_0 = (RuleCall)cElementsAlternatives_6_0.eContents().get(0);
		private final RuleCall cElementsRequiredInterfaceDefinitionParserRuleCall_6_0_1 = (RuleCall)cElementsAlternatives_6_0.eContents().get(1);
		private final RuleCall cElementsImplementationDefinitionParserRuleCall_6_0_2 = (RuleCall)cElementsAlternatives_6_0.eContents().get(2);
		private final RuleCall cElementsAttributeDefinitionParserRuleCall_6_0_3 = (RuleCall)cElementsAlternatives_6_0.eContents().get(3);
		private final RuleCall cElementsDataDefinitionParserRuleCall_6_0_4 = (RuleCall)cElementsAlternatives_6_0.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PrimitiveDefinition:
		//
		//	abstract?="abstract"? //(annotationsList=AnnotationsList)?
		//
		//	"primitive" name=QualifiedName compositeFormalArgumentsList=FormalArgumentsList? ("extends"
		//
		//	superType=[ArchitectureDefinition|QualifiedName])? "{" elements+=(ProvidedInterfaceDefinition |
		//
		//	RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition)* "}";
		public ParserRule getRule() { return rule; }

		//abstract?="abstract"? //(annotationsList=AnnotationsList)?
		//
		//"primitive" name=QualifiedName compositeFormalArgumentsList=FormalArgumentsList? ("extends"
		//
		//superType=[ArchitectureDefinition|QualifiedName])? "{" elements+=(ProvidedInterfaceDefinition |
		//
		//RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition)* "}"
		public Group getGroup() { return cGroup; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//"primitive"
		public Keyword getPrimitiveKeyword_1() { return cPrimitiveKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//compositeFormalArgumentsList=FormalArgumentsList?
		public Assignment getCompositeFormalArgumentsListAssignment_3() { return cCompositeFormalArgumentsListAssignment_3; }

		//FormalArgumentsList
		public RuleCall getCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0() { return cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0; }

		//("extends" superType=[ArchitectureDefinition|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//superType=[ArchitectureDefinition|QualifiedName]
		public Assignment getSuperTypeAssignment_4_1() { return cSuperTypeAssignment_4_1; }

		//[ArchitectureDefinition|QualifiedName]
		public CrossReference getSuperTypeArchitectureDefinitionCrossReference_4_1_0() { return cSuperTypeArchitectureDefinitionCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeArchitectureDefinitionQualifiedNameParserRuleCall_4_1_0_1() { return cSuperTypeArchitectureDefinitionQualifiedNameParserRuleCall_4_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition |
		//
		//DataDefinition)*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition |
		//
		//DataDefinition
		public Alternatives getElementsAlternatives_6_0() { return cElementsAlternatives_6_0; }

		//ProvidedInterfaceDefinition
		public RuleCall getElementsProvidedInterfaceDefinitionParserRuleCall_6_0_0() { return cElementsProvidedInterfaceDefinitionParserRuleCall_6_0_0; }

		//RequiredInterfaceDefinition
		public RuleCall getElementsRequiredInterfaceDefinitionParserRuleCall_6_0_1() { return cElementsRequiredInterfaceDefinitionParserRuleCall_6_0_1; }

		//ImplementationDefinition
		public RuleCall getElementsImplementationDefinitionParserRuleCall_6_0_2() { return cElementsImplementationDefinitionParserRuleCall_6_0_2; }

		//AttributeDefinition
		public RuleCall getElementsAttributeDefinitionParserRuleCall_6_0_3() { return cElementsAttributeDefinitionParserRuleCall_6_0_3; }

		//DataDefinition
		public RuleCall getElementsDataDefinitionParserRuleCall_6_0_4() { return cElementsDataDefinitionParserRuleCall_6_0_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeArchitectureDefinitionCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeArchitectureDefinitionQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperTypeArchitectureDefinitionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cElementsAlternatives_4_0 = (Alternatives)cElementsAssignment_4.eContents().get(0);
		private final RuleCall cElementsProvidedInterfaceDefinitionParserRuleCall_4_0_0 = (RuleCall)cElementsAlternatives_4_0.eContents().get(0);
		private final RuleCall cElementsRequiredInterfaceDefinitionParserRuleCall_4_0_1 = (RuleCall)cElementsAlternatives_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeDefinition: //(annotationsList=AnnotationsList)?
		//
		//	"type" name=QualifiedName ("extends" superType=[ArchitectureDefinition|QualifiedName])? "{"
		//
		//	elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition)* "}";
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//"type" name=QualifiedName ("extends" superType=[ArchitectureDefinition|QualifiedName])? "{"
		//
		//elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition)* "}"
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("extends" superType=[ArchitectureDefinition|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=[ArchitectureDefinition|QualifiedName]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[ArchitectureDefinition|QualifiedName]
		public CrossReference getSuperTypeArchitectureDefinitionCrossReference_2_1_0() { return cSuperTypeArchitectureDefinitionCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperTypeArchitectureDefinitionQualifiedNameParserRuleCall_2_1_0_1() { return cSuperTypeArchitectureDefinitionQualifiedNameParserRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition)*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//ProvidedInterfaceDefinition | RequiredInterfaceDefinition
		public Alternatives getElementsAlternatives_4_0() { return cElementsAlternatives_4_0; }

		//ProvidedInterfaceDefinition
		public RuleCall getElementsProvidedInterfaceDefinitionParserRuleCall_4_0_0() { return cElementsProvidedInterfaceDefinitionParserRuleCall_4_0_0; }

		//RequiredInterfaceDefinition
		public RuleCall getElementsRequiredInterfaceDefinitionParserRuleCall_4_0_1() { return cElementsRequiredInterfaceDefinitionParserRuleCall_4_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class HostedInterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HostedInterfaceDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProvidedInterfaceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequiredInterfaceDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HostedInterfaceDefinition:
		//
		//	ProvidedInterfaceDefinition | RequiredInterfaceDefinition;
		public ParserRule getRule() { return rule; }

		//ProvidedInterfaceDefinition | RequiredInterfaceDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProvidedInterfaceDefinition
		public RuleCall getProvidedInterfaceDefinitionParserRuleCall_0() { return cProvidedInterfaceDefinitionParserRuleCall_0; }

		//RequiredInterfaceDefinition
		public RuleCall getRequiredInterfaceDefinitionParserRuleCall_1() { return cRequiredInterfaceDefinitionParserRuleCall_1; }
	}

	public class ProvidedInterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidedInterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRoleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRoleProvidesKeyword_0_0 = (Keyword)cRoleAssignment_0.eContents().get(0);
		private final Assignment cSignatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSignatureInterfaceDefinitionCrossReference_1_0 = (CrossReference)cSignatureAssignment_1.eContents().get(0);
		private final RuleCall cSignatureInterfaceDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cSignatureInterfaceDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cCollectionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_4_0_0 = (Keyword)cCollectionAssignment_4_0.eContents().get(0);
		private final Assignment cCollectionsizeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCollectionsizeINTTerminalRuleCall_4_1_0 = (RuleCall)cCollectionsizeAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Renamed as HostedInterfaceDefinition to resolve name clash with fractalItf::InterfaceDefinition
		//
		//// Another way to solve the problem is to use prefixes ?
		//
		//ProvidedInterfaceDefinition: //(annotationsList=AnnotationsList)?
		//
		//	role="provides" signature=[fractalItf::InterfaceDefinition|QualifiedName] "as" name=ID (collection?="["
		//
		//	collectionsize=INT? "]")? ";";
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//role="provides" signature=[fractalItf::InterfaceDefinition|QualifiedName] "as" name=ID (collection?="["
		//
		//collectionsize=INT? "]")? ";"
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//role="provides"
		public Assignment getRoleAssignment_0() { return cRoleAssignment_0; }

		//"provides"
		public Keyword getRoleProvidesKeyword_0_0() { return cRoleProvidesKeyword_0_0; }

		//signature=[fractalItf::InterfaceDefinition|QualifiedName]
		public Assignment getSignatureAssignment_1() { return cSignatureAssignment_1; }

		//[fractalItf::InterfaceDefinition|QualifiedName]
		public CrossReference getSignatureInterfaceDefinitionCrossReference_1_0() { return cSignatureInterfaceDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getSignatureInterfaceDefinitionQualifiedNameParserRuleCall_1_0_1() { return cSignatureInterfaceDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//(collection?="[" collectionsize=INT? "]")?
		public Group getGroup_4() { return cGroup_4; }

		//collection?="["
		public Assignment getCollectionAssignment_4_0() { return cCollectionAssignment_4_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_4_0_0() { return cCollectionLeftSquareBracketKeyword_4_0_0; }

		//collectionsize=INT?
		public Assignment getCollectionsizeAssignment_4_1() { return cCollectionsizeAssignment_4_1; }

		//INT
		public RuleCall getCollectionsizeINTTerminalRuleCall_4_1_0() { return cCollectionsizeINTTerminalRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class RequiredInterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredInterfaceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRoleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRoleRequiresKeyword_0_0 = (Keyword)cRoleAssignment_0.eContents().get(0);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalOptionalKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignatureInterfaceDefinitionCrossReference_2_0 = (CrossReference)cSignatureAssignment_2.eContents().get(0);
		private final RuleCall cSignatureInterfaceDefinitionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSignatureInterfaceDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cCollectionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_5_0_0 = (Keyword)cCollectionAssignment_5_0.eContents().get(0);
		private final Assignment cCollectionsizeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCollectionsizeINTTerminalRuleCall_5_1_0 = (RuleCall)cCollectionsizeAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RequiredInterfaceDefinition: //(annotationsList=AnnotationsList)?
		//
		//	role="requires" optional?="optional"? signature=[fractalItf::InterfaceDefinition|QualifiedName] "as" name=ID
		//
		//	(collection?="[" collectionsize=INT? "]")? ";";
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//role="requires" optional?="optional"? signature=[fractalItf::InterfaceDefinition|QualifiedName] "as" name=ID
		//
		//(collection?="[" collectionsize=INT? "]")? ";"
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//role="requires"
		public Assignment getRoleAssignment_0() { return cRoleAssignment_0; }

		//"requires"
		public Keyword getRoleRequiresKeyword_0_0() { return cRoleRequiresKeyword_0_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_1_0() { return cOptionalOptionalKeyword_1_0; }

		//signature=[fractalItf::InterfaceDefinition|QualifiedName]
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }

		//[fractalItf::InterfaceDefinition|QualifiedName]
		public CrossReference getSignatureInterfaceDefinitionCrossReference_2_0() { return cSignatureInterfaceDefinitionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getSignatureInterfaceDefinitionQualifiedNameParserRuleCall_2_0_1() { return cSignatureInterfaceDefinitionQualifiedNameParserRuleCall_2_0_1; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//(collection?="[" collectionsize=INT? "]")?
		public Group getGroup_5() { return cGroup_5; }

		//collection?="["
		public Assignment getCollectionAssignment_5_0() { return cCollectionAssignment_5_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_5_0_0() { return cCollectionLeftSquareBracketKeyword_5_0_0; }

		//collectionsize=INT?
		public Assignment getCollectionsizeAssignment_5_1() { return cCollectionsizeAssignment_5_1; }

		//INT
		public RuleCall getCollectionsizeINTTerminalRuleCall_5_1_0() { return cCollectionsizeINTTerminalRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class SubComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeArchitectureDefinitionCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeArchitectureDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeArchitectureDefinitionCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTemplatesListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTemplatesListTemplateDefinitionParserRuleCall_2_1_0 = (RuleCall)cTemplatesListAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTemplatesListAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTemplatesListTemplateDefinitionParserRuleCall_2_2_1_0 = (RuleCall)cTemplatesListAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_3_1_0 = (RuleCall)cArgumentsListAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_3_2_1_0 = (RuleCall)cArgumentsListAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodySubComponentBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SubComponentDefinition: //(annotationsList=AnnotationsList)?
		//
		//	"contains" type=[ArchitectureDefinition|QualifiedName]? ("<" templatesList+=TemplateDefinition (","
		//
		//	templatesList+=TemplateDefinition)* ">")? ("(" argumentsList+=ArgumentDefinition (","
		//
		//	argumentsList+=ArgumentDefinition)* ")")? "as" name=ID body=SubComponentBody? ";";
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//"contains" type=[ArchitectureDefinition|QualifiedName]? ("<" templatesList+=TemplateDefinition (","
		//
		//templatesList+=TemplateDefinition)* ">")? ("(" argumentsList+=ArgumentDefinition (","
		//
		//argumentsList+=ArgumentDefinition)* ")")? "as" name=ID body=SubComponentBody? ";"
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//"contains"
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }

		//type=[ArchitectureDefinition|QualifiedName]?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[ArchitectureDefinition|QualifiedName]
		public CrossReference getTypeArchitectureDefinitionCrossReference_1_0() { return cTypeArchitectureDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeArchitectureDefinitionQualifiedNameParserRuleCall_1_0_1() { return cTypeArchitectureDefinitionQualifiedNameParserRuleCall_1_0_1; }

		//("<" templatesList+=TemplateDefinition ("," templatesList+=TemplateDefinition)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//templatesList+=TemplateDefinition
		public Assignment getTemplatesListAssignment_2_1() { return cTemplatesListAssignment_2_1; }

		//TemplateDefinition
		public RuleCall getTemplatesListTemplateDefinitionParserRuleCall_2_1_0() { return cTemplatesListTemplateDefinitionParserRuleCall_2_1_0; }

		//("," templatesList+=TemplateDefinition)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//templatesList+=TemplateDefinition
		public Assignment getTemplatesListAssignment_2_2_1() { return cTemplatesListAssignment_2_2_1; }

		//TemplateDefinition
		public RuleCall getTemplatesListTemplateDefinitionParserRuleCall_2_2_1_0() { return cTemplatesListTemplateDefinitionParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_3_1() { return cArgumentsListAssignment_3_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_3_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_3_1_0; }

		//("," argumentsList+=ArgumentDefinition)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_3_2_1() { return cArgumentsListAssignment_3_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_3_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//body=SubComponentBody?
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//SubComponentBody
		public RuleCall getBodySubComponentBodyParserRuleCall_6_0() { return cBodySubComponentBodyParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class SubComponentBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponentBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubComponentCompositeBodyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubComponentPrimitiveBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SubComponentBody:
		//
		//	SubComponentCompositeBody | SubComponentPrimitiveBody;
		public ParserRule getRule() { return rule; }

		//SubComponentCompositeBody | SubComponentPrimitiveBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubComponentCompositeBody
		public RuleCall getSubComponentCompositeBodyParserRuleCall_0() { return cSubComponentCompositeBodyParserRuleCall_0; }

		//SubComponentPrimitiveBody
		public RuleCall getSubComponentPrimitiveBodyParserRuleCall_1() { return cSubComponentPrimitiveBodyParserRuleCall_1; }
	}

	public class SubComponentCompositeBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponentCompositeBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAnonymousCompositeKeyword_0_0 = (Keyword)cAnonymousAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cElementsAlternatives_2_0 = (Alternatives)cElementsAssignment_2.eContents().get(0);
		private final RuleCall cElementsSubComponentDefinitionParserRuleCall_2_0_0 = (RuleCall)cElementsAlternatives_2_0.eContents().get(0);
		private final RuleCall cElementsProvidedInterfaceDefinitionParserRuleCall_2_0_1 = (RuleCall)cElementsAlternatives_2_0.eContents().get(1);
		private final RuleCall cElementsRequiredInterfaceDefinitionParserRuleCall_2_0_2 = (RuleCall)cElementsAlternatives_2_0.eContents().get(2);
		private final RuleCall cElementsBindingDefinitionParserRuleCall_2_0_3 = (RuleCall)cElementsAlternatives_2_0.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubComponentCompositeBody:
		//
		//	anonymous?= // true but the existence of this body in the SubComponentDefinition rule
		//
		//	"composite" // implies an anonymous component anyway
		//
		//	"{" elements+=(SubComponentDefinition | ProvidedInterfaceDefinition | RequiredInterfaceDefinition | BindingDefinition)*
		//
		//	"}";
		public ParserRule getRule() { return rule; }

		//anonymous?= // true but the existence of this body in the SubComponentDefinition rule
		//
		//"composite" // implies an anonymous component anyway
		//
		//"{" elements+=(SubComponentDefinition | ProvidedInterfaceDefinition | RequiredInterfaceDefinition | BindingDefinition)*
		//
		//"}"
		public Group getGroup() { return cGroup; }

		//anonymous?= // true but the existence of this body in the SubComponentDefinition rule
		//
		//"composite"
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }

		//// true but the existence of this body in the SubComponentDefinition rule
		//
		//"composite"
		public Keyword getAnonymousCompositeKeyword_0_0() { return cAnonymousCompositeKeyword_0_0; }

		//// implies an anonymous component anyway
		//
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=(SubComponentDefinition | ProvidedInterfaceDefinition | RequiredInterfaceDefinition | BindingDefinition)*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//SubComponentDefinition | ProvidedInterfaceDefinition | RequiredInterfaceDefinition | BindingDefinition
		public Alternatives getElementsAlternatives_2_0() { return cElementsAlternatives_2_0; }

		//SubComponentDefinition
		public RuleCall getElementsSubComponentDefinitionParserRuleCall_2_0_0() { return cElementsSubComponentDefinitionParserRuleCall_2_0_0; }

		//ProvidedInterfaceDefinition
		public RuleCall getElementsProvidedInterfaceDefinitionParserRuleCall_2_0_1() { return cElementsProvidedInterfaceDefinitionParserRuleCall_2_0_1; }

		//RequiredInterfaceDefinition
		public RuleCall getElementsRequiredInterfaceDefinitionParserRuleCall_2_0_2() { return cElementsRequiredInterfaceDefinitionParserRuleCall_2_0_2; }

		//BindingDefinition
		public RuleCall getElementsBindingDefinitionParserRuleCall_2_0_3() { return cElementsBindingDefinitionParserRuleCall_2_0_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SubComponentPrimitiveBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponentPrimitiveBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAnonymousPrimitiveKeyword_0_0 = (Keyword)cAnonymousAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cElementsAlternatives_2_0 = (Alternatives)cElementsAssignment_2.eContents().get(0);
		private final RuleCall cElementsProvidedInterfaceDefinitionParserRuleCall_2_0_0 = (RuleCall)cElementsAlternatives_2_0.eContents().get(0);
		private final RuleCall cElementsRequiredInterfaceDefinitionParserRuleCall_2_0_1 = (RuleCall)cElementsAlternatives_2_0.eContents().get(1);
		private final RuleCall cElementsImplementationDefinitionParserRuleCall_2_0_2 = (RuleCall)cElementsAlternatives_2_0.eContents().get(2);
		private final RuleCall cElementsAttributeDefinitionParserRuleCall_2_0_3 = (RuleCall)cElementsAlternatives_2_0.eContents().get(3);
		private final RuleCall cElementsDataDefinitionParserRuleCall_2_0_4 = (RuleCall)cElementsAlternatives_2_0.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubComponentPrimitiveBody:
		//
		//	anonymous?= // true but the existence of this body in the SubComponentDefinition rule
		//
		//	"primitive" // implies an anonymous component anyway
		//
		//	"{" elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition |
		//
		//	AttributeDefinition | DataDefinition)* "}";
		public ParserRule getRule() { return rule; }

		//anonymous?= // true but the existence of this body in the SubComponentDefinition rule
		//
		//"primitive" // implies an anonymous component anyway
		//
		//"{" elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition |
		//
		//AttributeDefinition | DataDefinition)* "}"
		public Group getGroup() { return cGroup; }

		//anonymous?= // true but the existence of this body in the SubComponentDefinition rule
		//
		//"primitive"
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }

		//// true but the existence of this body in the SubComponentDefinition rule
		//
		//"primitive"
		public Keyword getAnonymousPrimitiveKeyword_0_0() { return cAnonymousPrimitiveKeyword_0_0; }

		//// implies an anonymous component anyway
		//
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition |
		//
		//DataDefinition)*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition |
		//
		//DataDefinition
		public Alternatives getElementsAlternatives_2_0() { return cElementsAlternatives_2_0; }

		//ProvidedInterfaceDefinition
		public RuleCall getElementsProvidedInterfaceDefinitionParserRuleCall_2_0_0() { return cElementsProvidedInterfaceDefinitionParserRuleCall_2_0_0; }

		//RequiredInterfaceDefinition
		public RuleCall getElementsRequiredInterfaceDefinitionParserRuleCall_2_0_1() { return cElementsRequiredInterfaceDefinitionParserRuleCall_2_0_1; }

		//ImplementationDefinition
		public RuleCall getElementsImplementationDefinitionParserRuleCall_2_0_2() { return cElementsImplementationDefinitionParserRuleCall_2_0_2; }

		//AttributeDefinition
		public RuleCall getElementsAttributeDefinitionParserRuleCall_2_0_3() { return cElementsAttributeDefinitionParserRuleCall_2_0_3; }

		//DataDefinition
		public RuleCall getElementsDataDefinitionParserRuleCall_2_0_4() { return cElementsDataDefinitionParserRuleCall_2_0_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHostedInterfaceDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Check if this rules is in accordance with the original grammar
		//
		//Element:
		//
		//	CompositeElement | PrimitiveElement | HostedInterfaceDefinition;
		public ParserRule getRule() { return rule; }

		//CompositeElement | PrimitiveElement | HostedInterfaceDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeElement
		public RuleCall getCompositeElementParserRuleCall_0() { return cCompositeElementParserRuleCall_0; }

		//PrimitiveElement
		public RuleCall getPrimitiveElementParserRuleCall_1() { return cPrimitiveElementParserRuleCall_1; }

		//HostedInterfaceDefinition
		public RuleCall getHostedInterfaceDefinitionParserRuleCall_2() { return cHostedInterfaceDefinitionParserRuleCall_2; }
	}

	public class CompositeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHostedInterfaceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubComponentDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBindingDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CompositeElement:
		//
		//	HostedInterfaceDefinition | SubComponentDefinition | BindingDefinition;
		public ParserRule getRule() { return rule; }

		//HostedInterfaceDefinition | SubComponentDefinition | BindingDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//HostedInterfaceDefinition
		public RuleCall getHostedInterfaceDefinitionParserRuleCall_0() { return cHostedInterfaceDefinitionParserRuleCall_0; }

		//SubComponentDefinition
		public RuleCall getSubComponentDefinitionParserRuleCall_1() { return cSubComponentDefinitionParserRuleCall_1; }

		//BindingDefinition
		public RuleCall getBindingDefinitionParserRuleCall_2() { return cBindingDefinitionParserRuleCall_2; }
	}

	public class PrimitiveElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHostedInterfaceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImplementationDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveElement:
		//
		//	HostedInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition;
		public ParserRule getRule() { return rule; }

		//HostedInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//HostedInterfaceDefinition
		public RuleCall getHostedInterfaceDefinitionParserRuleCall_0() { return cHostedInterfaceDefinitionParserRuleCall_0; }

		//ImplementationDefinition
		public RuleCall getImplementationDefinitionParserRuleCall_1() { return cImplementationDefinitionParserRuleCall_1; }

		//AttributeDefinition
		public RuleCall getAttributeDefinitionParserRuleCall_2() { return cAttributeDefinitionParserRuleCall_2; }

		//DataDefinition
		public RuleCall getDataDefinitionParserRuleCall_3() { return cDataDefinitionParserRuleCall_3; }
	}

	public class BindingDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindingDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cThisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cSourceParentAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cSourceParentSubComponentDefinitionCrossReference_1_1_0 = (CrossReference)cSourceParentAssignment_1_1.eContents().get(0);
		private final RuleCall cSourceParentSubComponentDefinitionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cSourceParentSubComponentDefinitionCrossReference_1_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceInterfaceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceInterfaceRequiredInterfaceDefinitionCrossReference_3_0 = (CrossReference)cSourceInterfaceAssignment_3.eContents().get(0);
		private final RuleCall cSourceInterfaceRequiredInterfaceDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceInterfaceRequiredInterfaceDefinitionCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourceIndexAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSourceIndexINTTerminalRuleCall_4_1_0 = (RuleCall)cSourceIndexAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cThisKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Assignment cTargetParentAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final CrossReference cTargetParentSubComponentDefinitionCrossReference_6_1_0 = (CrossReference)cTargetParentAssignment_6_1.eContents().get(0);
		private final RuleCall cTargetParentSubComponentDefinitionIDTerminalRuleCall_6_1_0_1 = (RuleCall)cTargetParentSubComponentDefinitionCrossReference_6_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetInterfaceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetInterfaceProvidedInterfaceDefinitionCrossReference_8_0 = (CrossReference)cTargetInterfaceAssignment_8.eContents().get(0);
		private final RuleCall cTargetInterfaceProvidedInterfaceDefinitionIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetInterfaceProvidedInterfaceDefinitionCrossReference_8_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLeftSquareBracketKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cTargetIndexAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cTargetIndexINTTerminalRuleCall_9_1_0 = (RuleCall)cTargetIndexAssignment_9_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// The correct auto-completion scoping for Bindings is implemented in org.ow2.mindEd.adl.textual.scoping.FractalScopeProvider
		//
		//// This could be assimilated to filtering elements from the references pool to provide only pertinent ones.
		//
		//BindingDefinition: //(annotationsList=AnnotationsList)?
		//
		//	"binds" ("this" | sourceParent=[SubComponentDefinition]) "." sourceInterface=[RequiredInterfaceDefinition] ("["
		//
		//	sourceIndex=INT "]")? "to" ("this" | targetParent=[SubComponentDefinition]) "."
		//
		//	targetInterface=[ProvidedInterfaceDefinition] ("[" targetIndex=INT "]")? ";";
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//"binds" ("this" | sourceParent=[SubComponentDefinition]) "." sourceInterface=[RequiredInterfaceDefinition] ("["
		//
		//sourceIndex=INT "]")? "to" ("this" | targetParent=[SubComponentDefinition]) "."
		//
		//targetInterface=[ProvidedInterfaceDefinition] ("[" targetIndex=INT "]")? ";"
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//"binds"
		public Keyword getBindsKeyword_0() { return cBindsKeyword_0; }

		//"this" | sourceParent=[SubComponentDefinition]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"this"
		public Keyword getThisKeyword_1_0() { return cThisKeyword_1_0; }

		//sourceParent=[SubComponentDefinition]
		public Assignment getSourceParentAssignment_1_1() { return cSourceParentAssignment_1_1; }

		//[SubComponentDefinition]
		public CrossReference getSourceParentSubComponentDefinitionCrossReference_1_1_0() { return cSourceParentSubComponentDefinitionCrossReference_1_1_0; }

		//ID
		public RuleCall getSourceParentSubComponentDefinitionIDTerminalRuleCall_1_1_0_1() { return cSourceParentSubComponentDefinitionIDTerminalRuleCall_1_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//sourceInterface=[RequiredInterfaceDefinition]
		public Assignment getSourceInterfaceAssignment_3() { return cSourceInterfaceAssignment_3; }

		//[RequiredInterfaceDefinition]
		public CrossReference getSourceInterfaceRequiredInterfaceDefinitionCrossReference_3_0() { return cSourceInterfaceRequiredInterfaceDefinitionCrossReference_3_0; }

		//ID
		public RuleCall getSourceInterfaceRequiredInterfaceDefinitionIDTerminalRuleCall_3_0_1() { return cSourceInterfaceRequiredInterfaceDefinitionIDTerminalRuleCall_3_0_1; }

		//("[" sourceIndex=INT "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//sourceIndex=INT
		public Assignment getSourceIndexAssignment_4_1() { return cSourceIndexAssignment_4_1; }

		//INT
		public RuleCall getSourceIndexINTTerminalRuleCall_4_1_0() { return cSourceIndexINTTerminalRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//"this" | targetParent=[SubComponentDefinition]
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"this"
		public Keyword getThisKeyword_6_0() { return cThisKeyword_6_0; }

		//targetParent=[SubComponentDefinition]
		public Assignment getTargetParentAssignment_6_1() { return cTargetParentAssignment_6_1; }

		//[SubComponentDefinition]
		public CrossReference getTargetParentSubComponentDefinitionCrossReference_6_1_0() { return cTargetParentSubComponentDefinitionCrossReference_6_1_0; }

		//ID
		public RuleCall getTargetParentSubComponentDefinitionIDTerminalRuleCall_6_1_0_1() { return cTargetParentSubComponentDefinitionIDTerminalRuleCall_6_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }

		//targetInterface=[ProvidedInterfaceDefinition]
		public Assignment getTargetInterfaceAssignment_8() { return cTargetInterfaceAssignment_8; }

		//[ProvidedInterfaceDefinition]
		public CrossReference getTargetInterfaceProvidedInterfaceDefinitionCrossReference_8_0() { return cTargetInterfaceProvidedInterfaceDefinitionCrossReference_8_0; }

		//ID
		public RuleCall getTargetInterfaceProvidedInterfaceDefinitionIDTerminalRuleCall_8_0_1() { return cTargetInterfaceProvidedInterfaceDefinitionIDTerminalRuleCall_8_0_1; }

		//("[" targetIndex=INT "]")?
		public Group getGroup_9() { return cGroup_9; }

		//"["
		public Keyword getLeftSquareBracketKeyword_9_0() { return cLeftSquareBracketKeyword_9_0; }

		//targetIndex=INT
		public Assignment getTargetIndexAssignment_9_1() { return cTargetIndexAssignment_9_1; }

		//INT
		public RuleCall getTargetIndexINTTerminalRuleCall_9_1_0() { return cTargetIndexINTTerminalRuleCall_9_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_9_2() { return cRightSquareBracketKeyword_9_2; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class FormalArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalArgument");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FormalArgument:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class FormalArgumentsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalArgumentsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormalArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormalArgumentsFormalArgumentParserRuleCall_1_0 = (RuleCall)cFormalArgumentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormalArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormalArgumentsFormalArgumentParserRuleCall_2_1_0 = (RuleCall)cFormalArgumentsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FormalArgumentsList:
		//
		//	"(" formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)* ")";
		public ParserRule getRule() { return rule; }

		//"(" formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//formalArguments+=FormalArgument
		public Assignment getFormalArgumentsAssignment_1() { return cFormalArgumentsAssignment_1; }

		//FormalArgument
		public RuleCall getFormalArgumentsFormalArgumentParserRuleCall_1_0() { return cFormalArgumentsFormalArgumentParserRuleCall_1_0; }

		//("," formalArguments+=FormalArgument)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//formalArguments+=FormalArgument
		public Assignment getFormalArgumentsAssignment_2_1() { return cFormalArgumentsAssignment_2_1; }

		//FormalArgument
		public RuleCall getFormalArgumentsFormalArgumentParserRuleCall_2_1_0() { return cFormalArgumentsFormalArgumentParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TemplateSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cConformstoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReferenceTypeDefinitionCrossReference_2_0 = (CrossReference)cReferenceAssignment_2.eContents().get(0);
		private final RuleCall cReferenceTypeDefinitionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cReferenceTypeDefinitionCrossReference_2_0.eContents().get(1);
		
		//TemplateSpecifier:
		//
		//	name=ID "conformsto" reference=[TypeDefinition|QualifiedName];
		public ParserRule getRule() { return rule; }

		//name=ID "conformsto" reference=[TypeDefinition|QualifiedName]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"conformsto"
		public Keyword getConformstoKeyword_1() { return cConformstoKeyword_1; }

		//reference=[TypeDefinition|QualifiedName]
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }

		//[TypeDefinition|QualifiedName]
		public CrossReference getReferenceTypeDefinitionCrossReference_2_0() { return cReferenceTypeDefinitionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getReferenceTypeDefinitionQualifiedNameParserRuleCall_2_0_1() { return cReferenceTypeDefinitionQualifiedNameParserRuleCall_2_0_1; }
	}

	public class TemplateSpecifiersListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateSpecifiersList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTemplateSpecifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0 = (RuleCall)cTemplateSpecifiersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTemplateSpecifiersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0 = (RuleCall)cTemplateSpecifiersAssignment_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TemplateSpecifiersList:
		//
		//	"<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">";
		public ParserRule getRule() { return rule; }

		//"<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*
		public Group getGroup_1() { return cGroup_1; }

		//templateSpecifiers+=TemplateSpecifier
		public Assignment getTemplateSpecifiersAssignment_1_0() { return cTemplateSpecifiersAssignment_1_0; }

		//TemplateSpecifier
		public RuleCall getTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0() { return cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0; }

		//("," templateSpecifiers+=TemplateSpecifier)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//templateSpecifiers+=TemplateSpecifier
		public Assignment getTemplateSpecifiersAssignment_1_1_1() { return cTemplateSpecifiersAssignment_1_1_1; }

		//TemplateSpecifier
		public RuleCall getTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0() { return cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSTRUCTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUNIONKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cENUMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AttributeType:
		//
		//	"STRUCT" | "UNION" | "ENUM" | ID;
		public ParserRule getRule() { return rule; }

		//"STRUCT" | "UNION" | "ENUM" | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"STRUCT"
		public Keyword getSTRUCTKeyword_0() { return cSTRUCTKeyword_0; }

		//"UNION"
		public Keyword getUNIONKeyword_1() { return cUNIONKeyword_1; }

		//"ENUM"
		public Keyword getENUMKeyword_2() { return cENUMKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
	}

	public class SignedINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signedINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//signedINT:
		//
		//	("+" | "-")? INT;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class HexadecimalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexadecimalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//HexadecimalType:
		//
		//	"0x" INT;
		public ParserRule getRule() { return rule; }

		//"0x" INT
		public Group getGroup() { return cGroup; }

		//"0x"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignedINTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHexadecimalTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cNullKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Value:
		//
		//	ID | signedINT | HexadecimalType | STRING | "null";
		public ParserRule getRule() { return rule; }

		//ID | signedINT | HexadecimalType | STRING | "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//signedINT
		public RuleCall getSignedINTParserRuleCall_1() { return cSignedINTParserRuleCall_1; }

		//HexadecimalType
		public RuleCall getHexadecimalTypeParserRuleCall_2() { return cHexadecimalTypeParserRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//"null"
		public Keyword getNullKeyword_4() { return cNullKeyword_4; }
	}

	public class TemplateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceCompositeDefinitionCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceCompositeDefinitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cReferenceCompositeDefinitionCrossReference_1_0.eContents().get(1);
		
		//TemplateDefinition:
		//
		//	(name=ID "=")? reference=[CompositeDefinition|QualifiedName];
		public ParserRule getRule() { return rule; }

		//(name=ID "=")? reference=[CompositeDefinition|QualifiedName]
		public Group getGroup() { return cGroup; }

		//(name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//reference=[CompositeDefinition|QualifiedName]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[CompositeDefinition|QualifiedName]
		public CrossReference getReferenceCompositeDefinitionCrossReference_1_0() { return cReferenceCompositeDefinitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getReferenceCompositeDefinitionQualifiedNameParserRuleCall_1_0_1() { return cReferenceCompositeDefinitionQualifiedNameParserRuleCall_1_0_1; }
	}

	public class ArgumentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cArgumentNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgumentNameIDTerminalRuleCall_0_0_0 = (RuleCall)cArgumentNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArgumentValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentValueValueParserRuleCall_1_0 = (RuleCall)cArgumentValueAssignment_1.eContents().get(0);
		
		//ArgumentDefinition:
		//
		//	(argumentName=ID "=")? argumentValue=Value;
		public ParserRule getRule() { return rule; }

		//(argumentName=ID "=")? argumentValue=Value
		public Group getGroup() { return cGroup; }

		//(argumentName=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//argumentName=ID
		public Assignment getArgumentNameAssignment_0_0() { return cArgumentNameAssignment_0_0; }

		//ID
		public RuleCall getArgumentNameIDTerminalRuleCall_0_0_0() { return cArgumentNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//argumentValue=Value
		public Assignment getArgumentValueAssignment_1() { return cArgumentValueAssignment_1; }

		//Value
		public RuleCall getArgumentValueValueParserRuleCall_1_0() { return cArgumentValueValueParserRuleCall_1_0; }
	}

	public class AttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAttributeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cAttributeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeNameIDTerminalRuleCall_2_0 = (RuleCall)cAttributeNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//AttributeDefinition: //(annotationsList=AnnotationsList)?
		//
		//	"attribute" type=AttributeType? attributeName=ID ("=" value=Value)?;
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//"attribute" type=AttributeType? attributeName=ID ("=" value=Value)?
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//"attribute"
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }

		//type=AttributeType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_1_0() { return cTypeAttributeTypeParserRuleCall_1_0; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_2() { return cAttributeNameAssignment_2; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_2_0() { return cAttributeNameIDTerminalRuleCall_2_0; }

		//("=" value=Value)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//value=Value
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_1_0() { return cValueValueParserRuleCall_3_1_0; }
	}

	public class ImplementationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFileCAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFileCFileCParserRuleCall_1_0_0 = (RuleCall)cFileCAssignment_1_0.eContents().get(0);
		private final Assignment cInlineCcodeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInlineCcodeInlineCodeCParserRuleCall_1_1_0 = (RuleCall)cInlineCcodeAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImplementationDefinition: //(annotationsList=AnnotationsList)?
		//
		//	"source" (fileC=FileC | inlineCcode=InlineCodeC) ";";
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//"source" (fileC=FileC | inlineCcode=InlineCodeC) ";"
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//"source"
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//fileC=FileC | inlineCcode=InlineCodeC
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//fileC=FileC
		public Assignment getFileCAssignment_1_0() { return cFileCAssignment_1_0; }

		//FileC
		public RuleCall getFileCFileCParserRuleCall_1_0_0() { return cFileCFileCParserRuleCall_1_0_0; }

		//inlineCcode=InlineCodeC
		public Assignment getInlineCcodeAssignment_1_1() { return cInlineCcodeAssignment_1_1; }

		//InlineCodeC
		public RuleCall getInlineCcodeInlineCodeCParserRuleCall_1_1_0() { return cInlineCcodeInlineCodeCParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DataDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFileCAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFileCFileCParserRuleCall_1_0_0 = (RuleCall)cFileCAssignment_1_0.eContents().get(0);
		private final Assignment cInlineCcodeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInlineCcodeInlineCodeCParserRuleCall_1_1_0 = (RuleCall)cInlineCcodeAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DataDefinition: //(annotationsList=AnnotationsList)?
		//
		//	"data" (fileC=FileC | inlineCcode=InlineCodeC) ";";
		public ParserRule getRule() { return rule; }

		////(annotationsList=AnnotationsList)?
		//
		//"data" (fileC=FileC | inlineCcode=InlineCodeC) ";"
		public Group getGroup() { return cGroup; }

		////(annotationsList=AnnotationsList)?
		//
		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//fileC=FileC | inlineCcode=InlineCodeC
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//fileC=FileC
		public Assignment getFileCAssignment_1_0() { return cFileCAssignment_1_0; }

		//FileC
		public RuleCall getFileCFileCParserRuleCall_1_0_0() { return cFileCFileCParserRuleCall_1_0_0; }

		//inlineCcode=InlineCodeC
		public Assignment getInlineCcodeAssignment_1_1() { return cInlineCcodeAssignment_1_1; }

		//InlineCodeC
		public RuleCall getInlineCcodeInlineCodeCParserRuleCall_1_1_0() { return cInlineCcodeInlineCodeCParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FileCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectoryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectoryPathParserRuleCall_0_0 = (RuleCall)cDirectoryAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFileNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FileC:
		//
		//	directory=Path? name=FileName;
		public ParserRule getRule() { return rule; }

		//directory=Path? name=FileName
		public Group getGroup() { return cGroup; }

		//directory=Path?
		public Assignment getDirectoryAssignment_0() { return cDirectoryAssignment_0; }

		//Path
		public RuleCall getDirectoryPathParserRuleCall_0_0() { return cDirectoryPathParserRuleCall_0_0; }

		//name=FileName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FileName
		public RuleCall getNameFileNameParserRuleCall_1_0() { return cNameFileNameParserRuleCall_1_0; }
	}

	public class InlineCodeCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineCodeC");
		private final Assignment cCodeCAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCodeCCODE_CTerminalRuleCall_0 = (RuleCall)cCodeCAssignment.eContents().get(0);
		
		//InlineCodeC:
		//
		//	codeC=CODE_C;
		public ParserRule getRule() { return rule; }

		//codeC=CODE_C
		public Assignment getCodeCAssignment() { return cCodeCAssignment; }

		//CODE_C
		public RuleCall getCodeCCODE_CTerminalRuleCall_0() { return cCodeCCODE_CTerminalRuleCall_0; }
	}

	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSLTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cSLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Path:
		//
		//	(ID | "." | "..")? (SL ((ID "-"?)* | ".."))* SL;
		public ParserRule getRule() { return rule; }

		//(ID | "." | "..")? (SL ((ID "-"?)* | ".."))* SL
		public Group getGroup() { return cGroup; }

		//(ID | "." | "..")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_0_2() { return cFullStopFullStopKeyword_0_2; }

		//(SL ((ID "-"?)* | ".."))*
		public Group getGroup_1() { return cGroup_1; }

		//SL
		public RuleCall getSLTerminalRuleCall_1_0() { return cSLTerminalRuleCall_1_0; }

		//(ID "-"?)* | ".."
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//(ID "-"?)*
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0_0() { return cIDTerminalRuleCall_1_1_0_0; }

		//"-"?
		public Keyword getHyphenMinusKeyword_1_1_0_1() { return cHyphenMinusKeyword_1_1_0_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_1_1() { return cFullStopFullStopKeyword_1_1_1; }

		//SL
		public RuleCall getSLTerminalRuleCall_2() { return cSLTerminalRuleCall_2; }
	}

	public class FileNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FileName:
		//
		//	ID ("." ID)?;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class AnnotationsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		
		//AnnotationsList:
		//
		//	annotations+=Annotation annotations+=Annotation*;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation annotations+=Annotation*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnnotationTypeParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationElementsAnnotationElementParserRuleCall_2_1_0 = (RuleCall)cAnnotationElementsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAnnotationElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0 = (RuleCall)cAnnotationElementsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Annotation:
		//
		//	"@" name=AnnotationType ("(" annotationElements+=AnnotationElement ("," annotationElements+=AnnotationElement)*
		//
		//	")")?;
		public ParserRule getRule() { return rule; }

		//"@" name=AnnotationType ("(" annotationElements+=AnnotationElement ("," annotationElements+=AnnotationElement)* ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=AnnotationType
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AnnotationType
		public RuleCall getNameAnnotationTypeParserRuleCall_1_0() { return cNameAnnotationTypeParserRuleCall_1_0; }

		//("(" annotationElements+=AnnotationElement ("," annotationElements+=AnnotationElement)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//annotationElements+=AnnotationElement
		public Assignment getAnnotationElementsAssignment_2_1() { return cAnnotationElementsAssignment_2_1; }

		//AnnotationElement
		public RuleCall getAnnotationElementsAnnotationElementParserRuleCall_2_1_0() { return cAnnotationElementsAnnotationElementParserRuleCall_2_1_0; }

		//("," annotationElements+=AnnotationElement)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//annotationElements+=AnnotationElement
		public Assignment getAnnotationElementsAssignment_2_2_1() { return cAnnotationElementsAssignment_2_2_1; }

		//AnnotationElement
		public RuleCall getAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0() { return cAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class AnnotationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOverrideKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSingletonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLDFlagsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCFlagsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final RuleCall cQualifiedNameParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// Pre-defined annotations + allow other names
		//
		//AnnotationType:
		//
		//	"Override" | "Singleton" | "LDFlags" | "CFlags" | QualifiedName;
		public ParserRule getRule() { return rule; }

		//"Override" | "Singleton" | "LDFlags" | "CFlags" | QualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Override"
		public Keyword getOverrideKeyword_0() { return cOverrideKeyword_0; }

		//"Singleton"
		public Keyword getSingletonKeyword_1() { return cSingletonKeyword_1; }

		//"LDFlags"
		public Keyword getLDFlagsKeyword_2() { return cLDFlagsKeyword_2; }

		//"CFlags"
		public Keyword getCFlagsKeyword_3() { return cCFlagsKeyword_3; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_4() { return cQualifiedNameParserRuleCall_4; }
	}

	public class AnnotationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cElementNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cElementNameIDTerminalRuleCall_0_0_0 = (RuleCall)cElementNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementValueElementValueParserRuleCall_1_0 = (RuleCall)cElementValueAssignment_1.eContents().get(0);
		
		//AnnotationElement:
		//
		//	(elementName=ID "=")? elementValue=ElementValue;
		public ParserRule getRule() { return rule; }

		//(elementName=ID "=")? elementValue=ElementValue
		public Group getGroup() { return cGroup; }

		//(elementName=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//elementName=ID
		public Assignment getElementNameAssignment_0_0() { return cElementNameAssignment_0_0; }

		//ID
		public RuleCall getElementNameIDTerminalRuleCall_0_0_0() { return cElementNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//elementValue=ElementValue
		public Assignment getElementValueAssignment_1() { return cElementValueAssignment_1; }

		//ElementValue
		public RuleCall getElementValueElementValueParserRuleCall_1_0() { return cElementValueElementValueParserRuleCall_1_0; }
	}

	public class ElementValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElementValueArrayInitializerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementValue:
		//
		//	ConstantValue | Annotation | ElementValueArrayInitializer;
		public ParserRule getRule() { return rule; }

		//ConstantValue | Annotation | ElementValueArrayInitializer
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstantValue
		public RuleCall getConstantValueParserRuleCall_0() { return cConstantValueParserRuleCall_0; }

		//Annotation
		public RuleCall getAnnotationParserRuleCall_1() { return cAnnotationParserRuleCall_1; }

		//ElementValueArrayInitializer
		public RuleCall getElementValueArrayInitializerParserRuleCall_2() { return cElementValueArrayInitializerParserRuleCall_2; }
	}

	public class ElementValueArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValueArrayInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesElementValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesElementValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElementValueArrayInitializer:
		//
		//	"{" values+=ElementValue ("," values+=ElementValue)* "}";
		public ParserRule getRule() { return rule; }

		//"{" values+=ElementValue ("," values+=ElementValue)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//values+=ElementValue
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//ElementValue
		public RuleCall getValuesElementValueParserRuleCall_1_0() { return cValuesElementValueParserRuleCall_1_0; }

		//("," values+=ElementValue)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=ElementValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//ElementValue
		public RuleCall getValuesElementValueParserRuleCall_2_1_0() { return cValuesElementValueParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueConstantFormatParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ConstantValue:
		//
		//	value=ConstantFormat;
		public ParserRule getRule() { return rule; }

		//value=ConstantFormat
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ConstantFormat
		public RuleCall getValueConstantFormatParserRuleCall_0() { return cValueConstantFormatParserRuleCall_0; }
	}

	public class ConstantFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstantFormat:
		//
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	private AdlDefinitionElements pAdlDefinition;
	private ArchitectureDefinitionElements pArchitectureDefinition;
	private ImportDefinitionElements pImportDefinition;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private CompositeDefinitionElements pCompositeDefinition;
	private PrimitiveDefinitionElements pPrimitiveDefinition;
	private TypeDefinitionElements pTypeDefinition;
	private HostedInterfaceDefinitionElements pHostedInterfaceDefinition;
	private ProvidedInterfaceDefinitionElements pProvidedInterfaceDefinition;
	private RequiredInterfaceDefinitionElements pRequiredInterfaceDefinition;
	private SubComponentDefinitionElements pSubComponentDefinition;
	private SubComponentBodyElements pSubComponentBody;
	private SubComponentCompositeBodyElements pSubComponentCompositeBody;
	private SubComponentPrimitiveBodyElements pSubComponentPrimitiveBody;
	private ElementElements pElement;
	private CompositeElementElements pCompositeElement;
	private PrimitiveElementElements pPrimitiveElement;
	private BindingDefinitionElements pBindingDefinition;
	private FormalArgumentElements pFormalArgument;
	private FormalArgumentsListElements pFormalArgumentsList;
	private TemplateSpecifierElements pTemplateSpecifier;
	private TemplateSpecifiersListElements pTemplateSpecifiersList;
	private AttributeTypeElements pAttributeType;
	private SignedINTElements pSignedINT;
	private HexadecimalTypeElements pHexadecimalType;
	private ValueElements pValue;
	private TemplateDefinitionElements pTemplateDefinition;
	private ArgumentDefinitionElements pArgumentDefinition;
	private AttributeDefinitionElements pAttributeDefinition;
	private ImplementationDefinitionElements pImplementationDefinition;
	private DataDefinitionElements pDataDefinition;
	private QualifiedNameElements pQualifiedName;
	private FileCElements pFileC;
	private InlineCodeCElements pInlineCodeC;
	private PathElements pPath;
	private FileNameElements pFileName;
	private AnnotationsListElements pAnnotationsList;
	private AnnotationElements pAnnotation;
	private AnnotationTypeElements pAnnotationType;
	private AnnotationElementElements pAnnotationElement;
	private ElementValueElements pElementValue;
	private ElementValueArrayInitializerElements pElementValueArrayInitializer;
	private ConstantValueElements pConstantValue;
	private ConstantFormatElements pConstantFormat;
	private TerminalRule tCODE_C;
	private TerminalRule tSL;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FractalGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ow2.mindEd.adl.textual.Fractal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AdlDefinition:
	//
	//	imports+=ImportDefinition* architectureDefinition=ArchitectureDefinition;
	public AdlDefinitionElements getAdlDefinitionAccess() {
		return (pAdlDefinition != null) ? pAdlDefinition : (pAdlDefinition = new AdlDefinitionElements());
	}
	
	public ParserRule getAdlDefinitionRule() {
		return getAdlDefinitionAccess().getRule();
	}

	/// *
	//
	// * SSZ Note: Mind package scoping is handled thanks to the
	//
	// * org.ow2.mindEd.adl.textual.scoping.FractalImportedNamespaceAwareLocalScopeProvider
	//
	// * to be able to manage implicit declaration during the component declaration.
	//
	// * / //// OLD
	//
	////AdlDefinition :
	//
	////	elements += AbstractElement*
	//
	////;
	//
	////
	//
	////AbstractElement:
	//
	////	/ * PackageDeclaration | * / ImportDefinition | ArchitectureDefinition
	//
	////;
	//
	//ArchitectureDefinition:
	//
	//	CompositeDefinition | PrimitiveDefinition | TypeDefinition;
	public ArchitectureDefinitionElements getArchitectureDefinitionAccess() {
		return (pArchitectureDefinition != null) ? pArchitectureDefinition : (pArchitectureDefinition = new ArchitectureDefinitionElements());
	}
	
	public ParserRule getArchitectureDefinitionRule() {
		return getArchitectureDefinitionAccess().getRule();
	}

	//ImportDefinition: //(annotationsList=AnnotationsList)?
	//
	//	"import" importedNamespace=QualifiedNameWithWildcard ";";
	public ImportDefinitionElements getImportDefinitionAccess() {
		return (pImportDefinition != null) ? pImportDefinition : (pImportDefinition = new ImportDefinitionElements());
	}
	
	public ParserRule getImportDefinitionRule() {
		return getImportDefinitionAccess().getRule();
	}

	/// *
	//
	//PackageDeclaration:
	//
	//	'package' name = QualifiedName ';'
	//
	//;
	//
	// * / QualifiedNameWithWildcard:
	//
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//CompositeDefinition: //(annotationsList=AnnotationsList)?
	//
	//	"composite" name=QualifiedName templateSpecifiersList=TemplateSpecifiersList? // <ID conformsto TypeDefinition, ID2 conformsto TypeDef2, ...>
	//
	//	compositeFormalArgumentsList=FormalArgumentsList? // (arg1, arg2, ...)
	//
	//	("extends" superType=[ArchitectureDefinition|QualifiedName])? "{" elements+=(HostedInterfaceDefinition |
	//
	//	SubComponentDefinition | BindingDefinition)* "}";
	public CompositeDefinitionElements getCompositeDefinitionAccess() {
		return (pCompositeDefinition != null) ? pCompositeDefinition : (pCompositeDefinition = new CompositeDefinitionElements());
	}
	
	public ParserRule getCompositeDefinitionRule() {
		return getCompositeDefinitionAccess().getRule();
	}

	//PrimitiveDefinition:
	//
	//	abstract?="abstract"? //(annotationsList=AnnotationsList)?
	//
	//	"primitive" name=QualifiedName compositeFormalArgumentsList=FormalArgumentsList? ("extends"
	//
	//	superType=[ArchitectureDefinition|QualifiedName])? "{" elements+=(ProvidedInterfaceDefinition |
	//
	//	RequiredInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition)* "}";
	public PrimitiveDefinitionElements getPrimitiveDefinitionAccess() {
		return (pPrimitiveDefinition != null) ? pPrimitiveDefinition : (pPrimitiveDefinition = new PrimitiveDefinitionElements());
	}
	
	public ParserRule getPrimitiveDefinitionRule() {
		return getPrimitiveDefinitionAccess().getRule();
	}

	//TypeDefinition: //(annotationsList=AnnotationsList)?
	//
	//	"type" name=QualifiedName ("extends" superType=[ArchitectureDefinition|QualifiedName])? "{"
	//
	//	elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition)* "}";
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return (pTypeDefinition != null) ? pTypeDefinition : (pTypeDefinition = new TypeDefinitionElements());
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//HostedInterfaceDefinition:
	//
	//	ProvidedInterfaceDefinition | RequiredInterfaceDefinition;
	public HostedInterfaceDefinitionElements getHostedInterfaceDefinitionAccess() {
		return (pHostedInterfaceDefinition != null) ? pHostedInterfaceDefinition : (pHostedInterfaceDefinition = new HostedInterfaceDefinitionElements());
	}
	
	public ParserRule getHostedInterfaceDefinitionRule() {
		return getHostedInterfaceDefinitionAccess().getRule();
	}

	//// Renamed as HostedInterfaceDefinition to resolve name clash with fractalItf::InterfaceDefinition
	//
	//// Another way to solve the problem is to use prefixes ?
	//
	//ProvidedInterfaceDefinition: //(annotationsList=AnnotationsList)?
	//
	//	role="provides" signature=[fractalItf::InterfaceDefinition|QualifiedName] "as" name=ID (collection?="["
	//
	//	collectionsize=INT? "]")? ";";
	public ProvidedInterfaceDefinitionElements getProvidedInterfaceDefinitionAccess() {
		return (pProvidedInterfaceDefinition != null) ? pProvidedInterfaceDefinition : (pProvidedInterfaceDefinition = new ProvidedInterfaceDefinitionElements());
	}
	
	public ParserRule getProvidedInterfaceDefinitionRule() {
		return getProvidedInterfaceDefinitionAccess().getRule();
	}

	//RequiredInterfaceDefinition: //(annotationsList=AnnotationsList)?
	//
	//	role="requires" optional?="optional"? signature=[fractalItf::InterfaceDefinition|QualifiedName] "as" name=ID
	//
	//	(collection?="[" collectionsize=INT? "]")? ";";
	public RequiredInterfaceDefinitionElements getRequiredInterfaceDefinitionAccess() {
		return (pRequiredInterfaceDefinition != null) ? pRequiredInterfaceDefinition : (pRequiredInterfaceDefinition = new RequiredInterfaceDefinitionElements());
	}
	
	public ParserRule getRequiredInterfaceDefinitionRule() {
		return getRequiredInterfaceDefinitionAccess().getRule();
	}

	//SubComponentDefinition: //(annotationsList=AnnotationsList)?
	//
	//	"contains" type=[ArchitectureDefinition|QualifiedName]? ("<" templatesList+=TemplateDefinition (","
	//
	//	templatesList+=TemplateDefinition)* ">")? ("(" argumentsList+=ArgumentDefinition (","
	//
	//	argumentsList+=ArgumentDefinition)* ")")? "as" name=ID body=SubComponentBody? ";";
	public SubComponentDefinitionElements getSubComponentDefinitionAccess() {
		return (pSubComponentDefinition != null) ? pSubComponentDefinition : (pSubComponentDefinition = new SubComponentDefinitionElements());
	}
	
	public ParserRule getSubComponentDefinitionRule() {
		return getSubComponentDefinitionAccess().getRule();
	}

	//SubComponentBody:
	//
	//	SubComponentCompositeBody | SubComponentPrimitiveBody;
	public SubComponentBodyElements getSubComponentBodyAccess() {
		return (pSubComponentBody != null) ? pSubComponentBody : (pSubComponentBody = new SubComponentBodyElements());
	}
	
	public ParserRule getSubComponentBodyRule() {
		return getSubComponentBodyAccess().getRule();
	}

	//SubComponentCompositeBody:
	//
	//	anonymous?= // true but the existence of this body in the SubComponentDefinition rule
	//
	//	"composite" // implies an anonymous component anyway
	//
	//	"{" elements+=(SubComponentDefinition | ProvidedInterfaceDefinition | RequiredInterfaceDefinition | BindingDefinition)*
	//
	//	"}";
	public SubComponentCompositeBodyElements getSubComponentCompositeBodyAccess() {
		return (pSubComponentCompositeBody != null) ? pSubComponentCompositeBody : (pSubComponentCompositeBody = new SubComponentCompositeBodyElements());
	}
	
	public ParserRule getSubComponentCompositeBodyRule() {
		return getSubComponentCompositeBodyAccess().getRule();
	}

	//SubComponentPrimitiveBody:
	//
	//	anonymous?= // true but the existence of this body in the SubComponentDefinition rule
	//
	//	"primitive" // implies an anonymous component anyway
	//
	//	"{" elements+=(ProvidedInterfaceDefinition | RequiredInterfaceDefinition | ImplementationDefinition |
	//
	//	AttributeDefinition | DataDefinition)* "}";
	public SubComponentPrimitiveBodyElements getSubComponentPrimitiveBodyAccess() {
		return (pSubComponentPrimitiveBody != null) ? pSubComponentPrimitiveBody : (pSubComponentPrimitiveBody = new SubComponentPrimitiveBodyElements());
	}
	
	public ParserRule getSubComponentPrimitiveBodyRule() {
		return getSubComponentPrimitiveBodyAccess().getRule();
	}

	//// Check if this rules is in accordance with the original grammar
	//
	//Element:
	//
	//	CompositeElement | PrimitiveElement | HostedInterfaceDefinition;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//CompositeElement:
	//
	//	HostedInterfaceDefinition | SubComponentDefinition | BindingDefinition;
	public CompositeElementElements getCompositeElementAccess() {
		return (pCompositeElement != null) ? pCompositeElement : (pCompositeElement = new CompositeElementElements());
	}
	
	public ParserRule getCompositeElementRule() {
		return getCompositeElementAccess().getRule();
	}

	//PrimitiveElement:
	//
	//	HostedInterfaceDefinition | ImplementationDefinition | AttributeDefinition | DataDefinition;
	public PrimitiveElementElements getPrimitiveElementAccess() {
		return (pPrimitiveElement != null) ? pPrimitiveElement : (pPrimitiveElement = new PrimitiveElementElements());
	}
	
	public ParserRule getPrimitiveElementRule() {
		return getPrimitiveElementAccess().getRule();
	}

	//// The correct auto-completion scoping for Bindings is implemented in org.ow2.mindEd.adl.textual.scoping.FractalScopeProvider
	//
	//// This could be assimilated to filtering elements from the references pool to provide only pertinent ones.
	//
	//BindingDefinition: //(annotationsList=AnnotationsList)?
	//
	//	"binds" ("this" | sourceParent=[SubComponentDefinition]) "." sourceInterface=[RequiredInterfaceDefinition] ("["
	//
	//	sourceIndex=INT "]")? "to" ("this" | targetParent=[SubComponentDefinition]) "."
	//
	//	targetInterface=[ProvidedInterfaceDefinition] ("[" targetIndex=INT "]")? ";";
	public BindingDefinitionElements getBindingDefinitionAccess() {
		return (pBindingDefinition != null) ? pBindingDefinition : (pBindingDefinition = new BindingDefinitionElements());
	}
	
	public ParserRule getBindingDefinitionRule() {
		return getBindingDefinitionAccess().getRule();
	}

	//FormalArgument:
	//
	//	name=ID;
	public FormalArgumentElements getFormalArgumentAccess() {
		return (pFormalArgument != null) ? pFormalArgument : (pFormalArgument = new FormalArgumentElements());
	}
	
	public ParserRule getFormalArgumentRule() {
		return getFormalArgumentAccess().getRule();
	}

	//FormalArgumentsList:
	//
	//	"(" formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)* ")";
	public FormalArgumentsListElements getFormalArgumentsListAccess() {
		return (pFormalArgumentsList != null) ? pFormalArgumentsList : (pFormalArgumentsList = new FormalArgumentsListElements());
	}
	
	public ParserRule getFormalArgumentsListRule() {
		return getFormalArgumentsListAccess().getRule();
	}

	//TemplateSpecifier:
	//
	//	name=ID "conformsto" reference=[TypeDefinition|QualifiedName];
	public TemplateSpecifierElements getTemplateSpecifierAccess() {
		return (pTemplateSpecifier != null) ? pTemplateSpecifier : (pTemplateSpecifier = new TemplateSpecifierElements());
	}
	
	public ParserRule getTemplateSpecifierRule() {
		return getTemplateSpecifierAccess().getRule();
	}

	//TemplateSpecifiersList:
	//
	//	"<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*) ">";
	public TemplateSpecifiersListElements getTemplateSpecifiersListAccess() {
		return (pTemplateSpecifiersList != null) ? pTemplateSpecifiersList : (pTemplateSpecifiersList = new TemplateSpecifiersListElements());
	}
	
	public ParserRule getTemplateSpecifiersListRule() {
		return getTemplateSpecifiersListAccess().getRule();
	}

	//AttributeType:
	//
	//	"STRUCT" | "UNION" | "ENUM" | ID;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (pAttributeType != null) ? pAttributeType : (pAttributeType = new AttributeTypeElements());
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//signedINT:
	//
	//	("+" | "-")? INT;
	public SignedINTElements getSignedINTAccess() {
		return (pSignedINT != null) ? pSignedINT : (pSignedINT = new SignedINTElements());
	}
	
	public ParserRule getSignedINTRule() {
		return getSignedINTAccess().getRule();
	}

	//HexadecimalType:
	//
	//	"0x" INT;
	public HexadecimalTypeElements getHexadecimalTypeAccess() {
		return (pHexadecimalType != null) ? pHexadecimalType : (pHexadecimalType = new HexadecimalTypeElements());
	}
	
	public ParserRule getHexadecimalTypeRule() {
		return getHexadecimalTypeAccess().getRule();
	}

	//Value:
	//
	//	ID | signedINT | HexadecimalType | STRING | "null";
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//TemplateDefinition:
	//
	//	(name=ID "=")? reference=[CompositeDefinition|QualifiedName];
	public TemplateDefinitionElements getTemplateDefinitionAccess() {
		return (pTemplateDefinition != null) ? pTemplateDefinition : (pTemplateDefinition = new TemplateDefinitionElements());
	}
	
	public ParserRule getTemplateDefinitionRule() {
		return getTemplateDefinitionAccess().getRule();
	}

	//ArgumentDefinition:
	//
	//	(argumentName=ID "=")? argumentValue=Value;
	public ArgumentDefinitionElements getArgumentDefinitionAccess() {
		return (pArgumentDefinition != null) ? pArgumentDefinition : (pArgumentDefinition = new ArgumentDefinitionElements());
	}
	
	public ParserRule getArgumentDefinitionRule() {
		return getArgumentDefinitionAccess().getRule();
	}

	//AttributeDefinition: //(annotationsList=AnnotationsList)?
	//
	//	"attribute" type=AttributeType? attributeName=ID ("=" value=Value)?;
	public AttributeDefinitionElements getAttributeDefinitionAccess() {
		return (pAttributeDefinition != null) ? pAttributeDefinition : (pAttributeDefinition = new AttributeDefinitionElements());
	}
	
	public ParserRule getAttributeDefinitionRule() {
		return getAttributeDefinitionAccess().getRule();
	}

	//ImplementationDefinition: //(annotationsList=AnnotationsList)?
	//
	//	"source" (fileC=FileC | inlineCcode=InlineCodeC) ";";
	public ImplementationDefinitionElements getImplementationDefinitionAccess() {
		return (pImplementationDefinition != null) ? pImplementationDefinition : (pImplementationDefinition = new ImplementationDefinitionElements());
	}
	
	public ParserRule getImplementationDefinitionRule() {
		return getImplementationDefinitionAccess().getRule();
	}

	//DataDefinition: //(annotationsList=AnnotationsList)?
	//
	//	"data" (fileC=FileC | inlineCcode=InlineCodeC) ";";
	public DataDefinitionElements getDataDefinitionAccess() {
		return (pDataDefinition != null) ? pDataDefinition : (pDataDefinition = new DataDefinitionElements());
	}
	
	public ParserRule getDataDefinitionRule() {
		return getDataDefinitionAccess().getRule();
	}

	//QualifiedName:
	//
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//FileC:
	//
	//	directory=Path? name=FileName;
	public FileCElements getFileCAccess() {
		return (pFileC != null) ? pFileC : (pFileC = new FileCElements());
	}
	
	public ParserRule getFileCRule() {
		return getFileCAccess().getRule();
	}

	//InlineCodeC:
	//
	//	codeC=CODE_C;
	public InlineCodeCElements getInlineCodeCAccess() {
		return (pInlineCodeC != null) ? pInlineCodeC : (pInlineCodeC = new InlineCodeCElements());
	}
	
	public ParserRule getInlineCodeCRule() {
		return getInlineCodeCAccess().getRule();
	}

	//Path:
	//
	//	(ID | "." | "..")? (SL ((ID "-"?)* | ".."))* SL;
	public PathElements getPathAccess() {
		return (pPath != null) ? pPath : (pPath = new PathElements());
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//FileName:
	//
	//	ID ("." ID)?;
	public FileNameElements getFileNameAccess() {
		return (pFileName != null) ? pFileName : (pFileName = new FileNameElements());
	}
	
	public ParserRule getFileNameRule() {
		return getFileNameAccess().getRule();
	}

	//AnnotationsList:
	//
	//	annotations+=Annotation annotations+=Annotation*;
	public AnnotationsListElements getAnnotationsListAccess() {
		return (pAnnotationsList != null) ? pAnnotationsList : (pAnnotationsList = new AnnotationsListElements());
	}
	
	public ParserRule getAnnotationsListRule() {
		return getAnnotationsListAccess().getRule();
	}

	//Annotation:
	//
	//	"@" name=AnnotationType ("(" annotationElements+=AnnotationElement ("," annotationElements+=AnnotationElement)*
	//
	//	")")?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Pre-defined annotations + allow other names
	//
	//AnnotationType:
	//
	//	"Override" | "Singleton" | "LDFlags" | "CFlags" | QualifiedName;
	public AnnotationTypeElements getAnnotationTypeAccess() {
		return (pAnnotationType != null) ? pAnnotationType : (pAnnotationType = new AnnotationTypeElements());
	}
	
	public ParserRule getAnnotationTypeRule() {
		return getAnnotationTypeAccess().getRule();
	}

	//AnnotationElement:
	//
	//	(elementName=ID "=")? elementValue=ElementValue;
	public AnnotationElementElements getAnnotationElementAccess() {
		return (pAnnotationElement != null) ? pAnnotationElement : (pAnnotationElement = new AnnotationElementElements());
	}
	
	public ParserRule getAnnotationElementRule() {
		return getAnnotationElementAccess().getRule();
	}

	//ElementValue:
	//
	//	ConstantValue | Annotation | ElementValueArrayInitializer;
	public ElementValueElements getElementValueAccess() {
		return (pElementValue != null) ? pElementValue : (pElementValue = new ElementValueElements());
	}
	
	public ParserRule getElementValueRule() {
		return getElementValueAccess().getRule();
	}

	//ElementValueArrayInitializer:
	//
	//	"{" values+=ElementValue ("," values+=ElementValue)* "}";
	public ElementValueArrayInitializerElements getElementValueArrayInitializerAccess() {
		return (pElementValueArrayInitializer != null) ? pElementValueArrayInitializer : (pElementValueArrayInitializer = new ElementValueArrayInitializerElements());
	}
	
	public ParserRule getElementValueArrayInitializerRule() {
		return getElementValueArrayInitializerAccess().getRule();
	}

	//ConstantValue:
	//
	//	value=ConstantFormat;
	public ConstantValueElements getConstantValueAccess() {
		return (pConstantValue != null) ? pConstantValue : (pConstantValue = new ConstantValueElements());
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ConstantFormat:
	//
	//	INT | STRING;
	public ConstantFormatElements getConstantFormatAccess() {
		return (pConstantFormat != null) ? pConstantFormat : (pConstantFormat = new ConstantFormatElements());
	}
	
	public ParserRule getConstantFormatRule() {
		return getConstantFormatAccess().getRule();
	}

	//terminal CODE_C:
	//
	//	"{{"->"}}";
	public TerminalRule getCODE_CRule() {
		return (tCODE_C != null) ? tCODE_C : (tCODE_C = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CODE_C"));
	} 

	////enum Role :
	//
	////	provides="provides" | requires="requires";
	//
	//terminal SL:
	//
	//	"\\" | "\\\\" | "/";
	public TerminalRule getSLRule() {
		return (tSL != null) ? tSL : (tSL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
