// automatically generated by Xtext
grammar org.ow2.fractal.mind.xtext.Fractal with org.eclipse.xtext.common.Terminals 

import "platform:/resource/org.ow2.fractal.mind.emf/model/mind.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AdlDefinition : 
((imports+=ImportDefinition)*)
(annotationsList=AnnotationsList)?
(architecturedefinition=ArchitectureDefinition);

ImportDefinition :
'import'importName=(FQN|FULL_IMPORT_NAME)';';

ArchitectureDefinition: 
(ComponentTypeDefinition)
|
(PrimitiveComponentDefinition)
|
(CompositeComponentDefinition)
;

PrimitiveComponentDefinition : 
(abstract?='abstract')? 
'primitive' 
name=FQN
(primitiveFormalArgumentsList=FormalArgumentsList)?
(referencesList=PrimitiveReferencesList)?
(('{'(body=PrimitiveBody)?'}')
|
body=PrimitiveBody)?
;

PrimitiveDefinitionElement :
InterfaceDefinition
|AttributeDefinition
|DataDefinition
|ImplementationDefinition;

ComponentTypeDefinition :
'type' name=FQN
(referencesList=TypeReferencesList)?
(('{'(body=TypeBody)?'}')
|
body=TypeBody)?
;

TypeReferenceDefinition :
referenceName=FQN;

TypeDefinitionElement : 
InterfaceDefinition;

CompositeComponentDefinition : 
'composite' name=FQN 
(templateSpecifiersList=TemplateSpecifiersList)?
(compositeFormalArgumentsList=FormalArgumentsList)?
(referencesList=CompositeReferencesList)?
(('{'(body=CompositeBody)?'}')
|
(body=CompositeBody))?
;

TemplateSpecifiersList :
'<'(templateSpecifiers+=TemplateSpecifier(','templateSpecifiers+=TemplateSpecifier)*)'>';

FormalArgumentsList :
'('(formalArguments+=FormalArgument(','formalArguments+=FormalArgument)*)')';

PrimitiveReferencesList :
'extends'references+=PrimitiveReferenceDefinition(','references+=PrimitiveReferenceDefinition)*;

CompositeReferencesList :
'extends'references+=CompositeReferenceDefinition(','references+=CompositeReferenceDefinition)*;

TypeReferencesList :
'extends'references+=TypeReferenceDefinition(','references+=TypeReferenceDefinition)*;

FormalArgument :
name=ID;

CompositeDefinitionElement :
SubComponentDefinition|InterfaceDefinition|BindingDefinition;

SubComponentDefinition :
(annotationsList=AnnotationsList)?
'contains' (referenceDefinition=ComponentReference)? 'as' name=ID

(
	(
		anonymous?='composite' 
		'{'body = CompositeBody'}'
	)
|
	(
		anonymous?='primitive' 
		'{'body = PrimitiveBody'}'
	)
)?
;

Body :
CompositeBody | PrimitiveBody | TypeBody;

CompositeBody :
(annotationsList=AnnotationsList)?
((elements+=CompositeDefinitionElement)(';')?)*;

PrimitiveBody :
(annotationsList=AnnotationsList)?
((elements+=PrimitiveDefinitionElement)(';')?)*;

TypeBody :
(annotationsList=AnnotationsList)?
((elements+=TypeDefinitionElement)(';')?)*;

Element :
CompositeDefinitionElement|PrimitiveDefinitionElement|TypeDefinitionElement;

ComponentReference :
CompositeReferenceDefinition
|PrimitiveReferenceDefinition
|TypeReferenceDefinition;

CompositeReferenceDefinition :
referenceName=FQN
("<"templatesList+=TemplateDefinition(","templatesList+=TemplateDefinition)*">")?
("("argumentsList+=ArgumentDefinition(","argumentsList+=ArgumentDefinition)*")")?
;

PrimitiveReferenceDefinition :
referenceName=FQN
("("argumentsList+=ArgumentDefinition(","argumentsList+=ArgumentDefinition)*")")?
;

TemplateDefinition :
(name=ID"=")?((reference=CompositeReferenceDefinition))
;

AttributeDefinition :
(annotationsList=AnnotationsList)?
'attribute'(type=AttributeType)?
attributeName=ID('='value=Value)?;

ArgumentDefinition :
(argumentName=ID"=" argumentValue=Value)
|(argumentValue=Value)
;

InterfaceDefinition :
(annotationsList=AnnotationsList)?
role=Role (signature=FQN)?'as'name=ID
(collection?='['(collectionsize=INT)?collection?=']')?
(contingency=Contingency)?
;

BindingDefinition :
(annotationsList=AnnotationsList)?
('binds'
('this'|interfaceSourceParentName=ID)'.'interfaceSourceName=ID('['interfaceSourceIndex=INT']')?
'to'
('this'|interfaceTargetParentName=ID)'.'interfaceTargetName=ID('['interfaceTargetIndex=INT']')?);

DataDefinition :
(annotationsList=AnnotationsList)?
(('data'((fileC=FileC)|(inlineCcode=InlineCodeC)))
|('nodata'));

ImplementationDefinition :
(annotationsList=AnnotationsList)?
'source'((fileC=FileC)|(inlineCcode=InlineCodeC));

TemplateSpecifier :
name=ID'conformsto' reference=TypeReferenceDefinition
;

FileC :
(directory = Path)?fileName=FileName;

FileName :
ID('.'ID)?;

InlineCodeC :
codeC=CodeC;

AnnotationsList :
annotations+=Annotation(annotations+=Annotation )*;

Annotation :
'@'name=AnnotationType
("("annotationElements+=AnnotationElement(','annotationElements+=AnnotationElement)*")")?;

AnnotationElement :
(elementValue=ElementValue)
|
(elementName=ID'='elementValue=ElementValue)
;

ElementValue :
ConstantValue
|Annotation
|ElementValueArrayInitializer;

ConstantValue :
value=ConstantFormat;

ConstantFormat:
INT|STRING;

ElementValueArrayInitializer :
"{"values+=ElementValue(","values+=ElementValue)*"}"; 

Value :
ID|signedINT|HexadecimalType|STRING|'null';

HexadecimalType :
'0x'INT;

AnnotationType:
'Override'|'Singleton'|'LDFlags'|'CFlags'|FQN;

AttributeType :
'STRUCT'|'UNION'|'ENUM'|ID;

FQN:
ID('.'ID)*;

enum Contingency : 
optional|mandatory;

enum Role :
provides|requires;

FULL_IMPORT_NAME :
FQN".*";

terminal CodeC :
'{{' -> '}}';

terminal Path :
(ID(':')? | (".")*)(((('\\')|('\\\\')|('/'))ID)?)*(('\\')|('\\\\')|('/'));

signedINT :
('+'|'-')?INT;
