/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package adl.provider;

import adl.util.AdlAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AdlItemProviderAdapterFactory extends AdlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AdlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ArchitectureDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArchitectureDefinitionItemProvider architectureDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ArchitectureDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArchitectureDefinitionAdapter() {
		if (architectureDefinitionItemProvider == null) {
			architectureDefinitionItemProvider = new ArchitectureDefinitionItemProvider(this);
		}

		return architectureDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.AdlDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdlDefinitionItemProvider adlDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.AdlDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdlDefinitionAdapter() {
		if (adlDefinitionItemProvider == null) {
			adlDefinitionItemProvider = new AdlDefinitionItemProvider(this);
		}

		return adlDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.CompositeComponentDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeComponentDefinitionItemProvider compositeComponentDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.CompositeComponentDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeComponentDefinitionAdapter() {
		if (compositeComponentDefinitionItemProvider == null) {
			compositeComponentDefinitionItemProvider = new CompositeComponentDefinitionItemProvider(this);
		}

		return compositeComponentDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.CompositeSubComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeSubComponentItemProvider compositeSubComponentItemProvider;

	/**
	 * This creates an adapter for a {@link adl.CompositeSubComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeSubComponentAdapter() {
		if (compositeSubComponentItemProvider == null) {
			compositeSubComponentItemProvider = new CompositeSubComponentItemProvider(this);
		}

		return compositeSubComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.BindingDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindingDefinitionItemProvider bindingDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.BindingDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindingDefinitionAdapter() {
		if (bindingDefinitionItemProvider == null) {
			bindingDefinitionItemProvider = new BindingDefinitionItemProvider(this);
		}

		return bindingDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.InterfaceDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceDefinitionItemProvider interfaceDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.InterfaceDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceDefinitionAdapter() {
		if (interfaceDefinitionItemProvider == null) {
			interfaceDefinitionItemProvider = new InterfaceDefinitionItemProvider(this);
		}

		return interfaceDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.TemplateSpecifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateSpecifierItemProvider templateSpecifierItemProvider;

	/**
	 * This creates an adapter for a {@link adl.TemplateSpecifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateSpecifierAdapter() {
		if (templateSpecifierItemProvider == null) {
			templateSpecifierItemProvider = new TemplateSpecifierItemProvider(this);
		}

		return templateSpecifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.PrimitiveComponentDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveComponentDefinitionItemProvider primitiveComponentDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.PrimitiveComponentDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveComponentDefinitionAdapter() {
		if (primitiveComponentDefinitionItemProvider == null) {
			primitiveComponentDefinitionItemProvider = new PrimitiveComponentDefinitionItemProvider(this);
		}

		return primitiveComponentDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.DataDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataDefinitionItemProvider dataDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.DataDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataDefinitionAdapter() {
		if (dataDefinitionItemProvider == null) {
			dataDefinitionItemProvider = new DataDefinitionItemProvider(this);
		}

		return dataDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ImplementationDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplementationDefinitionItemProvider implementationDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ImplementationDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplementationDefinitionAdapter() {
		if (implementationDefinitionItemProvider == null) {
			implementationDefinitionItemProvider = new ImplementationDefinitionItemProvider(this);
		}

		return implementationDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.FileC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileCItemProvider fileCItemProvider;

	/**
	 * This creates an adapter for a {@link adl.FileC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileCAdapter() {
		if (fileCItemProvider == null) {
			fileCItemProvider = new FileCItemProvider(this);
		}

		return fileCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.InlineCodeC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InlineCodeCItemProvider inlineCodeCItemProvider;

	/**
	 * This creates an adapter for a {@link adl.InlineCodeC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInlineCodeCAdapter() {
		if (inlineCodeCItemProvider == null) {
			inlineCodeCItemProvider = new InlineCodeCItemProvider(this);
		}

		return inlineCodeCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.PrimitiveSubComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveSubComponentItemProvider primitiveSubComponentItemProvider;

	/**
	 * This creates an adapter for a {@link adl.PrimitiveSubComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveSubComponentAdapter() {
		if (primitiveSubComponentItemProvider == null) {
			primitiveSubComponentItemProvider = new PrimitiveSubComponentItemProvider(this);
		}

		return primitiveSubComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ReferencesList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferencesListItemProvider referencesListItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ReferencesList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferencesListAdapter() {
		if (referencesListItemProvider == null) {
			referencesListItemProvider = new ReferencesListItemProvider(this);
		}

		return referencesListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ComponentTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentTypeDefinitionItemProvider componentTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ComponentTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentTypeDefinitionAdapter() {
		if (componentTypeDefinitionItemProvider == null) {
			componentTypeDefinitionItemProvider = new ComponentTypeDefinitionItemProvider(this);
		}

		return componentTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.FormalArgument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormalArgumentItemProvider formalArgumentItemProvider;

	/**
	 * This creates an adapter for a {@link adl.FormalArgument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormalArgumentAdapter() {
		if (formalArgumentItemProvider == null) {
			formalArgumentItemProvider = new FormalArgumentItemProvider(this);
		}

		return formalArgumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ArgumentDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentDefinitionItemProvider argumentDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ArgumentDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentDefinitionAdapter() {
		if (argumentDefinitionItemProvider == null) {
			argumentDefinitionItemProvider = new ArgumentDefinitionItemProvider(this);
		}

		return argumentDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.AttributeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeDefinitionItemProvider attributeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.AttributeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeDefinitionAdapter() {
		if (attributeDefinitionItemProvider == null) {
			attributeDefinitionItemProvider = new AttributeDefinitionItemProvider(this);
		}

		return attributeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.PrimitiveReferenceDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveReferenceDefinitionItemProvider primitiveReferenceDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.PrimitiveReferenceDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveReferenceDefinitionAdapter() {
		if (primitiveReferenceDefinitionItemProvider == null) {
			primitiveReferenceDefinitionItemProvider = new PrimitiveReferenceDefinitionItemProvider(this);
		}

		return primitiveReferenceDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.CompositeReferenceDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeReferenceDefinitionItemProvider compositeReferenceDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.CompositeReferenceDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeReferenceDefinitionAdapter() {
		if (compositeReferenceDefinitionItemProvider == null) {
			compositeReferenceDefinitionItemProvider = new CompositeReferenceDefinitionItemProvider(this);
		}

		return compositeReferenceDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.FormalArgumentsList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormalArgumentsListItemProvider formalArgumentsListItemProvider;

	/**
	 * This creates an adapter for a {@link adl.FormalArgumentsList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormalArgumentsListAdapter() {
		if (formalArgumentsListItemProvider == null) {
			formalArgumentsListItemProvider = new FormalArgumentsListItemProvider(this);
		}

		return formalArgumentsListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.TemplateSpecifiersList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateSpecifiersListItemProvider templateSpecifiersListItemProvider;

	/**
	 * This creates an adapter for a {@link adl.TemplateSpecifiersList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateSpecifiersListAdapter() {
		if (templateSpecifiersListItemProvider == null) {
			templateSpecifiersListItemProvider = new TemplateSpecifiersListItemProvider(this);
		}

		return templateSpecifiersListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.CompositeReferencesList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeReferencesListItemProvider compositeReferencesListItemProvider;

	/**
	 * This creates an adapter for a {@link adl.CompositeReferencesList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeReferencesListAdapter() {
		if (compositeReferencesListItemProvider == null) {
			compositeReferencesListItemProvider = new CompositeReferencesListItemProvider(this);
		}

		return compositeReferencesListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.PrimitiveReferencesList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveReferencesListItemProvider primitiveReferencesListItemProvider;

	/**
	 * This creates an adapter for a {@link adl.PrimitiveReferencesList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveReferencesListAdapter() {
		if (primitiveReferencesListItemProvider == null) {
			primitiveReferencesListItemProvider = new PrimitiveReferencesListItemProvider(this);
		}

		return primitiveReferencesListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.TypeReferencesList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeReferencesListItemProvider typeReferencesListItemProvider;

	/**
	 * This creates an adapter for a {@link adl.TypeReferencesList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeReferencesListAdapter() {
		if (typeReferencesListItemProvider == null) {
			typeReferencesListItemProvider = new TypeReferencesListItemProvider(this);
		}

		return typeReferencesListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.TypeReferenceDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeReferenceDefinitionItemProvider typeReferenceDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.TypeReferenceDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeReferenceDefinitionAdapter() {
		if (typeReferenceDefinitionItemProvider == null) {
			typeReferenceDefinitionItemProvider = new TypeReferenceDefinitionItemProvider(this);
		}

		return typeReferenceDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ImportDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportDefinitionItemProvider importDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ImportDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportDefinitionAdapter() {
		if (importDefinitionItemProvider == null) {
			importDefinitionItemProvider = new ImportDefinitionItemProvider(this);
		}

		return importDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.AnnotationsList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationsListItemProvider annotationsListItemProvider;

	/**
	 * This creates an adapter for a {@link adl.AnnotationsList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationsListAdapter() {
		if (annotationsListItemProvider == null) {
			annotationsListItemProvider = new AnnotationsListItemProvider(this);
		}

		return annotationsListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.Annotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationItemProvider annotationItemProvider;

	/**
	 * This creates an adapter for a {@link adl.Annotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationAdapter() {
		if (annotationItemProvider == null) {
			annotationItemProvider = new AnnotationItemProvider(this);
		}

		return annotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.AnnotationElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationElementItemProvider annotationElementItemProvider;

	/**
	 * This creates an adapter for a {@link adl.AnnotationElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationElementAdapter() {
		if (annotationElementItemProvider == null) {
			annotationElementItemProvider = new AnnotationElementItemProvider(this);
		}

		return annotationElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ElementValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementValueItemProvider elementValueItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ElementValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementValueAdapter() {
		if (elementValueItemProvider == null) {
			elementValueItemProvider = new ElementValueItemProvider(this);
		}

		return elementValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ConstantValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantValueItemProvider constantValueItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ConstantValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantValueAdapter() {
		if (constantValueItemProvider == null) {
			constantValueItemProvider = new ConstantValueItemProvider(this);
		}

		return constantValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ElementValueArrayInitializer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementValueArrayInitializerItemProvider elementValueArrayInitializerItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ElementValueArrayInitializer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementValueArrayInitializerAdapter() {
		if (elementValueArrayInitializerItemProvider == null) {
			elementValueArrayInitializerItemProvider = new ElementValueArrayInitializerItemProvider(this);
		}

		return elementValueArrayInitializerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.ComponentReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentReferenceItemProvider componentReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link adl.ComponentReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentReferenceAdapter() {
		if (componentReferenceItemProvider == null) {
			componentReferenceItemProvider = new ComponentReferenceItemProvider(this);
		}

		return componentReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.CompositeAnonymousSubComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeAnonymousSubComponentItemProvider compositeAnonymousSubComponentItemProvider;

	/**
	 * This creates an adapter for a {@link adl.CompositeAnonymousSubComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeAnonymousSubComponentAdapter() {
		if (compositeAnonymousSubComponentItemProvider == null) {
			compositeAnonymousSubComponentItemProvider = new CompositeAnonymousSubComponentItemProvider(this);
		}

		return compositeAnonymousSubComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.PrimitiveAnonymousSubComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveAnonymousSubComponentItemProvider primitiveAnonymousSubComponentItemProvider;

	/**
	 * This creates an adapter for a {@link adl.PrimitiveAnonymousSubComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveAnonymousSubComponentAdapter() {
		if (primitiveAnonymousSubComponentItemProvider == null) {
			primitiveAnonymousSubComponentItemProvider = new PrimitiveAnonymousSubComponentItemProvider(this);
		}

		return primitiveAnonymousSubComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.TemplateSubComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateSubComponentItemProvider templateSubComponentItemProvider;

	/**
	 * This creates an adapter for a {@link adl.TemplateSubComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateSubComponentAdapter() {
		if (templateSubComponentItemProvider == null) {
			templateSubComponentItemProvider = new TemplateSubComponentItemProvider(this);
		}

		return templateSubComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link adl.TemplateDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateDefinitionItemProvider templateDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link adl.TemplateDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateDefinitionAdapter() {
		if (templateDefinitionItemProvider == null) {
			templateDefinitionItemProvider = new TemplateDefinitionItemProvider(this);
		}

		return templateDefinitionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (architectureDefinitionItemProvider != null) architectureDefinitionItemProvider.dispose();
		if (adlDefinitionItemProvider != null) adlDefinitionItemProvider.dispose();
		if (annotationItemProvider != null) annotationItemProvider.dispose();
		if (annotationElementItemProvider != null) annotationElementItemProvider.dispose();
		if (annotationsListItemProvider != null) annotationsListItemProvider.dispose();
		if (argumentDefinitionItemProvider != null) argumentDefinitionItemProvider.dispose();
		if (attributeDefinitionItemProvider != null) attributeDefinitionItemProvider.dispose();
		if (bindingDefinitionItemProvider != null) bindingDefinitionItemProvider.dispose();
		if (componentReferenceItemProvider != null) componentReferenceItemProvider.dispose();
		if (componentTypeDefinitionItemProvider != null) componentTypeDefinitionItemProvider.dispose();
		if (compositeAnonymousSubComponentItemProvider != null) compositeAnonymousSubComponentItemProvider.dispose();
		if (compositeComponentDefinitionItemProvider != null) compositeComponentDefinitionItemProvider.dispose();
		if (compositeReferenceDefinitionItemProvider != null) compositeReferenceDefinitionItemProvider.dispose();
		if (compositeSubComponentItemProvider != null) compositeSubComponentItemProvider.dispose();
		if (constantValueItemProvider != null) constantValueItemProvider.dispose();
		if (dataDefinitionItemProvider != null) dataDefinitionItemProvider.dispose();
		if (elementValueItemProvider != null) elementValueItemProvider.dispose();
		if (elementValueArrayInitializerItemProvider != null) elementValueArrayInitializerItemProvider.dispose();
		if (fileCItemProvider != null) fileCItemProvider.dispose();
		if (formalArgumentItemProvider != null) formalArgumentItemProvider.dispose();
		if (formalArgumentsListItemProvider != null) formalArgumentsListItemProvider.dispose();
		if (implementationDefinitionItemProvider != null) implementationDefinitionItemProvider.dispose();
		if (importDefinitionItemProvider != null) importDefinitionItemProvider.dispose();
		if (inlineCodeCItemProvider != null) inlineCodeCItemProvider.dispose();
		if (interfaceDefinitionItemProvider != null) interfaceDefinitionItemProvider.dispose();
		if (primitiveAnonymousSubComponentItemProvider != null) primitiveAnonymousSubComponentItemProvider.dispose();
		if (primitiveComponentDefinitionItemProvider != null) primitiveComponentDefinitionItemProvider.dispose();
		if (primitiveReferenceDefinitionItemProvider != null) primitiveReferenceDefinitionItemProvider.dispose();
		if (primitiveSubComponentItemProvider != null) primitiveSubComponentItemProvider.dispose();
		if (referencesListItemProvider != null) referencesListItemProvider.dispose();
		if (templateDefinitionItemProvider != null) templateDefinitionItemProvider.dispose();
		if (templateSpecifierItemProvider != null) templateSpecifierItemProvider.dispose();
		if (templateSpecifiersListItemProvider != null) templateSpecifiersListItemProvider.dispose();
		if (templateSubComponentItemProvider != null) templateSubComponentItemProvider.dispose();
		if (typeReferenceDefinitionItemProvider != null) typeReferenceDefinitionItemProvider.dispose();
		if (primitiveReferencesListItemProvider != null) primitiveReferencesListItemProvider.dispose();
		if (compositeReferencesListItemProvider != null) compositeReferencesListItemProvider.dispose();
		if (typeReferencesListItemProvider != null) typeReferencesListItemProvider.dispose();
	}

}
