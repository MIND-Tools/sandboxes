/**
 * Copyright (C) 2010 France Telecom
 *
 * This file is part of "Mind Compiler" is free software: you can redistribute 
 * it and/or modify it under the terms of the GNU Lesser General Public License 
 * as published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: mind@ow2.org
 *
 * Authors: Matthieu ANNE
 * Contributors:
 */


template st.interfaceWrapping.IDL2CPLWRAPPER : st.interfaces.IDL2C{
  $${
/** 
 * Generates a ".c" wrapper file.
 */
 
cplFile(idl,itfName) ::= <<

/* This file is a generated file, do not edit. */
 <idl.methods:{<externPrototype(method=it)>};separator="\n">
 
 <idl.methods:{<wrapMethod(itfName=itfName, method=it)>};separator="\n\n">
>>

externPrototype(method) ::=<<
extern <methodPrototype(name=method.name , parameters=method.parameters , withThisPtr="false", vaArgs=vaArgsMap.(method.vaArgs))>;
>>

wrapMethod(itfName, method) ::= <<
<methDef(itfName=itfName, method=method, vaArgs=vaArgsMap.(method.vaArgs))>{
return <fctCall(method=method, vaArgs = vaArgsMap.(method.vaArgs))> ;
}
>>

methDef(itfName, method, vaArgs) ::= <<
<typeQualifier(qualifiers=method)><varDef(type=method.type, name=methodSignature(itfName = itfName, name=method.name, parameters=method.parameters, vaArgs=vaArgs))>
>>

methodSignature(itfName, name, parameters, vaArgs) ::= <<
METH(<itfName>, <name>)(<if(parameters)>
<parameters:parameterDef(parameter=it); separator=", "> <if (vaArgs)>, ...<endif>
<else>
<if (vaArgs)> ...
<else>
void
<endif>
<endif>)
>>

fctCall(method, vaArgs) ::= <<
<method.name>(<method.parameters:parameterName(parameter=it); separator=", ">)
>>

  }$$
}