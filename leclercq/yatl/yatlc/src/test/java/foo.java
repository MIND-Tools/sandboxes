// This file is a generated by YATL. Do not edit. 

import java.util.*;

public  class foo  {
    
  public  String tmpl1(int i) {
    StringBuilder stringBuilder = new StringBuilder();
    tmpl1(i, stringBuilder);
    return stringBuilder.toString();
  }

  public  void tmpl1 (int i, StringBuilder stringBuilder) {
      stringBuilder.append("Helloworld foo 123bar !\n    ");
    if (i == 0) {
      stringBuilder.append("Bye\n    ");
    }
          HashMap<String, String> m = new HashMap<String, String>();
        
      stringBuilder.append(m.get("foo"));
      stringBuilder.append("\n    foreach 1: ");
    for(String s : m.values()) {
    } 
      stringBuilder.append("\n    foreach 2: ");
    for(String s : m.values()) {
    } 
      stringBuilder.append("\n    \n    \n    ");
     String[] array = new String[]{"toto", "titi"}; 
      stringBuilder.append("foreach 3: ");
    for(String s : array) {
    } 
      stringBuilder.append("\n    foreach 4: ");
    for(String s : array) {
    } 
      stringBuilder.append("\n    \n    m1=");
    if ((m==null)) {
    } 
      stringBuilder.append("\n    m2=");
    if ((m!=null)) {
    } 
      stringBuilder.append("\n    m3=");
    if ((m!=null)) {
    } 
      stringBuilder.append("\n    m4=");
      appendValue(m, "", stringBuilder);
      stringBuilder.append("\n  ");
  }
  private  String tmpl2(String s) {
    StringBuilder stringBuilder = new StringBuilder();
    tmpl2(s, stringBuilder);
    return stringBuilder.toString();
  }

  private  void tmpl2 (String s, StringBuilder stringBuilder) {
      stringBuilder.append(s.substring(2,3));
      stringBuilder.append("\n  ");
  }
  
  private void appendValue(Object o, String nullValue, StringBuilder stringBuilder) {
     stringBuilder.append((o!=null)? o : nullValue);
  }
  
  private <T> Iterable<T> appendNullOrIterate(Iterable<T> iterable, String nullValue, StringBuilder stringBuilder) {
    if (iterable == null) {
      stringBuilder.append(nullValue);
      return java.util.Collections.emptyList();
    } else {
      return iterable;
    }
  }

  private <T> Iterable<T> appendNullOrIterate(T[] iterable, String nullValue, StringBuilder stringBuilder) {
    if (iterable == null) {
      stringBuilder.append(nullValue);
      return java.util.Collections.emptyList();
    } else {
      return new ArrayIterable<T>(iterable);
    }
  }

  private static final class ArrayIterable<T> implements Iterable<T>  {
    final T[] array;
    ArrayIterable(T[] array) {
      this.array = array;
    }
    
    public java.util.Iterator<T> iterator() {
      return new ArrayIterator<T>(array);
    }
  }
  
  private static final class ArrayIterator<T> implements java.util.Iterator<T> {
    final T[] array;
    int index;
    
    ArrayIterator(T[] array) {
      this.array = array;
      index = 0;
    }
    
    public boolean hasNext() {
      return index < array.length;
    }
    
    public T next() {
      if(!hasNext()) throw new java.util.NoSuchElementException();
      return array[index++];
    }
    
    public void remove() {
      throw new UnsupportedOperationException();
    }
  }
}