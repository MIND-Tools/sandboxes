group YATL2JavaTemplates;

templateFile(imports, pkg, tmplClasses) ::= <<
// This file is a generated by YATL. Do not edit. 
<pkg>

<imports;separator="\n">

<tmplClasses;separator="\n\n">
>>

packageDirective(fqn) ::= <<
package <fqn>;
>>

templateClass(name, qualifiers, ext, impls, content) ::= <<
<qualifiers> class <name> <if (ext)>
    extends <ext><endif><if (impls)>
    implements <impls;separator=", "><endif> {
    
  <content;separator="\n">
  
  private void appendValue(Object o, String nullValue, StringBuilder stringBuilder) {
     stringBuilder.append((o!=null)? o : nullValue);
  }
  
  private \<T> Iterable\<T> appendNullOrIterate(Iterable\<T> iterable, String nullValue, StringBuilder stringBuilder) {
    if (iterable == null) {
      stringBuilder.append(nullValue);
      return java.util.Collections.emptyList();
    } else {
      return iterable;
    }
  }

  private \<T> Iterable\<T> appendNullOrIterate(T[] iterable, String nullValue, StringBuilder stringBuilder) {
    if (iterable == null) {
      stringBuilder.append(nullValue);
      return java.util.Collections.emptyList();
    } else {
      return new ArrayIterable\<T>(iterable);
    }
  }

  private static final class ArrayIterable\<T> implements Iterable\<T>  {
    final T[] array;
    ArrayIterable(T[] array) {
      this.array = array;
    }
    
    public java.util.Iterator\<T> iterator() {
      return new ArrayIterator\<T>(array);
    }
  }
  
  private static final class ArrayIterator\<T> implements java.util.Iterator\<T> {
    final T[] array;
    int index;
    
    ArrayIterator(T[] array) {
      this.array = array;
      index = 0;
    }
    
    public boolean hasNext() {
      return index \< array.length;
    }
    
    public T next() {
      if(!hasNext()) throw new java.util.NoSuchElementException();
      return array[index++];
    }
    
    public void remove() {
      throw new UnsupportedOperationException();
    }
  }
}
>>

templateMethod(proto, content) ::= <<
<proto> {
  <content;separator="\n">
}
>>

templateProto(name, qualifiers, params, paramNames, throwNames) ::= <<
<qualifiers> String <name>(<params;separator=", ">) <if (throwNames)> <throwNames> <endif> {
  StringBuilder stringBuilder = new StringBuilder();
  <name>(<if (paramNames)><paramNames;separator=", ">, stringBuilder<else>stringBuilder<endif>);
  return stringBuilder.toString();
}

<qualifiers> void <name> (<if (params)><params;separator=", ">, StringBuilder stringBuilder<else>StringBuilder stringBuilder<endif>) <if (throwNames)> <throwNames> <endif>
>>

templateThrow(names) ::= <<
throws <names;separator=", ">
>>

inlinedCode(code) ::= <<
<code>
>>

quoteExpr(e1, e2) ::= <<
"<e1>"<e2>
>>
parentExpr(e1, e2) ::= "(<e1>)<e2>"
ltExpr(e1, e2) ::= "\<<e1>><e2>"

expr(e1, e2) ::= "<e1><e2>"
callTemplate(name, params, e2) ::= << 
<name>(<if (params)><params;separator=", ">, <endif>stringBuilder)<e2>;
>>

appendString(s) ::= <<
  stringBuilder.append("<s>");
>>

appendExpr(s, nullValue) ::= <<
<if (nullValue)>
  appendValue(<s>, <nullValue>, stringBuilder);
<else>
  stringBuilder.append(<s>);
<endif>
>>

appendForEach(decl, iterable, iteration, separator, nullValue) ::= <<
for(<decl> : <if (nullValue)>appendNullOrIterate(<iterable>, <nullValue>, stringBuilder)<else><iterable><endif>) {
  <iteration>
  <if (separator)>stringBuilder.append(<separator>);<endif>
} 
>>

appendQuestion(test, then_, else_, nullValue) ::= <<
if (<test>) {
  <then_>
} <if (else_)> else {
  <else_>
} <endif>
>>

fullyQualifiedName(ids) ::= <<
<ids;separator=".">
>>