/*
 * generated by Xtext
 */

package org.ow2.mind.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.ow2.mind.adl.Attribute;
import org.ow2.mind.adl.Binding;
import org.ow2.mind.adl.ClientInterface;
import org.ow2.mind.adl.CompositeDefinition;
import org.ow2.mind.adl.FlowTypeKind;
import org.ow2.mind.adl.Implementation;
import org.ow2.mind.adl.InputInterface;
import org.ow2.mind.adl.OutputInterface;
import org.ow2.mind.adl.PrimitiveDefinition;
import org.ow2.mind.adl.ServerInterface;
import org.ow2.mind.adl.SubComponent;
import org.ow2.mind.adl.TypeDefinition;
import org.ow2.mind.adl.TypeInterface;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects. see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class AdlLabelProvider extends DefaultEObjectLabelProvider {

  @Inject
  public AdlLabelProvider(AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }


  String image(TypeDefinition ele) {
    return "small16/TypeComponent.png";
  }
  
  String image(CompositeDefinition ele) {
    return "small16/CompositeComponent.png";
  }
  String image(PrimitiveDefinition ele) {
    return "small16/PrimitiveComponent.png";
  }
  
  StyledString text(TypeInterface ele) {
    StyledString s = new StyledString(ele.getName());
    if (ele.getSignature() != null) {
      s.append(" : " + ele.getSignature(), StyledString.DECORATIONS_STYLER);
    }
    return s;
  }
  
  String image(ServerInterface ele) {
    return "small16/ServerInterface.png";
  }

  String image(ClientInterface ele) {
    return "small16/ClientInterface.png";
  }

  String image(InputInterface ele) {
    return "small16/InputInterface.png";
  }

  String image(OutputInterface ele) {
    return "small16/OutputInterface.png";
  }

  StyledString text(SubComponent ele) {
    StyledString s = new StyledString(ele.getName());
    if (ele.getType() != null && ele.getType().getDefinition() != null) {
      s.append(" : " + ele.getType().getDefinition().getName(),
          StyledString.DECORATIONS_STYLER);
    }
    return s;
  }

  String image(SubComponent ele) {
    return "small16/SubComponent.png";
  }


  StyledString text(Attribute ele) {
    StyledString s = new StyledString(ele.getName());
    if (ele.getType() != null) {
    	if(ele.getType().getPath() != null){
    		s.append(" : "+ele.getType().getPath()+":"+ele.getType().getName(), StyledString.DECORATIONS_STYLER);    		
    	}else{
    		s.append(" : " + ele.getType().getType().getLiteral(),
    				StyledString.DECORATIONS_STYLER);
    	}
    }
    return s;
  }

  String image(Attribute ele) {
    return "small16/Attribute.png";
  }

  StyledString text(Binding ele) {
    StyledString s = new StyledString();
    s.append(
        (ele.getFromSubComp() == null) ? "this" : ele.getFromSubComp()
            .getName()).append(".");

    s.append((ele.getFromItf() == null) ? "<unknow>" : ele.getFromItf()
        .getName());
    if (ele.getFromIndex() != null)
      s.append("[" + ele.getFromIndex().getValue() + "]");
    
    s.append(" -> ");
    
    s.append(
        (ele.getToSubComp() == null) ? "this" : ele.getToSubComp()
            .getName()).append(".");

    s.append((ele.getToItf() == null) ? "<unknow>" : ele.getToItf()
        .getName());
    if (ele.getTondex() != null)
      s.append("[" + ele.getTondex().getValue() + "]");
    
    return s;
  }
  
  String image(Binding ele) {
    return "small16/Binding.png";
  }

  String text(Implementation ele) {
    if (ele.getPath() != null) {
      return ele.getPath();
    } else {
      return "<inlined code>";
    }
    
  }
  
  String image(Implementation ele) {
    return "small16/Source.png";
  }
}
