/*
 * generated by Xtext
 */

package org.ow2.mind.ui.contentassist;

import java.util.Collection;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.ow2.mind.annotation.AnnotationDescriptor;
import org.ow2.mind.annotation.AnnotationRegistry;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class AdlProposalProvider extends AbstractAdlProposalProvider {

// @Override
// public void completeSubComponent_Type(EObject model, Assignment assignment,
// ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
// // TODO Auto-generated method stub
// super.completeSubComponent_Type(model, assignment, context, acceptor);
// }

  @Override
  public void completeAnnotation_Name(EObject model, Assignment assignment,
      ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    super.completeAnnotation_Name(model, assignment, context, acceptor);
    Collection<AnnotationDescriptor> annotationNames = AnnotationRegistry
        .getAnnotationDescriptors();
    for (AnnotationDescriptor annotationDescriptor : annotationNames) {
      ICompletionProposal completionProposal = createCompletionProposal(
          annotationDescriptor.getName(), context);
      if (completionProposal instanceof ConfigurableCompletionProposal) {
        ((ConfigurableCompletionProposal) completionProposal)
            .setAdditionalProposalInfo(annotationDescriptor
                .getFullDescription());
      }
      acceptor.accept(completionProposal);
    }
  }
}
