/*
* generated by Xtext
*/

package org.ow2.mind.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AdlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParametricDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// -----------------------------------------------------------------------------
		//// Top-level rules
		//// -----------------------------------------------------------------------------
		//Definition:
		//	TypeDefinition | ParametricDefinition;
		public ParserRule getRule() { return rule; }

		//TypeDefinition | ParametricDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_0() { return cTypeDefinitionParserRuleCall_0; }

		//ParametricDefinition
		public RuleCall getParametricDefinitionParserRuleCall_1() { return cParametricDefinitionParserRuleCall_1; }
	}

	public class ParametricDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParametricDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParametricDefinition:
		//	PrimitiveDefinition | CompositeDefinition;
		public ParserRule getRule() { return rule; }

		//PrimitiveDefinition | CompositeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveDefinition
		public RuleCall getPrimitiveDefinitionParserRuleCall_0() { return cPrimitiveDefinitionParserRuleCall_0; }

		//CompositeDefinition
		public RuleCall getCompositeDefinitionParserRuleCall_1() { return cCompositeDefinitionParserRuleCall_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import:
		//	annotations+=Annotation* "import" importedNamespace=QualifiedNameWithWildCard ";";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "import" importedNamespace=QualifiedNameWithWildCard ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExtendsDefinitionReferenceParserRuleCall_4_1_0 = (RuleCall)cExtendsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cExtendsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cExtendsDefinitionReferenceParserRuleCall_4_2_1_0 = (RuleCall)cExtendsAssignment_4_2_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cContentAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cContentInterfaceParserRuleCall_5_0_1_0_0 = (RuleCall)cContentAssignment_5_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1_1 = (Keyword)cGroup_5_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cContentAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cContentInterfaceParserRuleCall_5_1_0_0 = (RuleCall)cContentAssignment_5_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		
		//// -----------------------------------------------------------------------------
		//TypeDefinition:
		//	imports+=Import* annotations+=Annotation* "type" name=QualifiedName ("extends" extends+=DefinitionReference (","
		//	extends+=DefinitionReference)*)? ("{" (content+=Interface ";"?)* "}" | (content+=Interface ";"?)*);
		public ParserRule getRule() { return rule; }

		//imports+=Import* annotations+=Annotation* "type" name=QualifiedName ("extends" extends+=DefinitionReference (","
		//extends+=DefinitionReference)*)? ("{" (content+=Interface ";"?)* "}" | (content+=Interface ";"?)*)
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }

		//("extends" extends+=DefinitionReference ("," extends+=DefinitionReference)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//extends+=DefinitionReference
		public Assignment getExtendsAssignment_4_1() { return cExtendsAssignment_4_1; }

		//DefinitionReference
		public RuleCall getExtendsDefinitionReferenceParserRuleCall_4_1_0() { return cExtendsDefinitionReferenceParserRuleCall_4_1_0; }

		//("," extends+=DefinitionReference)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//extends+=DefinitionReference
		public Assignment getExtendsAssignment_4_2_1() { return cExtendsAssignment_4_2_1; }

		//DefinitionReference
		public RuleCall getExtendsDefinitionReferenceParserRuleCall_4_2_1_0() { return cExtendsDefinitionReferenceParserRuleCall_4_2_1_0; }

		//"{" (content+=Interface ";"?)* "}" | (content+=Interface ";"?)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"{" (content+=Interface ";"?)* "}"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }

		//(content+=Interface ";"?)*
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//content+=Interface
		public Assignment getContentAssignment_5_0_1_0() { return cContentAssignment_5_0_1_0; }

		//Interface
		public RuleCall getContentInterfaceParserRuleCall_5_0_1_0_0() { return cContentInterfaceParserRuleCall_5_0_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_5_0_1_1() { return cSemicolonKeyword_5_0_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//(content+=Interface ";"?)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//content+=Interface
		public Assignment getContentAssignment_5_1_0() { return cContentAssignment_5_1_0; }

		//Interface
		public RuleCall getContentInterfaceParserRuleCall_5_1_0_0() { return cContentInterfaceParserRuleCall_5_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_5_1_1() { return cSemicolonKeyword_5_1_1; }
	}

	public class PrimitiveDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Assignment cAbstractAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_2_0 = (Keyword)cAbstractAssignment_2.eContents().get(0);
		private final Keyword cPrimitiveKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameQualifiedNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cParametersAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cParametersParameterDeclParserRuleCall_5_1_0_0 = (RuleCall)cParametersAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclParserRuleCall_5_1_1_1_0 = (RuleCall)cParametersAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExtendsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExtendsDefinitionReferenceParserRuleCall_6_1_0 = (RuleCall)cExtendsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cExtendsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cExtendsDefinitionReferenceParserRuleCall_6_2_1_0 = (RuleCall)cExtendsAssignment_6_2_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Group cGroup_7_0_1 = (Group)cGroup_7_0.eContents().get(1);
		private final Assignment cContentAssignment_7_0_1_0 = (Assignment)cGroup_7_0_1.eContents().get(0);
		private final Alternatives cContentAlternatives_7_0_1_0_0 = (Alternatives)cContentAssignment_7_0_1_0.eContents().get(0);
		private final RuleCall cContentInterfaceParserRuleCall_7_0_1_0_0_0 = (RuleCall)cContentAlternatives_7_0_1_0_0.eContents().get(0);
		private final RuleCall cContentAttributeParserRuleCall_7_0_1_0_0_1 = (RuleCall)cContentAlternatives_7_0_1_0_0.eContents().get(1);
		private final RuleCall cContentDataParserRuleCall_7_0_1_0_0_2 = (RuleCall)cContentAlternatives_7_0_1_0_0.eContents().get(2);
		private final RuleCall cContentSourceParserRuleCall_7_0_1_0_0_3 = (RuleCall)cContentAlternatives_7_0_1_0_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_7_0_1_1 = (Keyword)cGroup_7_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_0_2 = (Keyword)cGroup_7_0.eContents().get(2);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Assignment cContentAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final Alternatives cContentAlternatives_7_1_0_0 = (Alternatives)cContentAssignment_7_1_0.eContents().get(0);
		private final RuleCall cContentInterfaceParserRuleCall_7_1_0_0_0 = (RuleCall)cContentAlternatives_7_1_0_0.eContents().get(0);
		private final RuleCall cContentAttributeParserRuleCall_7_1_0_0_1 = (RuleCall)cContentAlternatives_7_1_0_0.eContents().get(1);
		private final RuleCall cContentDataParserRuleCall_7_1_0_0_2 = (RuleCall)cContentAlternatives_7_1_0_0.eContents().get(2);
		private final RuleCall cContentSourceParserRuleCall_7_1_0_0_3 = (RuleCall)cContentAlternatives_7_1_0_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		
		//// -----------------------------------------------------------------------------
		//PrimitiveDefinition:
		//	imports+=Import* annotations+=Annotation* abstract="abstract"? "primitive" name=QualifiedName ("("
		//	(parameters+=ParameterDecl ("," parameters+=ParameterDecl)*)? ")")? ("extends" extends+=DefinitionReference (","
		//	extends+=DefinitionReference)*)? ("{" (content+=(Interface | Attribute | Data | Source) ";"?)* "}" |
		//	(content+=(Interface | Attribute | Data | Source) ";"?)*);
		public ParserRule getRule() { return rule; }

		//imports+=Import* annotations+=Annotation* abstract="abstract"? "primitive" name=QualifiedName ("("
		//(parameters+=ParameterDecl ("," parameters+=ParameterDecl)*)? ")")? ("extends" extends+=DefinitionReference (","
		//extends+=DefinitionReference)*)? ("{" (content+=(Interface | Attribute | Data | Source) ";"?)* "}" |
		//(content+=(Interface | Attribute | Data | Source) ";"?)*)
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//abstract="abstract"?
		public Assignment getAbstractAssignment_2() { return cAbstractAssignment_2; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_2_0() { return cAbstractAbstractKeyword_2_0; }

		//"primitive"
		public Keyword getPrimitiveKeyword_3() { return cPrimitiveKeyword_3; }

		//name=QualifiedName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_4_0() { return cNameQualifiedNameParserRuleCall_4_0; }

		//("(" (parameters+=ParameterDecl ("," parameters+=ParameterDecl)*)? ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//(parameters+=ParameterDecl ("," parameters+=ParameterDecl)*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//parameters+=ParameterDecl
		public Assignment getParametersAssignment_5_1_0() { return cParametersAssignment_5_1_0; }

		//ParameterDecl
		public RuleCall getParametersParameterDeclParserRuleCall_5_1_0_0() { return cParametersParameterDeclParserRuleCall_5_1_0_0; }

		//("," parameters+=ParameterDecl)*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//","
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }

		//parameters+=ParameterDecl
		public Assignment getParametersAssignment_5_1_1_1() { return cParametersAssignment_5_1_1_1; }

		//ParameterDecl
		public RuleCall getParametersParameterDeclParserRuleCall_5_1_1_1_0() { return cParametersParameterDeclParserRuleCall_5_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//("extends" extends+=DefinitionReference ("," extends+=DefinitionReference)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"extends"
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }

		//extends+=DefinitionReference
		public Assignment getExtendsAssignment_6_1() { return cExtendsAssignment_6_1; }

		//DefinitionReference
		public RuleCall getExtendsDefinitionReferenceParserRuleCall_6_1_0() { return cExtendsDefinitionReferenceParserRuleCall_6_1_0; }

		//("," extends+=DefinitionReference)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//extends+=DefinitionReference
		public Assignment getExtendsAssignment_6_2_1() { return cExtendsAssignment_6_2_1; }

		//DefinitionReference
		public RuleCall getExtendsDefinitionReferenceParserRuleCall_6_2_1_0() { return cExtendsDefinitionReferenceParserRuleCall_6_2_1_0; }

		//"{" (content+=(Interface | Attribute | Data | Source) ";"?)* "}" | (content+=(Interface | Attribute | Data | Source)
		//";"?)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"{" (content+=(Interface | Attribute | Data | Source) ";"?)* "}"
		public Group getGroup_7_0() { return cGroup_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0_0() { return cLeftCurlyBracketKeyword_7_0_0; }

		//(content+=(Interface | Attribute | Data | Source) ";"?)*
		public Group getGroup_7_0_1() { return cGroup_7_0_1; }

		//content+=(Interface | Attribute | Data | Source)
		public Assignment getContentAssignment_7_0_1_0() { return cContentAssignment_7_0_1_0; }

		//Interface | Attribute | Data | Source
		public Alternatives getContentAlternatives_7_0_1_0_0() { return cContentAlternatives_7_0_1_0_0; }

		//Interface
		public RuleCall getContentInterfaceParserRuleCall_7_0_1_0_0_0() { return cContentInterfaceParserRuleCall_7_0_1_0_0_0; }

		//Attribute
		public RuleCall getContentAttributeParserRuleCall_7_0_1_0_0_1() { return cContentAttributeParserRuleCall_7_0_1_0_0_1; }

		//Data
		public RuleCall getContentDataParserRuleCall_7_0_1_0_0_2() { return cContentDataParserRuleCall_7_0_1_0_0_2; }

		//Source
		public RuleCall getContentSourceParserRuleCall_7_0_1_0_0_3() { return cContentSourceParserRuleCall_7_0_1_0_0_3; }

		//";"?
		public Keyword getSemicolonKeyword_7_0_1_1() { return cSemicolonKeyword_7_0_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_0_2() { return cRightCurlyBracketKeyword_7_0_2; }

		//(content+=(Interface | Attribute | Data | Source) ";"?)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//content+=(Interface | Attribute | Data | Source)
		public Assignment getContentAssignment_7_1_0() { return cContentAssignment_7_1_0; }

		//Interface | Attribute | Data | Source
		public Alternatives getContentAlternatives_7_1_0_0() { return cContentAlternatives_7_1_0_0; }

		//Interface
		public RuleCall getContentInterfaceParserRuleCall_7_1_0_0_0() { return cContentInterfaceParserRuleCall_7_1_0_0_0; }

		//Attribute
		public RuleCall getContentAttributeParserRuleCall_7_1_0_0_1() { return cContentAttributeParserRuleCall_7_1_0_0_1; }

		//Data
		public RuleCall getContentDataParserRuleCall_7_1_0_0_2() { return cContentDataParserRuleCall_7_1_0_0_2; }

		//Source
		public RuleCall getContentSourceParserRuleCall_7_1_0_0_3() { return cContentSourceParserRuleCall_7_1_0_0_3; }

		//";"?
		public Keyword getSemicolonKeyword_7_1_1() { return cSemicolonKeyword_7_1_1; }
	}

	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDecl");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ParameterDecl:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CompositeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cCompositeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cTemplateParametersAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cTemplateParametersTemplateParameterDeclParserRuleCall_4_1_0_0 = (RuleCall)cTemplateParametersAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cTemplateParametersAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cTemplateParametersTemplateParameterDeclParserRuleCall_4_1_1_1_0 = (RuleCall)cTemplateParametersAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cParametersAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cParametersParameterDeclParserRuleCall_5_1_0_0 = (RuleCall)cParametersAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclParserRuleCall_5_1_1_1_0 = (RuleCall)cParametersAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExtendsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExtendsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExtendsDefinitionReferenceParserRuleCall_6_1_0 = (RuleCall)cExtendsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cExtendsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cExtendsDefinitionReferenceParserRuleCall_6_2_1_0 = (RuleCall)cExtendsAssignment_6_2_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Group cGroup_7_0_1 = (Group)cGroup_7_0.eContents().get(1);
		private final Assignment cContentAssignment_7_0_1_0 = (Assignment)cGroup_7_0_1.eContents().get(0);
		private final Alternatives cContentAlternatives_7_0_1_0_0 = (Alternatives)cContentAssignment_7_0_1_0.eContents().get(0);
		private final RuleCall cContentInterfaceParserRuleCall_7_0_1_0_0_0 = (RuleCall)cContentAlternatives_7_0_1_0_0.eContents().get(0);
		private final RuleCall cContentSubComponentParserRuleCall_7_0_1_0_0_1 = (RuleCall)cContentAlternatives_7_0_1_0_0.eContents().get(1);
		private final RuleCall cContentBindingParserRuleCall_7_0_1_0_0_2 = (RuleCall)cContentAlternatives_7_0_1_0_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_7_0_1_1 = (Keyword)cGroup_7_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_0_2 = (Keyword)cGroup_7_0.eContents().get(2);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Assignment cContentAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final Alternatives cContentAlternatives_7_1_0_0 = (Alternatives)cContentAssignment_7_1_0.eContents().get(0);
		private final RuleCall cContentInterfaceParserRuleCall_7_1_0_0_0 = (RuleCall)cContentAlternatives_7_1_0_0.eContents().get(0);
		private final RuleCall cContentSubComponentParserRuleCall_7_1_0_0_1 = (RuleCall)cContentAlternatives_7_1_0_0.eContents().get(1);
		private final RuleCall cContentBindingParserRuleCall_7_1_0_0_2 = (RuleCall)cContentAlternatives_7_1_0_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		
		//// -----------------------------------------------------------------------------
		//CompositeDefinition:
		//	imports+=Import* annotations+=Annotation* "composite" name=QualifiedName ("<"
		//	(templateParameters+=TemplateParameterDecl ("," templateParameters+=TemplateParameterDecl)*)? ">")? ("("
		//	(parameters+=ParameterDecl ("," parameters+=ParameterDecl)*)? ")")? ("extends" extends+=DefinitionReference (","
		//	extends+=DefinitionReference)*)? ("{" (content+=(Interface | SubComponent | Binding) ";"?)* "}" | (content+=(Interface
		//	| SubComponent | Binding) ";"?)*);
		public ParserRule getRule() { return rule; }

		//imports+=Import* annotations+=Annotation* "composite" name=QualifiedName ("<" (templateParameters+=TemplateParameterDecl
		//("," templateParameters+=TemplateParameterDecl)*)? ">")? ("(" (parameters+=ParameterDecl (","
		//parameters+=ParameterDecl)*)? ")")? ("extends" extends+=DefinitionReference ("," extends+=DefinitionReference)*)? ("{"
		//(content+=(Interface | SubComponent | Binding) ";"?)* "}" | (content+=(Interface | SubComponent | Binding) ";"?)*)
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"composite"
		public Keyword getCompositeKeyword_2() { return cCompositeKeyword_2; }

		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }

		//("<" (templateParameters+=TemplateParameterDecl ("," templateParameters+=TemplateParameterDecl)*)? ">")?
		public Group getGroup_4() { return cGroup_4; }

		//"<"
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }

		//(templateParameters+=TemplateParameterDecl ("," templateParameters+=TemplateParameterDecl)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//templateParameters+=TemplateParameterDecl
		public Assignment getTemplateParametersAssignment_4_1_0() { return cTemplateParametersAssignment_4_1_0; }

		//TemplateParameterDecl
		public RuleCall getTemplateParametersTemplateParameterDeclParserRuleCall_4_1_0_0() { return cTemplateParametersTemplateParameterDeclParserRuleCall_4_1_0_0; }

		//("," templateParameters+=TemplateParameterDecl)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//templateParameters+=TemplateParameterDecl
		public Assignment getTemplateParametersAssignment_4_1_1_1() { return cTemplateParametersAssignment_4_1_1_1; }

		//TemplateParameterDecl
		public RuleCall getTemplateParametersTemplateParameterDeclParserRuleCall_4_1_1_1_0() { return cTemplateParametersTemplateParameterDeclParserRuleCall_4_1_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_2() { return cGreaterThanSignKeyword_4_2; }

		//("(" (parameters+=ParameterDecl ("," parameters+=ParameterDecl)*)? ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//(parameters+=ParameterDecl ("," parameters+=ParameterDecl)*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//parameters+=ParameterDecl
		public Assignment getParametersAssignment_5_1_0() { return cParametersAssignment_5_1_0; }

		//ParameterDecl
		public RuleCall getParametersParameterDeclParserRuleCall_5_1_0_0() { return cParametersParameterDeclParserRuleCall_5_1_0_0; }

		//("," parameters+=ParameterDecl)*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//","
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }

		//parameters+=ParameterDecl
		public Assignment getParametersAssignment_5_1_1_1() { return cParametersAssignment_5_1_1_1; }

		//ParameterDecl
		public RuleCall getParametersParameterDeclParserRuleCall_5_1_1_1_0() { return cParametersParameterDeclParserRuleCall_5_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//("extends" extends+=DefinitionReference ("," extends+=DefinitionReference)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"extends"
		public Keyword getExtendsKeyword_6_0() { return cExtendsKeyword_6_0; }

		//extends+=DefinitionReference
		public Assignment getExtendsAssignment_6_1() { return cExtendsAssignment_6_1; }

		//DefinitionReference
		public RuleCall getExtendsDefinitionReferenceParserRuleCall_6_1_0() { return cExtendsDefinitionReferenceParserRuleCall_6_1_0; }

		//("," extends+=DefinitionReference)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//extends+=DefinitionReference
		public Assignment getExtendsAssignment_6_2_1() { return cExtendsAssignment_6_2_1; }

		//DefinitionReference
		public RuleCall getExtendsDefinitionReferenceParserRuleCall_6_2_1_0() { return cExtendsDefinitionReferenceParserRuleCall_6_2_1_0; }

		//"{" (content+=(Interface | SubComponent | Binding) ";"?)* "}" | (content+=(Interface | SubComponent | Binding) ";"?)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"{" (content+=(Interface | SubComponent | Binding) ";"?)* "}"
		public Group getGroup_7_0() { return cGroup_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0_0() { return cLeftCurlyBracketKeyword_7_0_0; }

		//(content+=(Interface | SubComponent | Binding) ";"?)*
		public Group getGroup_7_0_1() { return cGroup_7_0_1; }

		//content+=(Interface | SubComponent | Binding)
		public Assignment getContentAssignment_7_0_1_0() { return cContentAssignment_7_0_1_0; }

		//Interface | SubComponent | Binding
		public Alternatives getContentAlternatives_7_0_1_0_0() { return cContentAlternatives_7_0_1_0_0; }

		//Interface
		public RuleCall getContentInterfaceParserRuleCall_7_0_1_0_0_0() { return cContentInterfaceParserRuleCall_7_0_1_0_0_0; }

		//SubComponent
		public RuleCall getContentSubComponentParserRuleCall_7_0_1_0_0_1() { return cContentSubComponentParserRuleCall_7_0_1_0_0_1; }

		//Binding
		public RuleCall getContentBindingParserRuleCall_7_0_1_0_0_2() { return cContentBindingParserRuleCall_7_0_1_0_0_2; }

		//";"?
		public Keyword getSemicolonKeyword_7_0_1_1() { return cSemicolonKeyword_7_0_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_0_2() { return cRightCurlyBracketKeyword_7_0_2; }

		//(content+=(Interface | SubComponent | Binding) ";"?)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//content+=(Interface | SubComponent | Binding)
		public Assignment getContentAssignment_7_1_0() { return cContentAssignment_7_1_0; }

		//Interface | SubComponent | Binding
		public Alternatives getContentAlternatives_7_1_0_0() { return cContentAlternatives_7_1_0_0; }

		//Interface
		public RuleCall getContentInterfaceParserRuleCall_7_1_0_0_0() { return cContentInterfaceParserRuleCall_7_1_0_0_0; }

		//SubComponent
		public RuleCall getContentSubComponentParserRuleCall_7_1_0_0_1() { return cContentSubComponentParserRuleCall_7_1_0_0_1; }

		//Binding
		public RuleCall getContentBindingParserRuleCall_7_1_0_0_2() { return cContentBindingParserRuleCall_7_1_0_0_2; }

		//";"?
		public Keyword getSemicolonKeyword_7_1_1() { return cSemicolonKeyword_7_1_1; }
	}

	public class TemplateParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cConformstoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDefinitionReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TemplateParameterDecl:
		//	name=ID "conformsto" type=DefinitionReference;
		public ParserRule getRule() { return rule; }

		//name=ID "conformsto" type=DefinitionReference
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"conformsto"
		public Keyword getConformstoKeyword_1() { return cConformstoKeyword_1; }

		//type=DefinitionReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DefinitionReference
		public RuleCall getTypeDefinitionReferenceParserRuleCall_2_0() { return cTypeDefinitionReferenceParserRuleCall_2_0; }
	}

	public class DefinitionReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDefinitionDefinitionOrTemplateCrossReference_0_0 = (CrossReference)cDefinitionAssignment_0.eContents().get(0);
		private final RuleCall cDefinitionDefinitionOrTemplateQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cDefinitionDefinitionOrTemplateCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTemplateParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTemplateParametersTemplateParameterParserRuleCall_1_1_0 = (RuleCall)cTemplateParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTemplateParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTemplateParametersTemplateParameterParserRuleCall_1_2_1_0 = (RuleCall)cTemplateParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//// -----------------------------------------------------------------------------
		//DefinitionReference:
		//	definition=[DefinitionOrTemplate|QualifiedName] ("<" templateParameters+=TemplateParameter (","
		//	templateParameters+=TemplateParameter)* ">")? ("(" parameters+=Parameter ("," parameters+=Parameter)* ")")?;
		public ParserRule getRule() { return rule; }

		//definition=[DefinitionOrTemplate|QualifiedName] ("<" templateParameters+=TemplateParameter (","
		//templateParameters+=TemplateParameter)* ">")? ("(" parameters+=Parameter ("," parameters+=Parameter)* ")")?
		public Group getGroup() { return cGroup; }

		//definition=[DefinitionOrTemplate|QualifiedName]
		public Assignment getDefinitionAssignment_0() { return cDefinitionAssignment_0; }

		//[DefinitionOrTemplate|QualifiedName]
		public CrossReference getDefinitionDefinitionOrTemplateCrossReference_0_0() { return cDefinitionDefinitionOrTemplateCrossReference_0_0; }

		//QualifiedName
		public RuleCall getDefinitionDefinitionOrTemplateQualifiedNameParserRuleCall_0_0_1() { return cDefinitionDefinitionOrTemplateQualifiedNameParserRuleCall_0_0_1; }

		//("<" templateParameters+=TemplateParameter ("," templateParameters+=TemplateParameter)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//templateParameters+=TemplateParameter
		public Assignment getTemplateParametersAssignment_1_1() { return cTemplateParametersAssignment_1_1; }

		//TemplateParameter
		public RuleCall getTemplateParametersTemplateParameterParserRuleCall_1_1_0() { return cTemplateParametersTemplateParameterParserRuleCall_1_1_0; }

		//("," templateParameters+=TemplateParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//templateParameters+=TemplateParameter
		public Assignment getTemplateParametersAssignment_1_2_1() { return cTemplateParametersAssignment_1_2_1; }

		//TemplateParameter
		public RuleCall getTemplateParametersTemplateParameterParserRuleCall_1_2_1_0() { return cTemplateParametersTemplateParameterParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//("(" parameters+=Parameter ("," parameters+=Parameter)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_1_0() { return cParametersParameterParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class DefinitionOrTemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionOrTemplate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemplateParameterDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DefinitionOrTemplate:
		//	Definition | TemplateParameterDecl;
		public ParserRule getRule() { return rule; }

		//Definition | TemplateParameterDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_0() { return cDefinitionParserRuleCall_0; }

		//TemplateParameterDecl
		public RuleCall getTemplateParameterDeclParserRuleCall_1() { return cTemplateParameterDeclParserRuleCall_1; }
	}

	public class TemplateParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTemplateParameterAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTemplateValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDefinitionReferenceParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//TemplateParameter:
		//	TemplateParameterAssignment | {TemplateValue} value=DefinitionReference;
		public ParserRule getRule() { return rule; }

		//TemplateParameterAssignment | {TemplateValue} value=DefinitionReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//TemplateParameterAssignment
		public RuleCall getTemplateParameterAssignmentParserRuleCall_0() { return cTemplateParameterAssignmentParserRuleCall_0; }

		//{TemplateValue} value=DefinitionReference
		public Group getGroup_1() { return cGroup_1; }

		//{TemplateValue}
		public Action getTemplateValueAction_1_0() { return cTemplateValueAction_1_0; }

		//value=DefinitionReference
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DefinitionReference
		public RuleCall getValueDefinitionReferenceParserRuleCall_1_1_0() { return cValueDefinitionReferenceParserRuleCall_1_1_0; }
	}

	public class TemplateParameterAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateParameterAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDefinitionReferenceParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//TemplateParameterAssignment:
		//	name=ID "=" value=DefinitionReference;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=DefinitionReference
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=DefinitionReference
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//DefinitionReference
		public RuleCall getValueDefinitionReferenceParserRuleCall_2_0() { return cValueDefinitionReferenceParserRuleCall_2_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParameterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueParameterValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Parameter:
		//	ParameterAssignment | {Parameter} value=ParameterValue;
		public ParserRule getRule() { return rule; }

		//ParameterAssignment | {Parameter} value=ParameterValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParameterAssignment
		public RuleCall getParameterAssignmentParserRuleCall_0() { return cParameterAssignmentParserRuleCall_0; }

		//{Parameter} value=ParameterValue
		public Group getGroup_1() { return cGroup_1; }

		//{Parameter}
		public Action getParameterAction_1_0() { return cParameterAction_1_0; }

		//value=ParameterValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_1_1_0() { return cValueParameterValueParserRuleCall_1_1_0; }
	}

	public class ParameterAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueParameterValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ParameterAssignment:
		//	name=ID "=" value=ParameterValue;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=ParameterValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ParameterValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_2_0() { return cValueParameterValueParserRuleCall_2_0; }
	}

	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cRefParameterDeclCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefParameterDeclIDTerminalRuleCall_1_0_1 = (RuleCall)cRefParameterDeclCrossReference_1_0.eContents().get(1);
		
		//ParameterValue:
		//	literal=Literal | ref=[ParameterDecl];
		public ParserRule getRule() { return rule; }

		//literal=Literal | ref=[ParameterDecl]
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }

		//ref=[ParameterDecl]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[ParameterDecl]
		public CrossReference getRefParameterDeclCrossReference_1_0() { return cRefParameterDeclCrossReference_1_0; }

		//ID
		public RuleCall getRefParameterDeclIDTerminalRuleCall_1_0_1() { return cRefParameterDeclIDTerminalRuleCall_1_0_1; }
	}

	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImplementationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubComponentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBindingParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// -----------------------------------------------------------------------------
		//// Content
		//// -----------------------------------------------------------------------------
		//Content:
		//	Interface | Attribute | Implementation | SubComponent | Binding;
		public ParserRule getRule() { return rule; }

		//Interface | Attribute | Implementation | SubComponent | Binding
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_0() { return cInterfaceParserRuleCall_0; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_1() { return cAttributeParserRuleCall_1; }

		//Implementation
		public RuleCall getImplementationParserRuleCall_2() { return cImplementationParserRuleCall_2; }

		//SubComponent
		public RuleCall getSubComponentParserRuleCall_3() { return cSubComponentParserRuleCall_3; }

		//Binding
		public RuleCall getBindingParserRuleCall_4() { return cBindingParserRuleCall_4; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlowInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// -----------------------------------------------------------------------------
		//Interface:
		//	TypeInterface | FlowInterface;
		public ParserRule getRule() { return rule; }

		//TypeInterface | FlowInterface
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeInterface
		public RuleCall getTypeInterfaceParserRuleCall_0() { return cTypeInterfaceParserRuleCall_0; }

		//FlowInterface
		public RuleCall getFlowInterfaceParserRuleCall_1() { return cFlowInterfaceParserRuleCall_1; }
	}

	public class TypeInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeInterface");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cServerInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClientInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeInterface:
		//	ServerInterface | ClientInterface;
		public ParserRule getRule() { return rule; }

		//ServerInterface | ClientInterface
		public Alternatives getAlternatives() { return cAlternatives; }

		//ServerInterface
		public RuleCall getServerInterfaceParserRuleCall_0() { return cServerInterfaceParserRuleCall_0; }

		//ClientInterface
		public RuleCall getClientInterfaceParserRuleCall_1() { return cClientInterfaceParserRuleCall_1; }
	}

	public class FlowInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowInterface");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FlowInterface:
		//	InputInterface | OutputInterface;
		public ParserRule getRule() { return rule; }

		//InputInterface | OutputInterface
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputInterface
		public RuleCall getInputInterfaceParserRuleCall_0() { return cInputInterfaceParserRuleCall_0; }

		//OutputInterface
		public RuleCall getOutputInterfaceParserRuleCall_1() { return cOutputInterfaceParserRuleCall_1; }
	}

	public class ServerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServerInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cProvidesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureQualifiedNameParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cCollectionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_5_0_0 = (Keyword)cCollectionAssignment_5_0.eContents().get(0);
		private final Assignment cSizeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSizeIntegerLiteralParserRuleCall_5_1_0 = (RuleCall)cSizeAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//ServerInterface:
		//	annotations+=Annotation* "provides" signature=QualifiedName "as" name=ID (collection="[" size=IntegerLiteral? "]")?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "provides" signature=QualifiedName "as" name=ID (collection="[" size=IntegerLiteral? "]")?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"provides"
		public Keyword getProvidesKeyword_1() { return cProvidesKeyword_1; }

		//signature=QualifiedName
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }

		//QualifiedName
		public RuleCall getSignatureQualifiedNameParserRuleCall_2_0() { return cSignatureQualifiedNameParserRuleCall_2_0; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//(collection="[" size=IntegerLiteral? "]")?
		public Group getGroup_5() { return cGroup_5; }

		//collection="["
		public Assignment getCollectionAssignment_5_0() { return cCollectionAssignment_5_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_5_0_0() { return cCollectionLeftSquareBracketKeyword_5_0_0; }

		//size=IntegerLiteral?
		public Assignment getSizeAssignment_5_1() { return cSizeAssignment_5_1; }

		//IntegerLiteral
		public RuleCall getSizeIntegerLiteralParserRuleCall_5_1_0() { return cSizeIntegerLiteralParserRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}

	public class ClientInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClientInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cRequiresKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureQualifiedNameParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cCollectionAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_6_0_0 = (Keyword)cCollectionAssignment_6_0.eContents().get(0);
		private final Assignment cSizeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSizeIntegerLiteralParserRuleCall_6_1_0 = (RuleCall)cSizeAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//ClientInterface:
		//	annotations+=Annotation* "requires" optional="optional"? signature=QualifiedName "as" name=ID (collection="["
		//	size=IntegerLiteral? "]")?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "requires" optional="optional"? signature=QualifiedName "as" name=ID (collection="["
		//size=IntegerLiteral? "]")?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"requires"
		public Keyword getRequiresKeyword_1() { return cRequiresKeyword_1; }

		//optional="optional"?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_2_0() { return cOptionalOptionalKeyword_2_0; }

		//signature=QualifiedName
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }

		//QualifiedName
		public RuleCall getSignatureQualifiedNameParserRuleCall_3_0() { return cSignatureQualifiedNameParserRuleCall_3_0; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//(collection="[" size=IntegerLiteral? "]")?
		public Group getGroup_6() { return cGroup_6; }

		//collection="["
		public Assignment getCollectionAssignment_6_0() { return cCollectionAssignment_6_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_6_0_0() { return cCollectionLeftSquareBracketKeyword_6_0_0; }

		//size=IntegerLiteral?
		public Assignment getSizeAssignment_6_1() { return cSizeAssignment_6_1; }

		//IntegerLiteral
		public RuleCall getSizeIntegerLiteralParserRuleCall_6_1_0() { return cSizeIntegerLiteralParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }
	}

	public class InputInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeFlowTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cCollectionAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_6_0_0 = (Keyword)cCollectionAssignment_6_0.eContents().get(0);
		private final Assignment cSizeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSizeIntegerLiteralParserRuleCall_6_1_0 = (RuleCall)cSizeAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//InputInterface:
		//	annotations+=Annotation* "input" optional="optional"? type=FlowType "as" name=ID (collection="[" size=IntegerLiteral?
		//	"]")?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "input" optional="optional"? type=FlowType "as" name=ID (collection="[" size=IntegerLiteral?
		//"]")?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"input"
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }

		//optional="optional"?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_2_0() { return cOptionalOptionalKeyword_2_0; }

		//type=FlowType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//FlowType
		public RuleCall getTypeFlowTypeParserRuleCall_3_0() { return cTypeFlowTypeParserRuleCall_3_0; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//(collection="[" size=IntegerLiteral? "]")?
		public Group getGroup_6() { return cGroup_6; }

		//collection="["
		public Assignment getCollectionAssignment_6_0() { return cCollectionAssignment_6_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_6_0_0() { return cCollectionLeftSquareBracketKeyword_6_0_0; }

		//size=IntegerLiteral?
		public Assignment getSizeAssignment_6_1() { return cSizeAssignment_6_1; }

		//IntegerLiteral
		public RuleCall getSizeIntegerLiteralParserRuleCall_6_1_0() { return cSizeIntegerLiteralParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }
	}

	public class OutputInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeFlowTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cCollectionAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_6_0_0 = (Keyword)cCollectionAssignment_6_0.eContents().get(0);
		private final Assignment cSizeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSizeIntegerLiteralParserRuleCall_6_1_0 = (RuleCall)cSizeAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//OutputInterface:
		//	annotations+=Annotation* "output" optional="optional"? type=FlowType "as" name=ID (collection="[" size=IntegerLiteral?
		//	"]")?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "output" optional="optional"? type=FlowType "as" name=ID (collection="[" size=IntegerLiteral?
		//"]")?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"output"
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }

		//optional="optional"?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_2_0() { return cOptionalOptionalKeyword_2_0; }

		//type=FlowType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//FlowType
		public RuleCall getTypeFlowTypeParserRuleCall_3_0() { return cTypeFlowTypeParserRuleCall_3_0; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//(collection="[" size=IntegerLiteral? "]")?
		public Group getGroup_6() { return cGroup_6; }

		//collection="["
		public Assignment getCollectionAssignment_6_0() { return cCollectionAssignment_6_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_6_0_0() { return cCollectionLeftSquareBracketKeyword_6_0_0; }

		//size=IntegerLiteral?
		public Assignment getSizeAssignment_6_1() { return cSizeAssignment_6_1; }

		//IntegerLiteral
		public RuleCall getSizeIntegerLiteralParserRuleCall_6_1_0() { return cSizeIntegerLiteralParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }
	}

	public class FlowTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPathAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPathPathParserRuleCall_1_0_0 = (RuleCall)cPathAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cKindAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cKindFlowTypeKindEnumRuleCall_1_2_0 = (RuleCall)cKindAssignment_1_2.eContents().get(0);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		
		//FlowType:
		//	type=AttributeType | path=Path ":" kind=FlowTypeKind? name=ID;
		public ParserRule getRule() { return rule; }

		//type=AttributeType | path=Path ":" kind=FlowTypeKind? name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=AttributeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_0_0() { return cTypeAttributeTypeEnumRuleCall_0_0; }

		//path=Path ":" kind=FlowTypeKind? name=ID
		public Group getGroup_1() { return cGroup_1; }

		//path=Path
		public Assignment getPathAssignment_1_0() { return cPathAssignment_1_0; }

		//Path
		public RuleCall getPathPathParserRuleCall_1_0_0() { return cPathPathParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//kind=FlowTypeKind?
		public Assignment getKindAssignment_1_2() { return cKindAssignment_1_2; }

		//FlowTypeKind
		public RuleCall getKindFlowTypeKindEnumRuleCall_1_2_0() { return cKindFlowTypeKindEnumRuleCall_1_2_0; }

		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeFlowTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueAttributeValueParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		//// -----------------------------------------------------------------------------
		//Attribute:
		//	annotations+=Annotation* "attribute" type=FlowType name=ID ("=" value=AttributeValue)?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "attribute" type=FlowType name=ID ("=" value=AttributeValue)?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"attribute"
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }

		//type=FlowType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//FlowType
		public RuleCall getTypeFlowTypeParserRuleCall_2_0() { return cTypeFlowTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("=" value=AttributeValue)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//value=AttributeValue
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//AttributeValue
		public RuleCall getValueAttributeValueParserRuleCall_4_1_0() { return cValueAttributeValueParserRuleCall_4_1_0; }
	}

	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cRefParameterDeclCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefParameterDeclIDTerminalRuleCall_1_0_1 = (RuleCall)cRefParameterDeclCrossReference_1_0.eContents().get(1);
		
		//AttributeValue:
		//	literal=Literal | ref=[ParameterDecl];
		public ParserRule getRule() { return rule; }

		//literal=Literal | ref=[ParameterDecl]
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }

		//ref=[ParameterDecl]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[ParameterDecl]
		public CrossReference getRefParameterDeclCrossReference_1_0() { return cRefParameterDeclCrossReference_1_0; }

		//ID
		public RuleCall getRefParameterDeclIDTerminalRuleCall_1_0_1() { return cRefParameterDeclIDTerminalRuleCall_1_0_1; }
	}

	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Data");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cPathPathParserRuleCall_2_0_0 = (RuleCall)cPathAssignment_2_0.eContents().get(0);
		private final Assignment cInlinedCodeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInlinedCodeInlinedCodeTerminalRuleCall_2_1_0 = (RuleCall)cInlinedCodeAssignment_2_1.eContents().get(0);
		
		//// -----------------------------------------------------------------------------
		//Data:
		//	annotations+=Annotation* "data" (path=Path | inlinedCode=InlinedCode);
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "data" (path=Path | inlinedCode=InlinedCode)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"data"
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }

		//path=Path | inlinedCode=InlinedCode
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//path=Path
		public Assignment getPathAssignment_2_0() { return cPathAssignment_2_0; }

		//Path
		public RuleCall getPathPathParserRuleCall_2_0_0() { return cPathPathParserRuleCall_2_0_0; }

		//inlinedCode=InlinedCode
		public Assignment getInlinedCodeAssignment_2_1() { return cInlinedCodeAssignment_2_1; }

		//InlinedCode
		public RuleCall getInlinedCodeInlinedCodeTerminalRuleCall_2_1_0() { return cInlinedCodeInlinedCodeTerminalRuleCall_2_1_0; }
	}

	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cPathPathParserRuleCall_2_0_0 = (RuleCall)cPathAssignment_2_0.eContents().get(0);
		private final Assignment cInlinedCodeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInlinedCodeInlinedCodeTerminalRuleCall_2_1_0 = (RuleCall)cInlinedCodeAssignment_2_1.eContents().get(0);
		
		//Source:
		//	annotations+=Annotation* "source" (path=Path | inlinedCode=InlinedCode);
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "source" (path=Path | inlinedCode=InlinedCode)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"source"
		public Keyword getSourceKeyword_1() { return cSourceKeyword_1; }

		//path=Path | inlinedCode=InlinedCode
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//path=Path
		public Assignment getPathAssignment_2_0() { return cPathAssignment_2_0; }

		//Path
		public RuleCall getPathPathParserRuleCall_2_0_0() { return cPathPathParserRuleCall_2_0_0; }

		//inlinedCode=InlinedCode
		public Assignment getInlinedCodeAssignment_2_1() { return cInlinedCodeAssignment_2_1; }

		//InlinedCode
		public RuleCall getInlinedCodeInlinedCodeTerminalRuleCall_2_1_0() { return cInlinedCodeInlinedCodeTerminalRuleCall_2_1_0; }
	}

	public class ImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implementation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Implementation:
		//	Data | Source;
		public ParserRule getRule() { return rule; }

		//Data | Source
		public Alternatives getAlternatives() { return cAlternatives; }

		//Data
		public RuleCall getDataParserRuleCall_0() { return cDataParserRuleCall_0; }

		//Source
		public RuleCall getSourceParserRuleCall_1() { return cSourceParserRuleCall_1; }
	}

	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cIDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Path returns ecore::EString:
		//	"/"? "./"? "../"* ID ("/" ID)* "." ID;
		public ParserRule getRule() { return rule; }

		//"/"? "./"? "../"* ID ("/" ID)* "." ID
		public Group getGroup() { return cGroup; }

		//"/"?
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//"./"?
		public Keyword getFullStopSolidusKeyword_1() { return cFullStopSolidusKeyword_1; }

		//"../"*
		public Keyword getFullStopFullStopSolidusKeyword_2() { return cFullStopFullStopSolidusKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//("/" ID)*
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_1() { return cIDTerminalRuleCall_4_1; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//ID
		public RuleCall getIDTerminalRuleCall_6() { return cIDTerminalRuleCall_6; }
	}

	public class SubComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDefinitionReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cAnonymousDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnonymousDefAnonymousDefinitionParserRuleCall_5_0 = (RuleCall)cAnonymousDefAssignment_5.eContents().get(0);
		
		//// -----------------------------------------------------------------------------
		//SubComponent:
		//	annotations+=Annotation* "contains" type=DefinitionReference "as" name=ID anonymousDef=AnonymousDefinition?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "contains" type=DefinitionReference "as" name=ID anonymousDef=AnonymousDefinition?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"contains"
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }

		//type=DefinitionReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DefinitionReference
		public RuleCall getTypeDefinitionReferenceParserRuleCall_2_0() { return cTypeDefinitionReferenceParserRuleCall_2_0; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//anonymousDef=AnonymousDefinition?
		public Assignment getAnonymousDefAssignment_5() { return cAnonymousDefAssignment_5; }

		//AnonymousDefinition
		public RuleCall getAnonymousDefAnonymousDefinitionParserRuleCall_5_0() { return cAnonymousDefAnonymousDefinitionParserRuleCall_5_0; }
	}

	public class AnonymousDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnonymousDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveAnonymousDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeAnonymousDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnonymousDefinition:
		//	PrimitiveAnonymousDefinition | CompositeAnonymousDefinition;
		public ParserRule getRule() { return rule; }

		//PrimitiveAnonymousDefinition | CompositeAnonymousDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveAnonymousDefinition
		public RuleCall getPrimitiveAnonymousDefinitionParserRuleCall_0() { return cPrimitiveAnonymousDefinitionParserRuleCall_0; }

		//CompositeAnonymousDefinition
		public RuleCall getCompositeAnonymousDefinitionParserRuleCall_1() { return cCompositeAnonymousDefinitionParserRuleCall_1; }
	}

	public class AbstractDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnonymousDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDefinition:
		//	AnonymousDefinition | Definition;
		public ParserRule getRule() { return rule; }

		//AnonymousDefinition | Definition
		public Alternatives getAlternatives() { return cAlternatives; }

		//AnonymousDefinition
		public RuleCall getAnonymousDefinitionParserRuleCall_0() { return cAnonymousDefinitionParserRuleCall_0; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_1() { return cDefinitionParserRuleCall_1; }
	}

	public class PrimitiveAnonymousDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveAnonymousDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveAnonymousDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cPrimitiveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cContentAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cContentAlternatives_4_0_0 = (Alternatives)cContentAssignment_4_0.eContents().get(0);
		private final RuleCall cContentInterfaceParserRuleCall_4_0_0_0 = (RuleCall)cContentAlternatives_4_0_0.eContents().get(0);
		private final RuleCall cContentAttributeParserRuleCall_4_0_0_1 = (RuleCall)cContentAlternatives_4_0_0.eContents().get(1);
		private final RuleCall cContentDataParserRuleCall_4_0_0_2 = (RuleCall)cContentAlternatives_4_0_0.eContents().get(2);
		private final RuleCall cContentSourceParserRuleCall_4_0_0_3 = (RuleCall)cContentAlternatives_4_0_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrimitiveAnonymousDefinition:
		//	{PrimitiveAnonymousDefinition} annotations+=Annotation* "primitive" "{" (content+=(Interface | Attribute | Data |
		//	Source) ";")* "}";
		public ParserRule getRule() { return rule; }

		//{PrimitiveAnonymousDefinition} annotations+=Annotation* "primitive" "{" (content+=(Interface | Attribute | Data |
		//Source) ";")* "}"
		public Group getGroup() { return cGroup; }

		//{PrimitiveAnonymousDefinition}
		public Action getPrimitiveAnonymousDefinitionAction_0() { return cPrimitiveAnonymousDefinitionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"primitive"
		public Keyword getPrimitiveKeyword_2() { return cPrimitiveKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(content+=(Interface | Attribute | Data | Source) ";")*
		public Group getGroup_4() { return cGroup_4; }

		//content+=(Interface | Attribute | Data | Source)
		public Assignment getContentAssignment_4_0() { return cContentAssignment_4_0; }

		//Interface | Attribute | Data | Source
		public Alternatives getContentAlternatives_4_0_0() { return cContentAlternatives_4_0_0; }

		//Interface
		public RuleCall getContentInterfaceParserRuleCall_4_0_0_0() { return cContentInterfaceParserRuleCall_4_0_0_0; }

		//Attribute
		public RuleCall getContentAttributeParserRuleCall_4_0_0_1() { return cContentAttributeParserRuleCall_4_0_0_1; }

		//Data
		public RuleCall getContentDataParserRuleCall_4_0_0_2() { return cContentDataParserRuleCall_4_0_0_2; }

		//Source
		public RuleCall getContentSourceParserRuleCall_4_0_0_3() { return cContentSourceParserRuleCall_4_0_0_3; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CompositeAnonymousDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeAnonymousDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeAnonymousDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cCompositeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cContentAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cContentAlternatives_4_0_0 = (Alternatives)cContentAssignment_4_0.eContents().get(0);
		private final RuleCall cContentInterfaceParserRuleCall_4_0_0_0 = (RuleCall)cContentAlternatives_4_0_0.eContents().get(0);
		private final RuleCall cContentSubComponentParserRuleCall_4_0_0_1 = (RuleCall)cContentAlternatives_4_0_0.eContents().get(1);
		private final RuleCall cContentBindingParserRuleCall_4_0_0_2 = (RuleCall)cContentAlternatives_4_0_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CompositeAnonymousDefinition:
		//	{CompositeAnonymousDefinition} annotations+=Annotation* "composite" "{" (content+=(Interface | SubComponent | Binding)
		//	";")* "}";
		public ParserRule getRule() { return rule; }

		//{CompositeAnonymousDefinition} annotations+=Annotation* "composite" "{" (content+=(Interface | SubComponent | Binding)
		//";")* "}"
		public Group getGroup() { return cGroup; }

		//{CompositeAnonymousDefinition}
		public Action getCompositeAnonymousDefinitionAction_0() { return cCompositeAnonymousDefinitionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"composite"
		public Keyword getCompositeKeyword_2() { return cCompositeKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(content+=(Interface | SubComponent | Binding) ";")*
		public Group getGroup_4() { return cGroup_4; }

		//content+=(Interface | SubComponent | Binding)
		public Assignment getContentAssignment_4_0() { return cContentAssignment_4_0; }

		//Interface | SubComponent | Binding
		public Alternatives getContentAlternatives_4_0_0() { return cContentAlternatives_4_0_0; }

		//Interface
		public RuleCall getContentInterfaceParserRuleCall_4_0_0_0() { return cContentInterfaceParserRuleCall_4_0_0_0; }

		//SubComponent
		public RuleCall getContentSubComponentParserRuleCall_4_0_0_1() { return cContentSubComponentParserRuleCall_4_0_0_1; }

		//Binding
		public RuleCall getContentBindingParserRuleCall_4_0_0_2() { return cContentBindingParserRuleCall_4_0_0_2; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cBindsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFromSubCompAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cFromSubCompSubComponentCrossReference_2_0_0 = (CrossReference)cFromSubCompAssignment_2_0.eContents().get(0);
		private final RuleCall cFromSubCompSubComponentIDTerminalRuleCall_2_0_0_1 = (RuleCall)cFromSubCompSubComponentCrossReference_2_0_0.eContents().get(1);
		private final Keyword cThisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromItfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFromItfInterfaceCrossReference_4_0 = (CrossReference)cFromItfAssignment_4.eContents().get(0);
		private final RuleCall cFromItfInterfaceIDTerminalRuleCall_4_0_1 = (RuleCall)cFromItfInterfaceCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFromIndexAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFromIndexIntegerLiteralParserRuleCall_5_1_0 = (RuleCall)cFromIndexAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cToSubCompAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final CrossReference cToSubCompSubComponentCrossReference_7_0_0 = (CrossReference)cToSubCompAssignment_7_0.eContents().get(0);
		private final RuleCall cToSubCompSubComponentIDTerminalRuleCall_7_0_0_1 = (RuleCall)cToSubCompSubComponentCrossReference_7_0_0.eContents().get(1);
		private final Keyword cThisKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Keyword cFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cToItfAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cToItfInterfaceCrossReference_9_0 = (CrossReference)cToItfAssignment_9.eContents().get(0);
		private final RuleCall cToItfInterfaceIDTerminalRuleCall_9_0_1 = (RuleCall)cToItfInterfaceCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLeftSquareBracketKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cTondexAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cTondexIntegerLiteralParserRuleCall_10_1_0 = (RuleCall)cTondexAssignment_10_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		
		//// -----------------------------------------------------------------------------
		//Binding:
		//	annotations+=Annotation* "binds" (fromSubComp=[SubComponent] | "this") "." fromItf=[Interface] ("["
		//	fromIndex=IntegerLiteral "]")? "to" (toSubComp=[SubComponent] | "this") "." toItf=[Interface] ("["
		//	tondex=IntegerLiteral "]")?;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "binds" (fromSubComp=[SubComponent] | "this") "." fromItf=[Interface] ("["
		//fromIndex=IntegerLiteral "]")? "to" (toSubComp=[SubComponent] | "this") "." toItf=[Interface] ("["
		//tondex=IntegerLiteral "]")?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"binds"
		public Keyword getBindsKeyword_1() { return cBindsKeyword_1; }

		//fromSubComp=[SubComponent] | "this"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//fromSubComp=[SubComponent]
		public Assignment getFromSubCompAssignment_2_0() { return cFromSubCompAssignment_2_0; }

		//[SubComponent]
		public CrossReference getFromSubCompSubComponentCrossReference_2_0_0() { return cFromSubCompSubComponentCrossReference_2_0_0; }

		//ID
		public RuleCall getFromSubCompSubComponentIDTerminalRuleCall_2_0_0_1() { return cFromSubCompSubComponentIDTerminalRuleCall_2_0_0_1; }

		//"this"
		public Keyword getThisKeyword_2_1() { return cThisKeyword_2_1; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//fromItf=[Interface]
		public Assignment getFromItfAssignment_4() { return cFromItfAssignment_4; }

		//[Interface]
		public CrossReference getFromItfInterfaceCrossReference_4_0() { return cFromItfInterfaceCrossReference_4_0; }

		//ID
		public RuleCall getFromItfInterfaceIDTerminalRuleCall_4_0_1() { return cFromItfInterfaceIDTerminalRuleCall_4_0_1; }

		//("[" fromIndex=IntegerLiteral "]")?
		public Group getGroup_5() { return cGroup_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }

		//fromIndex=IntegerLiteral
		public Assignment getFromIndexAssignment_5_1() { return cFromIndexAssignment_5_1; }

		//IntegerLiteral
		public RuleCall getFromIndexIntegerLiteralParserRuleCall_5_1_0() { return cFromIndexIntegerLiteralParserRuleCall_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }

		//"to"
		public Keyword getToKeyword_6() { return cToKeyword_6; }

		//toSubComp=[SubComponent] | "this"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//toSubComp=[SubComponent]
		public Assignment getToSubCompAssignment_7_0() { return cToSubCompAssignment_7_0; }

		//[SubComponent]
		public CrossReference getToSubCompSubComponentCrossReference_7_0_0() { return cToSubCompSubComponentCrossReference_7_0_0; }

		//ID
		public RuleCall getToSubCompSubComponentIDTerminalRuleCall_7_0_0_1() { return cToSubCompSubComponentIDTerminalRuleCall_7_0_0_1; }

		//"this"
		public Keyword getThisKeyword_7_1() { return cThisKeyword_7_1; }

		//"."
		public Keyword getFullStopKeyword_8() { return cFullStopKeyword_8; }

		//toItf=[Interface]
		public Assignment getToItfAssignment_9() { return cToItfAssignment_9; }

		//[Interface]
		public CrossReference getToItfInterfaceCrossReference_9_0() { return cToItfInterfaceCrossReference_9_0; }

		//ID
		public RuleCall getToItfInterfaceIDTerminalRuleCall_9_0_1() { return cToItfInterfaceIDTerminalRuleCall_9_0_1; }

		//("[" tondex=IntegerLiteral "]")?
		public Group getGroup_10() { return cGroup_10; }

		//"["
		public Keyword getLeftSquareBracketKeyword_10_0() { return cLeftSquareBracketKeyword_10_0; }

		//tondex=IntegerLiteral
		public Assignment getTondexAssignment_10_1() { return cTondexAssignment_10_1; }

		//IntegerLiteral
		public RuleCall getTondexIntegerLiteralParserRuleCall_10_1_0() { return cTondexIntegerLiteralParserRuleCall_10_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_10_2() { return cRightSquareBracketKeyword_10_2; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cParametersSimpleAnnotationFieldParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cParametersAnnotationFieldParserRuleCall_2_1_1_0_0 = (RuleCall)cParametersAssignment_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cGroup_2_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cParametersAnnotationFieldParserRuleCall_2_1_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// -----------------------------------------------------------------------------
		//// Annotations
		//// -----------------------------------------------------------------------------
		//Annotation:
		//	"@" name=QualifiedName ("(" (parameters+=SimpleAnnotationField | parameters+=AnnotationField (","
		//	parameters+=AnnotationField)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//"@" name=QualifiedName ("(" (parameters+=SimpleAnnotationField | parameters+=AnnotationField (","
		//parameters+=AnnotationField)*)? ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("(" (parameters+=SimpleAnnotationField | parameters+=AnnotationField ("," parameters+=AnnotationField)*)? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//(parameters+=SimpleAnnotationField | parameters+=AnnotationField ("," parameters+=AnnotationField)*)?
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//parameters+=SimpleAnnotationField
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }

		//SimpleAnnotationField
		public RuleCall getParametersSimpleAnnotationFieldParserRuleCall_2_1_0_0() { return cParametersSimpleAnnotationFieldParserRuleCall_2_1_0_0; }

		//parameters+=AnnotationField ("," parameters+=AnnotationField)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//parameters+=AnnotationField
		public Assignment getParametersAssignment_2_1_1_0() { return cParametersAssignment_2_1_1_0; }

		//AnnotationField
		public RuleCall getParametersAnnotationFieldParserRuleCall_2_1_1_0_0() { return cParametersAnnotationFieldParserRuleCall_2_1_1_0_0; }

		//("," parameters+=AnnotationField)*
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_1_0() { return cCommaKeyword_2_1_1_1_0; }

		//parameters+=AnnotationField
		public Assignment getParametersAssignment_2_1_1_1_1() { return cParametersAssignment_2_1_1_1_1; }

		//AnnotationField
		public RuleCall getParametersAnnotationFieldParserRuleCall_2_1_1_1_1_0() { return cParametersAnnotationFieldParserRuleCall_2_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class AnnotationFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAnnotationValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AnnotationField:
		//	name=ID "=" value=AnnotationValue;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=AnnotationValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=AnnotationValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AnnotationValue
		public RuleCall getValueAnnotationValueParserRuleCall_2_0() { return cValueAnnotationValueParserRuleCall_2_0; }
	}

	public class SimpleAnnotationFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAnnotationField");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueAnnotationValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SimpleAnnotationField returns AnnotationField:
		//	value=AnnotationValue;
		public ParserRule getRule() { return rule; }

		//value=AnnotationValue
		public Assignment getValueAssignment() { return cValueAssignment; }

		//AnnotationValue
		public RuleCall getValueAnnotationValueParserRuleCall_0() { return cValueAnnotationValueParserRuleCall_0; }
	}

	public class AnnotationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationAnnotationValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AnnotationValue:
		//	Literal | AnnotationAnnotationValue | ArrayValue;
		public ParserRule getRule() { return rule; }

		//Literal | AnnotationAnnotationValue | ArrayValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//AnnotationAnnotationValue
		public RuleCall getAnnotationAnnotationValueParserRuleCall_1() { return cAnnotationAnnotationValueParserRuleCall_1; }

		//ArrayValue
		public RuleCall getArrayValueParserRuleCall_2() { return cArrayValueParserRuleCall_2; }
	}

	public class AnnotationAnnotationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationAnnotationValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueAnnotationParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AnnotationAnnotationValue:
		//	value=Annotation;
		public ParserRule getRule() { return rule; }

		//value=Annotation
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Annotation
		public RuleCall getValueAnnotationParserRuleCall_0() { return cValueAnnotationParserRuleCall_0; }
	}

	public class ArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesAnnotationValueParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesAnnotationValueParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayValue:
		//	{ArrayValue} "{" (values+=AnnotationValue ("," values+=AnnotationValue)*)? "}";
		public ParserRule getRule() { return rule; }

		//{ArrayValue} "{" (values+=AnnotationValue ("," values+=AnnotationValue)*)? "}"
		public Group getGroup() { return cGroup; }

		//{ArrayValue}
		public Action getArrayValueAction_0() { return cArrayValueAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(values+=AnnotationValue ("," values+=AnnotationValue)*)?
		public Group getGroup_2() { return cGroup_2; }

		//values+=AnnotationValue
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }

		//AnnotationValue
		public RuleCall getValuesAnnotationValueParserRuleCall_2_0_0() { return cValuesAnnotationValueParserRuleCall_2_0_0; }

		//("," values+=AnnotationValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//values+=AnnotationValue
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }

		//AnnotationValue
		public RuleCall getValuesAnnotationValueParserRuleCall_2_1_1_0() { return cValuesAnnotationValueParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AnnotationContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationContainer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnonymousDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AnnotationContainer:
		//	Import | Definition | AnonymousDefinition | Content;
		public ParserRule getRule() { return rule; }

		//Import | Definition | AnonymousDefinition | Content
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_1() { return cDefinitionParserRuleCall_1; }

		//AnonymousDefinition
		public RuleCall getAnonymousDefinitionParserRuleCall_2() { return cAnonymousDefinitionParserRuleCall_2; }

		//Content
		public RuleCall getContentParserRuleCall_3() { return cContentParserRuleCall_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPathLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// -----------------------------------------------------------------------------
		//// Litterals
		//// -----------------------------------------------------------------------------
		//Literal:
		//	IntegerLiteral | StringLiteral | NullLiteral | BooleanLiteral | PathLiteral;
		public ParserRule getRule() { return rule; }

		//IntegerLiteral | StringLiteral | NullLiteral | BooleanLiteral | PathLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_2() { return cNullLiteralParserRuleCall_2; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }

		//PathLiteral
		public RuleCall getPathLiteralParserRuleCall_4() { return cPathLiteralParserRuleCall_4; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueNULLKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueNullKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		//NullLiteral:
		//	value="NULL" | value="null";
		public ParserRule getRule() { return rule; }

		//value="NULL" | value="null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value="NULL"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//"NULL"
		public Keyword getValueNULLKeyword_0_0() { return cValueNULLKeyword_0_0; }

		//value="null"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"null"
		public Keyword getValueNullKeyword_1_0() { return cValueNullKeyword_1_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueFalseKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		//BooleanLiteral:
		//	value="true" | value="false";
		public ParserRule getRule() { return rule; }

		//value="true" | value="false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value="true"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }

		//value="false"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"false"
		public Keyword getValueFalseKeyword_1_0() { return cValueFalseKeyword_1_0; }
	}

	public class PathLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePathParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//PathLiteral:
		//	value=Path;
		public ParserRule getRule() { return rule; }

		//value=Path
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Path
		public RuleCall getValuePathParserRuleCall_0() { return cValuePathParserRuleCall_0; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Keyword cEnumKeyword = (Keyword)rule.eContents().get(1);
		
		//Enum returns ecore::EString:
		//	"enum";
		public ParserRule getRule() { return rule; }

		//"enum"
		public Keyword getEnumKeyword() { return cEnumKeyword; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// -----------------------------------------------------------------------------
		//// FQN
		//// -----------------------------------------------------------------------------
		//QualifiedName returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cAsteriskKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//QualifiedNameWithWildCard returns ecore::EString:
		//	ID "." (ID ".")* ("*" | ID);
		public ParserRule getRule() { return rule; }

		//ID "." (ID ".")* ("*" | ID)
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//(ID ".")*
		public Group getGroup_2() { return cGroup_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//"*" | ID
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"*"
		public Keyword getAsteriskKeyword_3_0() { return cAsteriskKeyword_3_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }
	}
	
	
	public class FlowTypeKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FlowTypeKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRUCTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRUCTStructKeyword_0_0 = (Keyword)cSTRUCTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNIONUnionKeyword_1_0 = (Keyword)cUNIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cENUMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cENUMEnumKeyword_2_0 = (Keyword)cENUMEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum FlowTypeKind:
		//	STRUCT="struct" | UNION="union" | ENUM="enum";
		public EnumRule getRule() { return rule; }

		//STRUCT="struct" | UNION="union" | ENUM="enum"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRUCT="struct"
		public EnumLiteralDeclaration getSTRUCTEnumLiteralDeclaration_0() { return cSTRUCTEnumLiteralDeclaration_0; }

		//"struct"
		public Keyword getSTRUCTStructKeyword_0_0() { return cSTRUCTStructKeyword_0_0; }

		//UNION="union"
		public EnumLiteralDeclaration getUNIONEnumLiteralDeclaration_1() { return cUNIONEnumLiteralDeclaration_1; }

		//"union"
		public Keyword getUNIONUnionKeyword_1_0() { return cUNIONUnionKeyword_1_0; }

		//ENUM="enum"
		public EnumLiteralDeclaration getENUMEnumLiteralDeclaration_2() { return cENUMEnumLiteralDeclaration_2; }

		//"enum"
		public Keyword getENUMEnumKeyword_2_0() { return cENUMEnumKeyword_2_0; }
	}

	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStringStringKeyword_1_0 = (Keyword)cStringEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInt8_tEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInt8_tInt8_tKeyword_2_0 = (Keyword)cInt8_tEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUint8_tEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUint8_tUint8_tKeyword_3_0 = (Keyword)cUint8_tEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cInt16_tEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cInt16_tInt16_tKeyword_4_0 = (Keyword)cInt16_tEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cUint16_tEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cUint16_tUint16_tKeyword_5_0 = (Keyword)cUint16_tEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cInt32_tEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cInt32_tInt32_tKeyword_6_0 = (Keyword)cInt32_tEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUint32_tEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUint32_tUint32_tKeyword_7_0 = (Keyword)cUint32_tEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cIntptr_tEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cIntptr_tIntptr_tKeyword_8_0 = (Keyword)cIntptr_tEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cUintptr_tEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cUintptr_tUintptr_tKeyword_9_0 = (Keyword)cUintptr_tEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum AttributeType:
		//	int | string | int8_t | uint8_t | int16_t | uint16_t | int32_t | uint32_t | intptr_t | uintptr_t;
		public EnumRule getRule() { return rule; }

		//int | string | int8_t | uint8_t | int16_t | uint16_t | int32_t | uint32_t | intptr_t | uintptr_t
		public Alternatives getAlternatives() { return cAlternatives; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }

		//"int"
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_1() { return cStringEnumLiteralDeclaration_1; }

		//"string"
		public Keyword getStringStringKeyword_1_0() { return cStringStringKeyword_1_0; }

		//int8_t
		public EnumLiteralDeclaration getInt8_tEnumLiteralDeclaration_2() { return cInt8_tEnumLiteralDeclaration_2; }

		//"int8_t"
		public Keyword getInt8_tInt8_tKeyword_2_0() { return cInt8_tInt8_tKeyword_2_0; }

		//uint8_t
		public EnumLiteralDeclaration getUint8_tEnumLiteralDeclaration_3() { return cUint8_tEnumLiteralDeclaration_3; }

		//"uint8_t"
		public Keyword getUint8_tUint8_tKeyword_3_0() { return cUint8_tUint8_tKeyword_3_0; }

		//int16_t
		public EnumLiteralDeclaration getInt16_tEnumLiteralDeclaration_4() { return cInt16_tEnumLiteralDeclaration_4; }

		//"int16_t"
		public Keyword getInt16_tInt16_tKeyword_4_0() { return cInt16_tInt16_tKeyword_4_0; }

		//uint16_t
		public EnumLiteralDeclaration getUint16_tEnumLiteralDeclaration_5() { return cUint16_tEnumLiteralDeclaration_5; }

		//"uint16_t"
		public Keyword getUint16_tUint16_tKeyword_5_0() { return cUint16_tUint16_tKeyword_5_0; }

		//int32_t
		public EnumLiteralDeclaration getInt32_tEnumLiteralDeclaration_6() { return cInt32_tEnumLiteralDeclaration_6; }

		//"int32_t"
		public Keyword getInt32_tInt32_tKeyword_6_0() { return cInt32_tInt32_tKeyword_6_0; }

		//uint32_t
		public EnumLiteralDeclaration getUint32_tEnumLiteralDeclaration_7() { return cUint32_tEnumLiteralDeclaration_7; }

		//"uint32_t"
		public Keyword getUint32_tUint32_tKeyword_7_0() { return cUint32_tUint32_tKeyword_7_0; }

		//intptr_t
		public EnumLiteralDeclaration getIntptr_tEnumLiteralDeclaration_8() { return cIntptr_tEnumLiteralDeclaration_8; }

		//"intptr_t"
		public Keyword getIntptr_tIntptr_tKeyword_8_0() { return cIntptr_tIntptr_tKeyword_8_0; }

		//uintptr_t
		public EnumLiteralDeclaration getUintptr_tEnumLiteralDeclaration_9() { return cUintptr_tEnumLiteralDeclaration_9; }

		//"uintptr_t"
		public Keyword getUintptr_tUintptr_tKeyword_9_0() { return cUintptr_tUintptr_tKeyword_9_0; }
	}
	
	private DefinitionElements pDefinition;
	private ParametricDefinitionElements pParametricDefinition;
	private ImportElements pImport;
	private TypeDefinitionElements pTypeDefinition;
	private PrimitiveDefinitionElements pPrimitiveDefinition;
	private ParameterDeclElements pParameterDecl;
	private CompositeDefinitionElements pCompositeDefinition;
	private TemplateParameterDeclElements pTemplateParameterDecl;
	private DefinitionReferenceElements pDefinitionReference;
	private DefinitionOrTemplateElements pDefinitionOrTemplate;
	private TemplateParameterElements pTemplateParameter;
	private TemplateParameterAssignmentElements pTemplateParameterAssignment;
	private ParameterElements pParameter;
	private ParameterAssignmentElements pParameterAssignment;
	private ParameterValueElements pParameterValue;
	private ContentElements pContent;
	private InterfaceElements pInterface;
	private TypeInterfaceElements pTypeInterface;
	private FlowInterfaceElements pFlowInterface;
	private ServerInterfaceElements pServerInterface;
	private ClientInterfaceElements pClientInterface;
	private InputInterfaceElements pInputInterface;
	private OutputInterfaceElements pOutputInterface;
	private FlowTypeElements pFlowType;
	private FlowTypeKindElements unknownRuleFlowTypeKind;
	private AttributeElements pAttribute;
	private AttributeTypeElements unknownRuleAttributeType;
	private AttributeValueElements pAttributeValue;
	private DataElements pData;
	private SourceElements pSource;
	private ImplementationElements pImplementation;
	private PathElements pPath;
	private TerminalRule tInlinedCode;
	private SubComponentElements pSubComponent;
	private AnonymousDefinitionElements pAnonymousDefinition;
	private AbstractDefinitionElements pAbstractDefinition;
	private PrimitiveAnonymousDefinitionElements pPrimitiveAnonymousDefinition;
	private CompositeAnonymousDefinitionElements pCompositeAnonymousDefinition;
	private BindingElements pBinding;
	private AnnotationElements pAnnotation;
	private AnnotationFieldElements pAnnotationField;
	private SimpleAnnotationFieldElements pSimpleAnnotationField;
	private AnnotationValueElements pAnnotationValue;
	private AnnotationAnnotationValueElements pAnnotationAnnotationValue;
	private ArrayValueElements pArrayValue;
	private AnnotationContainerElements pAnnotationContainer;
	private LiteralElements pLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private StringLiteralElements pStringLiteral;
	private NullLiteralElements pNullLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private PathLiteralElements pPathLiteral;
	private EnumElements pEnum;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// -----------------------------------------------------------------------------
	//// Top-level rules
	//// -----------------------------------------------------------------------------
	//Definition:
	//	TypeDefinition | ParametricDefinition;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//ParametricDefinition:
	//	PrimitiveDefinition | CompositeDefinition;
	public ParametricDefinitionElements getParametricDefinitionAccess() {
		return (pParametricDefinition != null) ? pParametricDefinition : (pParametricDefinition = new ParametricDefinitionElements());
	}
	
	public ParserRule getParametricDefinitionRule() {
		return getParametricDefinitionAccess().getRule();
	}

	//Import:
	//	annotations+=Annotation* "import" importedNamespace=QualifiedNameWithWildCard ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//TypeDefinition:
	//	imports+=Import* annotations+=Annotation* "type" name=QualifiedName ("extends" extends+=DefinitionReference (","
	//	extends+=DefinitionReference)*)? ("{" (content+=Interface ";"?)* "}" | (content+=Interface ";"?)*);
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return (pTypeDefinition != null) ? pTypeDefinition : (pTypeDefinition = new TypeDefinitionElements());
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//PrimitiveDefinition:
	//	imports+=Import* annotations+=Annotation* abstract="abstract"? "primitive" name=QualifiedName ("("
	//	(parameters+=ParameterDecl ("," parameters+=ParameterDecl)*)? ")")? ("extends" extends+=DefinitionReference (","
	//	extends+=DefinitionReference)*)? ("{" (content+=(Interface | Attribute | Data | Source) ";"?)* "}" |
	//	(content+=(Interface | Attribute | Data | Source) ";"?)*);
	public PrimitiveDefinitionElements getPrimitiveDefinitionAccess() {
		return (pPrimitiveDefinition != null) ? pPrimitiveDefinition : (pPrimitiveDefinition = new PrimitiveDefinitionElements());
	}
	
	public ParserRule getPrimitiveDefinitionRule() {
		return getPrimitiveDefinitionAccess().getRule();
	}

	//ParameterDecl:
	//	name=ID;
	public ParameterDeclElements getParameterDeclAccess() {
		return (pParameterDecl != null) ? pParameterDecl : (pParameterDecl = new ParameterDeclElements());
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//CompositeDefinition:
	//	imports+=Import* annotations+=Annotation* "composite" name=QualifiedName ("<"
	//	(templateParameters+=TemplateParameterDecl ("," templateParameters+=TemplateParameterDecl)*)? ">")? ("("
	//	(parameters+=ParameterDecl ("," parameters+=ParameterDecl)*)? ")")? ("extends" extends+=DefinitionReference (","
	//	extends+=DefinitionReference)*)? ("{" (content+=(Interface | SubComponent | Binding) ";"?)* "}" | (content+=(Interface
	//	| SubComponent | Binding) ";"?)*);
	public CompositeDefinitionElements getCompositeDefinitionAccess() {
		return (pCompositeDefinition != null) ? pCompositeDefinition : (pCompositeDefinition = new CompositeDefinitionElements());
	}
	
	public ParserRule getCompositeDefinitionRule() {
		return getCompositeDefinitionAccess().getRule();
	}

	//TemplateParameterDecl:
	//	name=ID "conformsto" type=DefinitionReference;
	public TemplateParameterDeclElements getTemplateParameterDeclAccess() {
		return (pTemplateParameterDecl != null) ? pTemplateParameterDecl : (pTemplateParameterDecl = new TemplateParameterDeclElements());
	}
	
	public ParserRule getTemplateParameterDeclRule() {
		return getTemplateParameterDeclAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//DefinitionReference:
	//	definition=[DefinitionOrTemplate|QualifiedName] ("<" templateParameters+=TemplateParameter (","
	//	templateParameters+=TemplateParameter)* ">")? ("(" parameters+=Parameter ("," parameters+=Parameter)* ")")?;
	public DefinitionReferenceElements getDefinitionReferenceAccess() {
		return (pDefinitionReference != null) ? pDefinitionReference : (pDefinitionReference = new DefinitionReferenceElements());
	}
	
	public ParserRule getDefinitionReferenceRule() {
		return getDefinitionReferenceAccess().getRule();
	}

	//DefinitionOrTemplate:
	//	Definition | TemplateParameterDecl;
	public DefinitionOrTemplateElements getDefinitionOrTemplateAccess() {
		return (pDefinitionOrTemplate != null) ? pDefinitionOrTemplate : (pDefinitionOrTemplate = new DefinitionOrTemplateElements());
	}
	
	public ParserRule getDefinitionOrTemplateRule() {
		return getDefinitionOrTemplateAccess().getRule();
	}

	//TemplateParameter:
	//	TemplateParameterAssignment | {TemplateValue} value=DefinitionReference;
	public TemplateParameterElements getTemplateParameterAccess() {
		return (pTemplateParameter != null) ? pTemplateParameter : (pTemplateParameter = new TemplateParameterElements());
	}
	
	public ParserRule getTemplateParameterRule() {
		return getTemplateParameterAccess().getRule();
	}

	//TemplateParameterAssignment:
	//	name=ID "=" value=DefinitionReference;
	public TemplateParameterAssignmentElements getTemplateParameterAssignmentAccess() {
		return (pTemplateParameterAssignment != null) ? pTemplateParameterAssignment : (pTemplateParameterAssignment = new TemplateParameterAssignmentElements());
	}
	
	public ParserRule getTemplateParameterAssignmentRule() {
		return getTemplateParameterAssignmentAccess().getRule();
	}

	//Parameter:
	//	ParameterAssignment | {Parameter} value=ParameterValue;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterAssignment:
	//	name=ID "=" value=ParameterValue;
	public ParameterAssignmentElements getParameterAssignmentAccess() {
		return (pParameterAssignment != null) ? pParameterAssignment : (pParameterAssignment = new ParameterAssignmentElements());
	}
	
	public ParserRule getParameterAssignmentRule() {
		return getParameterAssignmentAccess().getRule();
	}

	//ParameterValue:
	//	literal=Literal | ref=[ParameterDecl];
	public ParameterValueElements getParameterValueAccess() {
		return (pParameterValue != null) ? pParameterValue : (pParameterValue = new ParameterValueElements());
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//// Content
	//// -----------------------------------------------------------------------------
	//Content:
	//	Interface | Attribute | Implementation | SubComponent | Binding;
	public ContentElements getContentAccess() {
		return (pContent != null) ? pContent : (pContent = new ContentElements());
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//Interface:
	//	TypeInterface | FlowInterface;
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//TypeInterface:
	//	ServerInterface | ClientInterface;
	public TypeInterfaceElements getTypeInterfaceAccess() {
		return (pTypeInterface != null) ? pTypeInterface : (pTypeInterface = new TypeInterfaceElements());
	}
	
	public ParserRule getTypeInterfaceRule() {
		return getTypeInterfaceAccess().getRule();
	}

	//FlowInterface:
	//	InputInterface | OutputInterface;
	public FlowInterfaceElements getFlowInterfaceAccess() {
		return (pFlowInterface != null) ? pFlowInterface : (pFlowInterface = new FlowInterfaceElements());
	}
	
	public ParserRule getFlowInterfaceRule() {
		return getFlowInterfaceAccess().getRule();
	}

	//ServerInterface:
	//	annotations+=Annotation* "provides" signature=QualifiedName "as" name=ID (collection="[" size=IntegerLiteral? "]")?;
	public ServerInterfaceElements getServerInterfaceAccess() {
		return (pServerInterface != null) ? pServerInterface : (pServerInterface = new ServerInterfaceElements());
	}
	
	public ParserRule getServerInterfaceRule() {
		return getServerInterfaceAccess().getRule();
	}

	//ClientInterface:
	//	annotations+=Annotation* "requires" optional="optional"? signature=QualifiedName "as" name=ID (collection="["
	//	size=IntegerLiteral? "]")?;
	public ClientInterfaceElements getClientInterfaceAccess() {
		return (pClientInterface != null) ? pClientInterface : (pClientInterface = new ClientInterfaceElements());
	}
	
	public ParserRule getClientInterfaceRule() {
		return getClientInterfaceAccess().getRule();
	}

	//InputInterface:
	//	annotations+=Annotation* "input" optional="optional"? type=FlowType "as" name=ID (collection="[" size=IntegerLiteral?
	//	"]")?;
	public InputInterfaceElements getInputInterfaceAccess() {
		return (pInputInterface != null) ? pInputInterface : (pInputInterface = new InputInterfaceElements());
	}
	
	public ParserRule getInputInterfaceRule() {
		return getInputInterfaceAccess().getRule();
	}

	//OutputInterface:
	//	annotations+=Annotation* "output" optional="optional"? type=FlowType "as" name=ID (collection="[" size=IntegerLiteral?
	//	"]")?;
	public OutputInterfaceElements getOutputInterfaceAccess() {
		return (pOutputInterface != null) ? pOutputInterface : (pOutputInterface = new OutputInterfaceElements());
	}
	
	public ParserRule getOutputInterfaceRule() {
		return getOutputInterfaceAccess().getRule();
	}

	//FlowType:
	//	type=AttributeType | path=Path ":" kind=FlowTypeKind? name=ID;
	public FlowTypeElements getFlowTypeAccess() {
		return (pFlowType != null) ? pFlowType : (pFlowType = new FlowTypeElements());
	}
	
	public ParserRule getFlowTypeRule() {
		return getFlowTypeAccess().getRule();
	}

	//enum FlowTypeKind:
	//	STRUCT="struct" | UNION="union" | ENUM="enum";
	public FlowTypeKindElements getFlowTypeKindAccess() {
		return (unknownRuleFlowTypeKind != null) ? unknownRuleFlowTypeKind : (unknownRuleFlowTypeKind = new FlowTypeKindElements());
	}
	
	public EnumRule getFlowTypeKindRule() {
		return getFlowTypeKindAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//Attribute:
	//	annotations+=Annotation* "attribute" type=FlowType name=ID ("=" value=AttributeValue)?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//enum AttributeType:
	//	int | string | int8_t | uint8_t | int16_t | uint16_t | int32_t | uint32_t | intptr_t | uintptr_t;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (unknownRuleAttributeType != null) ? unknownRuleAttributeType : (unknownRuleAttributeType = new AttributeTypeElements());
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//AttributeValue:
	//	literal=Literal | ref=[ParameterDecl];
	public AttributeValueElements getAttributeValueAccess() {
		return (pAttributeValue != null) ? pAttributeValue : (pAttributeValue = new AttributeValueElements());
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//Data:
	//	annotations+=Annotation* "data" (path=Path | inlinedCode=InlinedCode);
	public DataElements getDataAccess() {
		return (pData != null) ? pData : (pData = new DataElements());
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}

	//Source:
	//	annotations+=Annotation* "source" (path=Path | inlinedCode=InlinedCode);
	public SourceElements getSourceAccess() {
		return (pSource != null) ? pSource : (pSource = new SourceElements());
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}

	//Implementation:
	//	Data | Source;
	public ImplementationElements getImplementationAccess() {
		return (pImplementation != null) ? pImplementation : (pImplementation = new ImplementationElements());
	}
	
	public ParserRule getImplementationRule() {
		return getImplementationAccess().getRule();
	}

	//Path returns ecore::EString:
	//	"/"? "./"? "../"* ID ("/" ID)* "." ID;
	public PathElements getPathAccess() {
		return (pPath != null) ? pPath : (pPath = new PathElements());
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//terminal InlinedCode:
	//	"{{"->"}}";
	public TerminalRule getInlinedCodeRule() {
		return (tInlinedCode != null) ? tInlinedCode : (tInlinedCode = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "InlinedCode"));
	} 

	//// -----------------------------------------------------------------------------
	//SubComponent:
	//	annotations+=Annotation* "contains" type=DefinitionReference "as" name=ID anonymousDef=AnonymousDefinition?;
	public SubComponentElements getSubComponentAccess() {
		return (pSubComponent != null) ? pSubComponent : (pSubComponent = new SubComponentElements());
	}
	
	public ParserRule getSubComponentRule() {
		return getSubComponentAccess().getRule();
	}

	//AnonymousDefinition:
	//	PrimitiveAnonymousDefinition | CompositeAnonymousDefinition;
	public AnonymousDefinitionElements getAnonymousDefinitionAccess() {
		return (pAnonymousDefinition != null) ? pAnonymousDefinition : (pAnonymousDefinition = new AnonymousDefinitionElements());
	}
	
	public ParserRule getAnonymousDefinitionRule() {
		return getAnonymousDefinitionAccess().getRule();
	}

	//AbstractDefinition:
	//	AnonymousDefinition | Definition;
	public AbstractDefinitionElements getAbstractDefinitionAccess() {
		return (pAbstractDefinition != null) ? pAbstractDefinition : (pAbstractDefinition = new AbstractDefinitionElements());
	}
	
	public ParserRule getAbstractDefinitionRule() {
		return getAbstractDefinitionAccess().getRule();
	}

	//PrimitiveAnonymousDefinition:
	//	{PrimitiveAnonymousDefinition} annotations+=Annotation* "primitive" "{" (content+=(Interface | Attribute | Data |
	//	Source) ";")* "}";
	public PrimitiveAnonymousDefinitionElements getPrimitiveAnonymousDefinitionAccess() {
		return (pPrimitiveAnonymousDefinition != null) ? pPrimitiveAnonymousDefinition : (pPrimitiveAnonymousDefinition = new PrimitiveAnonymousDefinitionElements());
	}
	
	public ParserRule getPrimitiveAnonymousDefinitionRule() {
		return getPrimitiveAnonymousDefinitionAccess().getRule();
	}

	//CompositeAnonymousDefinition:
	//	{CompositeAnonymousDefinition} annotations+=Annotation* "composite" "{" (content+=(Interface | SubComponent | Binding)
	//	";")* "}";
	public CompositeAnonymousDefinitionElements getCompositeAnonymousDefinitionAccess() {
		return (pCompositeAnonymousDefinition != null) ? pCompositeAnonymousDefinition : (pCompositeAnonymousDefinition = new CompositeAnonymousDefinitionElements());
	}
	
	public ParserRule getCompositeAnonymousDefinitionRule() {
		return getCompositeAnonymousDefinitionAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//Binding:
	//	annotations+=Annotation* "binds" (fromSubComp=[SubComponent] | "this") "." fromItf=[Interface] ("["
	//	fromIndex=IntegerLiteral "]")? "to" (toSubComp=[SubComponent] | "this") "." toItf=[Interface] ("["
	//	tondex=IntegerLiteral "]")?;
	public BindingElements getBindingAccess() {
		return (pBinding != null) ? pBinding : (pBinding = new BindingElements());
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//// Annotations
	//// -----------------------------------------------------------------------------
	//Annotation:
	//	"@" name=QualifiedName ("(" (parameters+=SimpleAnnotationField | parameters+=AnnotationField (","
	//	parameters+=AnnotationField)*)? ")")?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//AnnotationField:
	//	name=ID "=" value=AnnotationValue;
	public AnnotationFieldElements getAnnotationFieldAccess() {
		return (pAnnotationField != null) ? pAnnotationField : (pAnnotationField = new AnnotationFieldElements());
	}
	
	public ParserRule getAnnotationFieldRule() {
		return getAnnotationFieldAccess().getRule();
	}

	//SimpleAnnotationField returns AnnotationField:
	//	value=AnnotationValue;
	public SimpleAnnotationFieldElements getSimpleAnnotationFieldAccess() {
		return (pSimpleAnnotationField != null) ? pSimpleAnnotationField : (pSimpleAnnotationField = new SimpleAnnotationFieldElements());
	}
	
	public ParserRule getSimpleAnnotationFieldRule() {
		return getSimpleAnnotationFieldAccess().getRule();
	}

	//AnnotationValue:
	//	Literal | AnnotationAnnotationValue | ArrayValue;
	public AnnotationValueElements getAnnotationValueAccess() {
		return (pAnnotationValue != null) ? pAnnotationValue : (pAnnotationValue = new AnnotationValueElements());
	}
	
	public ParserRule getAnnotationValueRule() {
		return getAnnotationValueAccess().getRule();
	}

	//AnnotationAnnotationValue:
	//	value=Annotation;
	public AnnotationAnnotationValueElements getAnnotationAnnotationValueAccess() {
		return (pAnnotationAnnotationValue != null) ? pAnnotationAnnotationValue : (pAnnotationAnnotationValue = new AnnotationAnnotationValueElements());
	}
	
	public ParserRule getAnnotationAnnotationValueRule() {
		return getAnnotationAnnotationValueAccess().getRule();
	}

	//ArrayValue:
	//	{ArrayValue} "{" (values+=AnnotationValue ("," values+=AnnotationValue)*)? "}";
	public ArrayValueElements getArrayValueAccess() {
		return (pArrayValue != null) ? pArrayValue : (pArrayValue = new ArrayValueElements());
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}

	//AnnotationContainer:
	//	Import | Definition | AnonymousDefinition | Content;
	public AnnotationContainerElements getAnnotationContainerAccess() {
		return (pAnnotationContainer != null) ? pAnnotationContainer : (pAnnotationContainer = new AnnotationContainerElements());
	}
	
	public ParserRule getAnnotationContainerRule() {
		return getAnnotationContainerAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//// Litterals
	//// -----------------------------------------------------------------------------
	//Literal:
	//	IntegerLiteral | StringLiteral | NullLiteral | BooleanLiteral | PathLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//NullLiteral:
	//	value="NULL" | value="null";
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value="true" | value="false";
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//PathLiteral:
	//	value=Path;
	public PathLiteralElements getPathLiteralAccess() {
		return (pPathLiteral != null) ? pPathLiteral : (pPathLiteral = new PathLiteralElements());
	}
	
	public ParserRule getPathLiteralRule() {
		return getPathLiteralAccess().getRule();
	}

	//Enum returns ecore::EString:
	//	"enum";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//// -----------------------------------------------------------------------------
	//// FQN
	//// -----------------------------------------------------------------------------
	//QualifiedName returns ecore::EString:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildCard returns ecore::EString:
	//	ID "." (ID ".")* ("*" | ID);
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
