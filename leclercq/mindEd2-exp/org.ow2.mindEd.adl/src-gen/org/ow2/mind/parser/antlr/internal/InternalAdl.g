/*
* generated by Xtext
*/
grammar InternalAdl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.ow2.mind.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.ow2.mind.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.ow2.mind.services.AdlGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private AdlGrammarAccess grammarAccess;
 	
    public InternalAdlParser(TokenStream input, IAstFactory factory, AdlGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/ow2/mind/parser/antlr/internal/InternalAdl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Definition";	
   	}
   	
   	@Override
   	protected AdlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefinitionRule(), currentNode); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getTypeDefinitionParserRuleCall_0(), currentNode); 
    }
    this_TypeDefinition_0=ruleTypeDefinition
    { 
        $current = $this_TypeDefinition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getDefinitionAccess().getParametricDefinitionParserRuleCall_1(), currentNode); 
    }
    this_ParametricDefinition_1=ruleParametricDefinition
    { 
        $current = $this_ParametricDefinition_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParametricDefinition
entryRuleParametricDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParametricDefinitionRule(), currentNode); }
	 iv_ruleParametricDefinition=ruleParametricDefinition 
	 { $current=$iv_ruleParametricDefinition.current; } 
	 EOF 
;

// Rule ParametricDefinition
ruleParametricDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParametricDefinitionAccess().getPrimitiveDefinitionParserRuleCall_0(), currentNode); 
    }
    this_PrimitiveDefinition_0=rulePrimitiveDefinition
    { 
        $current = $this_PrimitiveDefinition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParametricDefinitionAccess().getCompositeDefinitionParserRuleCall_1(), currentNode); 
    }
    this_CompositeDefinition_1=ruleCompositeDefinition
    { 
        $current = $this_CompositeDefinition_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_2_0(), currentNode); 
	    }
		lv_importedNamespace_2_0=ruleQualifiedNameWithWildCard		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importedNamespace",
	        		lv_importedNamespace_2_0, 
	        		"QualifiedNameWithWildCard", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getImportAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeDefinitionRule(), currentNode); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getAnnotationsAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'type' 
    {
        createLeafNode(grammarAccess.getTypeDefinitionAccess().getTypeKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getNameQualifiedNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getTypeDefinitionAccess().getExtendsKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getExtendsDefinitionReferenceParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_extends_5_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_5_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTypeDefinitionAccess().getCommaKeyword_4_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getExtendsDefinitionReferenceParserRuleCall_4_2_1_0(), currentNode); 
	    }
		lv_extends_7_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_7_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?((	'{' 
    {
        createLeafNode(grammarAccess.getTypeDefinitionAccess().getLeftCurlyBracketKeyword_5_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getContentInterfaceParserRuleCall_5_0_1_0_0(), currentNode); 
	    }
		lv_content_9_0=ruleInterface		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_9_0, 
	        		"Interface", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	';' 
    {
        createLeafNode(grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_5_0_1_1(), null); 
    }
)?)*	'}' 
    {
        createLeafNode(grammarAccess.getTypeDefinitionAccess().getRightCurlyBracketKeyword_5_0_2(), null); 
    }
)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeDefinitionAccess().getContentInterfaceParserRuleCall_5_1_0_0(), currentNode); 
	    }
		lv_content_12_0=ruleInterface		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_12_0, 
	        		"Interface", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	';' 
    {
        createLeafNode(grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_5_1_1(), null); 
    }
)?)*))
;





// Entry rule entryRulePrimitiveDefinition
entryRulePrimitiveDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveDefinitionRule(), currentNode); }
	 iv_rulePrimitiveDefinition=rulePrimitiveDefinition 
	 { $current=$iv_rulePrimitiveDefinition.current; } 
	 EOF 
;

// Rule PrimitiveDefinition
rulePrimitiveDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getAnnotationsAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		lv_abstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getAbstractAbstractKeyword_2_0(), "abstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "abstract", lv_abstract_2_0, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'primitive' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getPrimitiveKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getNameQualifiedNameParserRuleCall_4_0(), currentNode); 
	    }
		lv_name_4_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getLeftParenthesisKeyword_5_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getParametersParameterDeclParserRuleCall_5_1_0_0(), currentNode); 
	    }
		lv_parameters_6_0=ruleParameterDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_6_0, 
	        		"ParameterDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getCommaKeyword_5_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getParametersParameterDeclParserRuleCall_5_1_1_1_0(), currentNode); 
	    }
		lv_parameters_8_0=ruleParameterDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_8_0, 
	        		"ParameterDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getRightParenthesisKeyword_5_2(), null); 
    }
)?(	'extends' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getExtendsKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getExtendsDefinitionReferenceParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_extends_11_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_11_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getCommaKeyword_6_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getExtendsDefinitionReferenceParserRuleCall_6_2_1_0(), currentNode); 
	    }
		lv_extends_13_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_13_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?((	'{' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getLeftCurlyBracketKeyword_7_0_0(), null); 
    }
((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getContentInterfaceParserRuleCall_7_0_1_0_0_0(), currentNode); 
	    }
		lv_content_15_1=ruleInterface		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_15_1, 
	        		"Interface", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getContentAttributeParserRuleCall_7_0_1_0_0_1(), currentNode); 
	    }
		lv_content_15_2=ruleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_15_2, 
	        		"Attribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getContentDataParserRuleCall_7_0_1_0_0_2(), currentNode); 
	    }
		lv_content_15_3=ruleData		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_15_3, 
	        		"Data", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getContentSourceParserRuleCall_7_0_1_0_0_3(), currentNode); 
	    }
		lv_content_15_4=ruleSource		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_15_4, 
	        		"Source", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)(	';' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getSemicolonKeyword_7_0_1_1(), null); 
    }
)?)*	'}' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getRightCurlyBracketKeyword_7_0_2(), null); 
    }
)
    |((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getContentInterfaceParserRuleCall_7_1_0_0_0(), currentNode); 
	    }
		lv_content_18_1=ruleInterface		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_18_1, 
	        		"Interface", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getContentAttributeParserRuleCall_7_1_0_0_1(), currentNode); 
	    }
		lv_content_18_2=ruleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_18_2, 
	        		"Attribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getContentDataParserRuleCall_7_1_0_0_2(), currentNode); 
	    }
		lv_content_18_3=ruleData		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_18_3, 
	        		"Data", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveDefinitionAccess().getContentSourceParserRuleCall_7_1_0_0_3(), currentNode); 
	    }
		lv_content_18_4=ruleSource		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_18_4, 
	        		"Source", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)(	';' 
    {
        createLeafNode(grammarAccess.getPrimitiveDefinitionAccess().getSemicolonKeyword_7_1_1(), null); 
    }
)?)*))
;





// Entry rule entryRuleParameterDecl
entryRuleParameterDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterDeclRule(), currentNode); }
	 iv_ruleParameterDecl=ruleParameterDecl 
	 { $current=$iv_ruleParameterDecl.current; } 
	 EOF 
;

// Rule ParameterDecl
ruleParameterDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterDeclAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleCompositeDefinition
entryRuleCompositeDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompositeDefinitionRule(), currentNode); }
	 iv_ruleCompositeDefinition=ruleCompositeDefinition 
	 { $current=$iv_ruleCompositeDefinition.current; } 
	 EOF 
;

// Rule CompositeDefinition
ruleCompositeDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getAnnotationsAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'composite' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getCompositeKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getNameQualifiedNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getLessThanSignKeyword_4_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getTemplateParametersTemplateParameterDeclParserRuleCall_4_1_0_0(), currentNode); 
	    }
		lv_templateParameters_5_0=ruleTemplateParameterDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"templateParameters",
	        		lv_templateParameters_5_0, 
	        		"TemplateParameterDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getCommaKeyword_4_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getTemplateParametersTemplateParameterDeclParserRuleCall_4_1_1_1_0(), currentNode); 
	    }
		lv_templateParameters_7_0=ruleTemplateParameterDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"templateParameters",
	        		lv_templateParameters_7_0, 
	        		"TemplateParameterDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'>' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getGreaterThanSignKeyword_4_2(), null); 
    }
)?(	'(' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getLeftParenthesisKeyword_5_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getParametersParameterDeclParserRuleCall_5_1_0_0(), currentNode); 
	    }
		lv_parameters_10_0=ruleParameterDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_10_0, 
	        		"ParameterDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getCommaKeyword_5_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getParametersParameterDeclParserRuleCall_5_1_1_1_0(), currentNode); 
	    }
		lv_parameters_12_0=ruleParameterDecl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_12_0, 
	        		"ParameterDecl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getRightParenthesisKeyword_5_2(), null); 
    }
)?(	'extends' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getExtendsKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getExtendsDefinitionReferenceParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_extends_15_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_15_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getCommaKeyword_6_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getExtendsDefinitionReferenceParserRuleCall_6_2_1_0(), currentNode); 
	    }
		lv_extends_17_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"extends",
	        		lv_extends_17_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?((	'{' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getLeftCurlyBracketKeyword_7_0_0(), null); 
    }
((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getContentInterfaceParserRuleCall_7_0_1_0_0_0(), currentNode); 
	    }
		lv_content_19_1=ruleInterface		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_19_1, 
	        		"Interface", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getContentSubComponentParserRuleCall_7_0_1_0_0_1(), currentNode); 
	    }
		lv_content_19_2=ruleSubComponent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_19_2, 
	        		"SubComponent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getContentBindingParserRuleCall_7_0_1_0_0_2(), currentNode); 
	    }
		lv_content_19_3=ruleBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_19_3, 
	        		"Binding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)(	';' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getSemicolonKeyword_7_0_1_1(), null); 
    }
)?)*	'}' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getRightCurlyBracketKeyword_7_0_2(), null); 
    }
)
    |((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getContentInterfaceParserRuleCall_7_1_0_0_0(), currentNode); 
	    }
		lv_content_22_1=ruleInterface		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_22_1, 
	        		"Interface", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getContentSubComponentParserRuleCall_7_1_0_0_1(), currentNode); 
	    }
		lv_content_22_2=ruleSubComponent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_22_2, 
	        		"SubComponent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeDefinitionAccess().getContentBindingParserRuleCall_7_1_0_0_2(), currentNode); 
	    }
		lv_content_22_3=ruleBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_22_3, 
	        		"Binding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)(	';' 
    {
        createLeafNode(grammarAccess.getCompositeDefinitionAccess().getSemicolonKeyword_7_1_1(), null); 
    }
)?)*))
;





// Entry rule entryRuleTemplateParameterDecl
entryRuleTemplateParameterDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTemplateParameterDeclRule(), currentNode); }
	 iv_ruleTemplateParameterDecl=ruleTemplateParameterDecl 
	 { $current=$iv_ruleTemplateParameterDecl.current; } 
	 EOF 
;

// Rule TemplateParameterDecl
ruleTemplateParameterDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTemplateParameterDeclAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateParameterDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'conformsto' 
    {
        createLeafNode(grammarAccess.getTemplateParameterDeclAccess().getConformstoKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTemplateParameterDeclAccess().getTypeDefinitionReferenceParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateParameterDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDefinitionReference
entryRuleDefinitionReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefinitionReferenceRule(), currentNode); }
	 iv_ruleDefinitionReference=ruleDefinitionReference 
	 { $current=$iv_ruleDefinitionReference.current; } 
	 EOF 
;

// Rule DefinitionReference
ruleDefinitionReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionReferenceAccess().getDefinitionDefinitionOrTemplateCrossReference_0_0(), currentNode); 
	    }
		ruleQualifiedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	'<' 
    {
        createLeafNode(grammarAccess.getDefinitionReferenceAccess().getLessThanSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionReferenceAccess().getTemplateParametersTemplateParameterParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_templateParameters_2_0=ruleTemplateParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"templateParameters",
	        		lv_templateParameters_2_0, 
	        		"TemplateParameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDefinitionReferenceAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionReferenceAccess().getTemplateParametersTemplateParameterParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_templateParameters_4_0=ruleTemplateParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"templateParameters",
	        		lv_templateParameters_4_0, 
	        		"TemplateParameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getDefinitionReferenceAccess().getGreaterThanSignKeyword_1_3(), null); 
    }
)?(	'(' 
    {
        createLeafNode(grammarAccess.getDefinitionReferenceAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionReferenceAccess().getParametersParameterParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_parameters_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_7_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDefinitionReferenceAccess().getCommaKeyword_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionReferenceAccess().getParametersParameterParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_parameters_9_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_9_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getDefinitionReferenceAccess().getRightParenthesisKeyword_2_3(), null); 
    }
)?)
;







// Entry rule entryRuleTemplateParameter
entryRuleTemplateParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTemplateParameterRule(), currentNode); }
	 iv_ruleTemplateParameter=ruleTemplateParameter 
	 { $current=$iv_ruleTemplateParameter.current; } 
	 EOF 
;

// Rule TemplateParameter
ruleTemplateParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTemplateParameterAccess().getTemplateParameterAssignmentParserRuleCall_0(), currentNode); 
    }
    this_TemplateParameterAssignment_0=ruleTemplateParameterAssignment
    { 
        $current = $this_TemplateParameterAssignment_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getTemplateParameterAccess().getTemplateValueAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTemplateParameterAccess().getTemplateValueAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTemplateParameterAccess().getValueDefinitionReferenceParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_value_2_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleTemplateParameterAssignment
entryRuleTemplateParameterAssignment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTemplateParameterAssignmentRule(), currentNode); }
	 iv_ruleTemplateParameterAssignment=ruleTemplateParameterAssignment 
	 { $current=$iv_ruleTemplateParameterAssignment.current; } 
	 EOF 
;

// Rule TemplateParameterAssignment
ruleTemplateParameterAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTemplateParameterAssignmentAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateParameterAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getTemplateParameterAssignmentAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTemplateParameterAssignmentAccess().getValueDefinitionReferenceParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateParameterAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getParameterAssignmentParserRuleCall_0(), currentNode); 
    }
    this_ParameterAssignment_0=ruleParameterAssignment
    { 
        $current = $this_ParameterAssignment_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getParameterAccess().getParameterAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParameterAccess().getParameterAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getValueParameterValueParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_value_2_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"ParameterValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleParameterAssignment
entryRuleParameterAssignment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterAssignmentRule(), currentNode); }
	 iv_ruleParameterAssignment=ruleParameterAssignment 
	 { $current=$iv_ruleParameterAssignment.current; } 
	 EOF 
;

// Rule ParameterAssignment
ruleParameterAssignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterAssignmentAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getParameterAssignmentAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAssignmentAccess().getValueParameterValueParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleParameterValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"ParameterValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleParameterValue
entryRuleParameterValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterValueRule(), currentNode); }
	 iv_ruleParameterValue=ruleParameterValue 
	 { $current=$iv_ruleParameterValue.current; } 
	 EOF 
;

// Rule ParameterValue
ruleParameterValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterValueAccess().getLiteralLiteralParserRuleCall_0_0(), currentNode); 
	    }
		lv_literal_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"literal",
	        		lv_literal_0_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getParameterValueAccess().getRefParameterDeclCrossReference_1_0(), "ref"); 
	}

)
))
;





// Entry rule entryRuleContent
entryRuleContent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getContentRule(), currentNode); }
	 iv_ruleContent=ruleContent 
	 { $current=$iv_ruleContent.current; } 
	 EOF 
;

// Rule Content
ruleContent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContentAccess().getInterfaceParserRuleCall_0(), currentNode); 
    }
    this_Interface_0=ruleInterface
    { 
        $current = $this_Interface_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContentAccess().getAttributeParserRuleCall_1(), currentNode); 
    }
    this_Attribute_1=ruleAttribute
    { 
        $current = $this_Attribute_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContentAccess().getImplementationParserRuleCall_2(), currentNode); 
    }
    this_Implementation_2=ruleImplementation
    { 
        $current = $this_Implementation_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContentAccess().getSubComponentParserRuleCall_3(), currentNode); 
    }
    this_SubComponent_3=ruleSubComponent
    { 
        $current = $this_SubComponent_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContentAccess().getBindingParserRuleCall_4(), currentNode); 
    }
    this_Binding_4=ruleBinding
    { 
        $current = $this_Binding_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInterfaceRule(), currentNode); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInterfaceAccess().getTypeInterfaceParserRuleCall_0(), currentNode); 
    }
    this_TypeInterface_0=ruleTypeInterface
    { 
        $current = $this_TypeInterface_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInterfaceAccess().getFlowInterfaceParserRuleCall_1(), currentNode); 
    }
    this_FlowInterface_1=ruleFlowInterface
    { 
        $current = $this_FlowInterface_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTypeInterface
entryRuleTypeInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeInterfaceRule(), currentNode); }
	 iv_ruleTypeInterface=ruleTypeInterface 
	 { $current=$iv_ruleTypeInterface.current; } 
	 EOF 
;

// Rule TypeInterface
ruleTypeInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeInterfaceAccess().getServerInterfaceParserRuleCall_0(), currentNode); 
    }
    this_ServerInterface_0=ruleServerInterface
    { 
        $current = $this_ServerInterface_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeInterfaceAccess().getClientInterfaceParserRuleCall_1(), currentNode); 
    }
    this_ClientInterface_1=ruleClientInterface
    { 
        $current = $this_ClientInterface_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleFlowInterface
entryRuleFlowInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFlowInterfaceRule(), currentNode); }
	 iv_ruleFlowInterface=ruleFlowInterface 
	 { $current=$iv_ruleFlowInterface.current; } 
	 EOF 
;

// Rule FlowInterface
ruleFlowInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFlowInterfaceAccess().getInputInterfaceParserRuleCall_0(), currentNode); 
    }
    this_InputInterface_0=ruleInputInterface
    { 
        $current = $this_InputInterface_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getFlowInterfaceAccess().getOutputInterfaceParserRuleCall_1(), currentNode); 
    }
    this_OutputInterface_1=ruleOutputInterface
    { 
        $current = $this_OutputInterface_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleServerInterface
entryRuleServerInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getServerInterfaceRule(), currentNode); }
	 iv_ruleServerInterface=ruleServerInterface 
	 { $current=$iv_ruleServerInterface.current; } 
	 EOF 
;

// Rule ServerInterface
ruleServerInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServerInterfaceAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServerInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'provides' 
    {
        createLeafNode(grammarAccess.getServerInterfaceAccess().getProvidesKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServerInterfaceAccess().getSignatureQualifiedNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_signature_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServerInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"signature",
	        		lv_signature_2_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getServerInterfaceAccess().getAsKeyword_3(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getServerInterfaceAccess().getNameIDTerminalRuleCall_4_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServerInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_collection_5_0=	'[' 
    {
        createLeafNode(grammarAccess.getServerInterfaceAccess().getCollectionLeftSquareBracketKeyword_5_0_0(), "collection"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServerInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "collection", lv_collection_5_0, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServerInterfaceAccess().getSizeIntegerLiteralParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_size_6_0=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServerInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"size",
	        		lv_size_6_0, 
	        		"IntegerLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	']' 
    {
        createLeafNode(grammarAccess.getServerInterfaceAccess().getRightSquareBracketKeyword_5_2(), null); 
    }
)?)
;





// Entry rule entryRuleClientInterface
entryRuleClientInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClientInterfaceRule(), currentNode); }
	 iv_ruleClientInterface=ruleClientInterface 
	 { $current=$iv_ruleClientInterface.current; } 
	 EOF 
;

// Rule ClientInterface
ruleClientInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClientInterfaceAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClientInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'requires' 
    {
        createLeafNode(grammarAccess.getClientInterfaceAccess().getRequiresKeyword_1(), null); 
    }
(
(
		lv_optional_2_0=	'optional' 
    {
        createLeafNode(grammarAccess.getClientInterfaceAccess().getOptionalOptionalKeyword_2_0(), "optional"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClientInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "optional", lv_optional_2_0, "optional", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClientInterfaceAccess().getSignatureQualifiedNameParserRuleCall_3_0(), currentNode); 
	    }
		lv_signature_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClientInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"signature",
	        		lv_signature_3_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getClientInterfaceAccess().getAsKeyword_4(), null); 
    }
(
(
		lv_name_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getClientInterfaceAccess().getNameIDTerminalRuleCall_5_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClientInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_collection_6_0=	'[' 
    {
        createLeafNode(grammarAccess.getClientInterfaceAccess().getCollectionLeftSquareBracketKeyword_6_0_0(), "collection"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClientInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "collection", lv_collection_6_0, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClientInterfaceAccess().getSizeIntegerLiteralParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_size_7_0=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClientInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"size",
	        		lv_size_7_0, 
	        		"IntegerLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	']' 
    {
        createLeafNode(grammarAccess.getClientInterfaceAccess().getRightSquareBracketKeyword_6_2(), null); 
    }
)?)
;





// Entry rule entryRuleInputInterface
entryRuleInputInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInputInterfaceRule(), currentNode); }
	 iv_ruleInputInterface=ruleInputInterface 
	 { $current=$iv_ruleInputInterface.current; } 
	 EOF 
;

// Rule InputInterface
ruleInputInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInputInterfaceAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'input' 
    {
        createLeafNode(grammarAccess.getInputInterfaceAccess().getInputKeyword_1(), null); 
    }
(
(
		lv_optional_2_0=	'optional' 
    {
        createLeafNode(grammarAccess.getInputInterfaceAccess().getOptionalOptionalKeyword_2_0(), "optional"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "optional", lv_optional_2_0, "optional", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInputInterfaceAccess().getTypeFlowTypeParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleFlowType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"FlowType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getInputInterfaceAccess().getAsKeyword_4(), null); 
    }
(
(
		lv_name_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInputInterfaceAccess().getNameIDTerminalRuleCall_5_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_collection_6_0=	'[' 
    {
        createLeafNode(grammarAccess.getInputInterfaceAccess().getCollectionLeftSquareBracketKeyword_6_0_0(), "collection"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "collection", lv_collection_6_0, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInputInterfaceAccess().getSizeIntegerLiteralParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_size_7_0=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"size",
	        		lv_size_7_0, 
	        		"IntegerLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	']' 
    {
        createLeafNode(grammarAccess.getInputInterfaceAccess().getRightSquareBracketKeyword_6_2(), null); 
    }
)?)
;





// Entry rule entryRuleOutputInterface
entryRuleOutputInterface returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOutputInterfaceRule(), currentNode); }
	 iv_ruleOutputInterface=ruleOutputInterface 
	 { $current=$iv_ruleOutputInterface.current; } 
	 EOF 
;

// Rule OutputInterface
ruleOutputInterface returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOutputInterfaceAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'output' 
    {
        createLeafNode(grammarAccess.getOutputInterfaceAccess().getOutputKeyword_1(), null); 
    }
(
(
		lv_optional_2_0=	'optional' 
    {
        createLeafNode(grammarAccess.getOutputInterfaceAccess().getOptionalOptionalKeyword_2_0(), "optional"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "optional", lv_optional_2_0, "optional", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOutputInterfaceAccess().getTypeFlowTypeParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleFlowType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"FlowType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getOutputInterfaceAccess().getAsKeyword_4(), null); 
    }
(
(
		lv_name_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOutputInterfaceAccess().getNameIDTerminalRuleCall_5_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_collection_6_0=	'[' 
    {
        createLeafNode(grammarAccess.getOutputInterfaceAccess().getCollectionLeftSquareBracketKeyword_6_0_0(), "collection"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "collection", lv_collection_6_0, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOutputInterfaceAccess().getSizeIntegerLiteralParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_size_7_0=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputInterfaceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"size",
	        		lv_size_7_0, 
	        		"IntegerLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	']' 
    {
        createLeafNode(grammarAccess.getOutputInterfaceAccess().getRightSquareBracketKeyword_6_2(), null); 
    }
)?)
;





// Entry rule entryRuleFlowType
entryRuleFlowType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFlowTypeRule(), currentNode); }
	 iv_ruleFlowType=ruleFlowType 
	 { $current=$iv_ruleFlowType.current; } 
	 EOF 
;

// Rule FlowType
ruleFlowType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFlowTypeAccess().getTypeAttributeTypeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"AttributeType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFlowTypeAccess().getPathPathParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_path_1_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_1_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getFlowTypeAccess().getColonKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFlowTypeAccess().getKindFlowTypeKindEnumRuleCall_1_2_0(), currentNode); 
	    }
		lv_kind_3_0=ruleFlowTypeKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_3_0, 
	        		"FlowTypeKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFlowTypeAccess().getNameIDTerminalRuleCall_1_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFlowTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'attribute' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getAttributeKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getTypeFlowTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleFlowType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"FlowType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getEqualsSignKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getValueAttributeValueParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_value_5_0=ruleAttributeValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_5_0, 
	        		"AttributeValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleAttributeValue
entryRuleAttributeValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeValueRule(), currentNode); }
	 iv_ruleAttributeValue=ruleAttributeValue 
	 { $current=$iv_ruleAttributeValue.current; } 
	 EOF 
;

// Rule AttributeValue
ruleAttributeValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeValueAccess().getLiteralLiteralParserRuleCall_0_0(), currentNode); 
	    }
		lv_literal_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"literal",
	        		lv_literal_0_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAttributeValueAccess().getRefParameterDeclCrossReference_1_0(), "ref"); 
	}

)
))
;





// Entry rule entryRuleData
entryRuleData returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataRule(), currentNode); }
	 iv_ruleData=ruleData 
	 { $current=$iv_ruleData.current; } 
	 EOF 
;

// Rule Data
ruleData returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'data' 
    {
        createLeafNode(grammarAccess.getDataAccess().getDataKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataAccess().getPathPathParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_path_2_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_2_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_inlinedCode_3_0=RULE_INLINEDCODE
		{
			createLeafNode(grammarAccess.getDataAccess().getInlinedCodeInlinedCodeTerminalRuleCall_2_1_0(), "inlinedCode"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"inlinedCode",
	        		lv_inlinedCode_3_0, 
	        		"InlinedCode", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleSource
entryRuleSource returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSourceRule(), currentNode); }
	 iv_ruleSource=ruleSource 
	 { $current=$iv_ruleSource.current; } 
	 EOF 
;

// Rule Source
ruleSource returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSourceAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSourceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'source' 
    {
        createLeafNode(grammarAccess.getSourceAccess().getSourceKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSourceAccess().getPathPathParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_path_2_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSourceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_2_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_inlinedCode_3_0=RULE_INLINEDCODE
		{
			createLeafNode(grammarAccess.getSourceAccess().getInlinedCodeInlinedCodeTerminalRuleCall_2_1_0(), "inlinedCode"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSourceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"inlinedCode",
	        		lv_inlinedCode_3_0, 
	        		"InlinedCode", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleImplementation
entryRuleImplementation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImplementationRule(), currentNode); }
	 iv_ruleImplementation=ruleImplementation 
	 { $current=$iv_ruleImplementation.current; } 
	 EOF 
;

// Rule Implementation
ruleImplementation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getImplementationAccess().getDataParserRuleCall_0(), currentNode); 
    }
    this_Data_0=ruleData
    { 
        $current = $this_Data_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getImplementationAccess().getSourceParserRuleCall_1(), currentNode); 
    }
    this_Source_1=ruleSource
    { 
        $current = $this_Source_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePath
entryRulePath returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathRule(), currentNode); } 
	 iv_rulePath=rulePath 
	 { $current=$iv_rulePath.current.getText(); }  
	 EOF 
;

// Rule Path
rulePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_0(), null); 
    }
)?(
	kw='./' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getFullStopSolidusKeyword_1(), null); 
    }
)?(
	kw='../' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getFullStopFullStopSolidusKeyword_2(), null); 
    }
)*    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getPathAccess().getIDTerminalRuleCall_3(), null); 
    }
(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getSolidusKeyword_4_0(), null); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getPathAccess().getIDTerminalRuleCall_4_1(), null); 
    }
)*
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathAccess().getFullStopKeyword_5(), null); 
    }
    this_ID_7=RULE_ID    {
		$current.merge(this_ID_7);
    }

    { 
    createLeafNode(grammarAccess.getPathAccess().getIDTerminalRuleCall_6(), null); 
    }
)
    ;





// Entry rule entryRuleSubComponent
entryRuleSubComponent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubComponentRule(), currentNode); }
	 iv_ruleSubComponent=ruleSubComponent 
	 { $current=$iv_ruleSubComponent.current; } 
	 EOF 
;

// Rule SubComponent
ruleSubComponent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubComponentAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubComponentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'contains' 
    {
        createLeafNode(grammarAccess.getSubComponentAccess().getContainsKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubComponentAccess().getTypeDefinitionReferenceParserRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleDefinitionReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubComponentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"DefinitionReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getSubComponentAccess().getAsKeyword_3(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSubComponentAccess().getNameIDTerminalRuleCall_4_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubComponentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubComponentAccess().getAnonymousDefAnonymousDefinitionParserRuleCall_5_0(), currentNode); 
	    }
		lv_anonymousDef_5_0=ruleAnonymousDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubComponentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"anonymousDef",
	        		lv_anonymousDef_5_0, 
	        		"AnonymousDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleAnonymousDefinition
entryRuleAnonymousDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnonymousDefinitionRule(), currentNode); }
	 iv_ruleAnonymousDefinition=ruleAnonymousDefinition 
	 { $current=$iv_ruleAnonymousDefinition.current; } 
	 EOF 
;

// Rule AnonymousDefinition
ruleAnonymousDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnonymousDefinitionAccess().getPrimitiveAnonymousDefinitionParserRuleCall_0(), currentNode); 
    }
    this_PrimitiveAnonymousDefinition_0=rulePrimitiveAnonymousDefinition
    { 
        $current = $this_PrimitiveAnonymousDefinition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnonymousDefinitionAccess().getCompositeAnonymousDefinitionParserRuleCall_1(), currentNode); 
    }
    this_CompositeAnonymousDefinition_1=ruleCompositeAnonymousDefinition
    { 
        $current = $this_CompositeAnonymousDefinition_1.current; 
        currentNode = currentNode.getParent();
    }
)
;







// Entry rule entryRulePrimitiveAnonymousDefinition
entryRulePrimitiveAnonymousDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveAnonymousDefinitionRule(), currentNode); }
	 iv_rulePrimitiveAnonymousDefinition=rulePrimitiveAnonymousDefinition 
	 { $current=$iv_rulePrimitiveAnonymousDefinition.current; } 
	 EOF 
;

// Rule PrimitiveAnonymousDefinition
rulePrimitiveAnonymousDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getPrimitiveAnonymousDefinitionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getPrimitiveAnonymousDefinitionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getAnnotationsAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveAnonymousDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'primitive' 
    {
        createLeafNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getPrimitiveKeyword_2(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getContentInterfaceParserRuleCall_4_0_0_0(), currentNode); 
	    }
		lv_content_4_1=ruleInterface		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveAnonymousDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_4_1, 
	        		"Interface", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getContentAttributeParserRuleCall_4_0_0_1(), currentNode); 
	    }
		lv_content_4_2=ruleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveAnonymousDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_4_2, 
	        		"Attribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getContentDataParserRuleCall_4_0_0_2(), currentNode); 
	    }
		lv_content_4_3=ruleData		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveAnonymousDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_4_3, 
	        		"Data", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getContentSourceParserRuleCall_4_0_0_3(), currentNode); 
	    }
		lv_content_4_4=ruleSource		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveAnonymousDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_4_4, 
	        		"Source", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)	';' 
    {
        createLeafNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getSemicolonKeyword_4_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getPrimitiveAnonymousDefinitionAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleCompositeAnonymousDefinition
entryRuleCompositeAnonymousDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompositeAnonymousDefinitionRule(), currentNode); }
	 iv_ruleCompositeAnonymousDefinition=ruleCompositeAnonymousDefinition 
	 { $current=$iv_ruleCompositeAnonymousDefinition.current; } 
	 EOF 
;

// Rule CompositeAnonymousDefinition
ruleCompositeAnonymousDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getCompositeAnonymousDefinitionAccess().getCompositeAnonymousDefinitionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompositeAnonymousDefinitionAccess().getCompositeAnonymousDefinitionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeAnonymousDefinitionAccess().getAnnotationsAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeAnonymousDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'composite' 
    {
        createLeafNode(grammarAccess.getCompositeAnonymousDefinitionAccess().getCompositeKeyword_2(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getCompositeAnonymousDefinitionAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
((
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeAnonymousDefinitionAccess().getContentInterfaceParserRuleCall_4_0_0_0(), currentNode); 
	    }
		lv_content_4_1=ruleInterface		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeAnonymousDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_4_1, 
	        		"Interface", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeAnonymousDefinitionAccess().getContentSubComponentParserRuleCall_4_0_0_1(), currentNode); 
	    }
		lv_content_4_2=ruleSubComponent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeAnonymousDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_4_2, 
	        		"SubComponent", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompositeAnonymousDefinitionAccess().getContentBindingParserRuleCall_4_0_0_2(), currentNode); 
	    }
		lv_content_4_3=ruleBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompositeAnonymousDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_4_3, 
	        		"Binding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)	';' 
    {
        createLeafNode(grammarAccess.getCompositeAnonymousDefinitionAccess().getSemicolonKeyword_4_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getCompositeAnonymousDefinitionAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBindingRule(), currentNode); }
	 iv_ruleBinding=ruleBinding 
	 { $current=$iv_ruleBinding.current; } 
	 EOF 
;

// Rule Binding
ruleBinding returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBindingAccess().getAnnotationsAnnotationParserRuleCall_0_0(), currentNode); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"annotations",
	        		lv_annotations_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'binds' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getBindsKeyword_1(), null); 
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBindingAccess().getFromSubCompSubComponentCrossReference_2_0_0(), "fromSubComp"); 
	}

)
)
    |	'this' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getThisKeyword_2_1(), null); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getFullStopKeyword_3(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBindingAccess().getFromItfInterfaceCrossReference_4_0(), "fromItf"); 
	}

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getLeftSquareBracketKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBindingAccess().getFromIndexIntegerLiteralParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_fromIndex_7_0=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fromIndex",
	        		lv_fromIndex_7_0, 
	        		"IntegerLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getRightSquareBracketKeyword_5_2(), null); 
    }
)?	'to' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getToKeyword_6(), null); 
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBindingAccess().getToSubCompSubComponentCrossReference_7_0_0(), "toSubComp"); 
	}

)
)
    |	'this' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getThisKeyword_7_1(), null); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getFullStopKeyword_8(), null); 
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBindingAccess().getToItfInterfaceCrossReference_9_0(), "toItf"); 
	}

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getLeftSquareBracketKeyword_10_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBindingAccess().getTondexIntegerLiteralParserRuleCall_10_1_0(), currentNode); 
	    }
		lv_tondex_15_0=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tondex",
	        		lv_tondex_15_0, 
	        		"IntegerLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getRightSquareBracketKeyword_10_2(), null); 
    }
)?)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationRule(), currentNode); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'@' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationAccess().getNameQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationAccess().getParametersSimpleAnnotationFieldParserRuleCall_2_1_0_0(), currentNode); 
	    }
		lv_parameters_3_0=ruleSimpleAnnotationField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_3_0, 
	        		"SimpleAnnotationField", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationAccess().getParametersAnnotationFieldParserRuleCall_2_1_1_0_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleAnnotationField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"AnnotationField", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getCommaKeyword_2_1_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationAccess().getParametersAnnotationFieldParserRuleCall_2_1_1_1_1_0(), currentNode); 
	    }
		lv_parameters_6_0=ruleAnnotationField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_6_0, 
	        		"AnnotationField", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*))?	')' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?)
;





// Entry rule entryRuleAnnotationField
entryRuleAnnotationField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationFieldRule(), currentNode); }
	 iv_ruleAnnotationField=ruleAnnotationField 
	 { $current=$iv_ruleAnnotationField.current; } 
	 EOF 
;

// Rule AnnotationField
ruleAnnotationField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAnnotationFieldAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getAnnotationFieldAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationFieldAccess().getValueAnnotationValueParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"AnnotationValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSimpleAnnotationField
entryRuleSimpleAnnotationField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleAnnotationFieldRule(), currentNode); }
	 iv_ruleSimpleAnnotationField=ruleSimpleAnnotationField 
	 { $current=$iv_ruleSimpleAnnotationField.current; } 
	 EOF 
;

// Rule SimpleAnnotationField
ruleSimpleAnnotationField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleAnnotationFieldAccess().getValueAnnotationValueParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleAnnotationFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"AnnotationValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleAnnotationValue
entryRuleAnnotationValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationValueRule(), currentNode); }
	 iv_ruleAnnotationValue=ruleAnnotationValue 
	 { $current=$iv_ruleAnnotationValue.current; } 
	 EOF 
;

// Rule AnnotationValue
ruleAnnotationValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationValueAccess().getLiteralParserRuleCall_0(), currentNode); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationValueAccess().getAnnotationAnnotationValueParserRuleCall_1(), currentNode); 
    }
    this_AnnotationAnnotationValue_1=ruleAnnotationAnnotationValue
    { 
        $current = $this_AnnotationAnnotationValue_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAnnotationValueAccess().getArrayValueParserRuleCall_2(), currentNode); 
    }
    this_ArrayValue_2=ruleArrayValue
    { 
        $current = $this_ArrayValue_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAnnotationAnnotationValue
entryRuleAnnotationAnnotationValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationAnnotationValueRule(), currentNode); }
	 iv_ruleAnnotationAnnotationValue=ruleAnnotationAnnotationValue 
	 { $current=$iv_ruleAnnotationAnnotationValue.current; } 
	 EOF 
;

// Rule AnnotationAnnotationValue
ruleAnnotationAnnotationValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationAnnotationValueAccess().getValueAnnotationParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationAnnotationValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleArrayValue
entryRuleArrayValue returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArrayValueRule(), currentNode); }
	 iv_ruleArrayValue=ruleArrayValue 
	 { $current=$iv_ruleArrayValue.current; } 
	 EOF 
;

// Rule ArrayValue
ruleArrayValue returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getArrayValueAccess().getArrayValueAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getArrayValueAccess().getArrayValueAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'{' 
    {
        createLeafNode(grammarAccess.getArrayValueAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArrayValueAccess().getValuesAnnotationValueParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_values_2_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArrayValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_2_0, 
	        		"AnnotationValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getArrayValueAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArrayValueAccess().getValuesAnnotationValueParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_values_4_0=ruleAnnotationValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArrayValueRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_4_0, 
	        		"AnnotationValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'}' 
    {
        createLeafNode(grammarAccess.getArrayValueAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;







// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0(), currentNode); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1(), currentNode); 
    }
    this_StringLiteral_1=ruleStringLiteral
    { 
        $current = $this_StringLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_2(), currentNode); 
    }
    this_NullLiteral_2=ruleNullLiteral
    { 
        $current = $this_NullLiteral_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3(), currentNode); 
    }
    this_BooleanLiteral_3=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getPathLiteralParserRuleCall_4(), currentNode); 
    }
    this_PathLiteral_4=rulePathLiteral
    { 
        $current = $this_PathLiteral_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerLiteralRule(), currentNode); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralRule(), currentNode); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'NULL' 
    {
        createLeafNode(grammarAccess.getNullLiteralAccess().getValueNULLKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "NULL", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=	'null' 
    {
        createLeafNode(grammarAccess.getNullLiteralAccess().getValueNullKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralRule(), currentNode); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'true' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=	'false' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_1_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_0, "false", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulePathLiteral
entryRulePathLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathLiteralRule(), currentNode); }
	 iv_rulePathLiteral=rulePathLiteral 
	 { $current=$iv_rulePathLiteral.current; } 
	 EOF 
;

// Rule PathLiteral
rulePathLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathLiteralAccess().getValuePathParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=rulePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"Path", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;







// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameRule(), currentNode); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameWithWildCardRule(), currentNode); } 
	 iv_ruleQualifiedNameWithWildCard=ruleQualifiedNameWithWildCard 
	 { $current=$iv_ruleQualifiedNameWithWildCard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameWithWildCardAccess().getIDTerminalRuleCall_0(), null); 
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopKeyword_1(), null); 
    }
(    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameWithWildCardAccess().getIDTerminalRuleCall_2_0(), null); 
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopKeyword_2_1(), null); 
    }
)*(
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQualifiedNameWithWildCardAccess().getAsteriskKeyword_3_0(), null); 
    }

    |    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameWithWildCardAccess().getIDTerminalRuleCall_3_1(), null); 
    }
))
    ;





// Rule FlowTypeKind
ruleFlowTypeKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'struct' 
	{
        $current = grammarAccess.getFlowTypeKindAccess().getSTRUCTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getFlowTypeKindAccess().getSTRUCTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'union' 
	{
        $current = grammarAccess.getFlowTypeKindAccess().getUNIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getFlowTypeKindAccess().getUNIONEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'enum' 
	{
        $current = grammarAccess.getFlowTypeKindAccess().getENUMEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getFlowTypeKindAccess().getENUMEnumLiteralDeclaration_2(), null); 
    }
));



// Rule AttributeType
ruleAttributeType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'int' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getIntEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getIntEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'string' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getStringEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getStringEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'int8_t' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getInt8_tEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getInt8_tEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'uint8_t' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getUint8_tEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getUint8_tEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'int16_t' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getInt16_tEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getInt16_tEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'uint16_t' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getUint16_tEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getUint16_tEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'int32_t' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getInt32_tEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getInt32_tEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'uint32_t' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getUint32_tEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getUint32_tEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'intptr_t' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getIntptr_tEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getIntptr_tEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'uintptr_t' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getUintptr_tEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeTypeAccess().getUintptr_tEnumLiteralDeclaration_9(), null); 
    }
));



RULE_INLINEDCODE : '{{' ( options {greedy=false;} : . )*'}}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


