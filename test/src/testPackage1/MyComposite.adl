import testPackage1.subs.MyComposite1  ;
import testPackage1.subs.MyComposite2  ;
import testPackage1.subs.MyPrimitive  ;
import testPackage1.subs.MyPrimitive1  ;
	
@testannotation(annotation =2 )
@test(annotationTwice = @titi(elementName=1))
composite testPackage1.MyComposite extends MyComposite1<T=MyComposite2,T1=MyPrimitive1>  {
    provides signature as MyCompositeInterface1;
    requires signature as MyCompositeInterface2;
	
	@test(annotation = @titi(elementName=1))
	contains composite as MyCompositeSub1
	{
        provides signature as MyCompositeSub1Interface1;
		@testSubannotation(annotation =2 )
		@testSub(annotationTwice = @titi(elementName=1))
        requires signature as MyCompositeSub1Interface2;
		
		contains primitive MyPrimitive  as MyCompositeSub1Sub1;
        contains composite MyComposite2 as MyCompositeSub1Sub2
        {
            @AnonymeCompletantUneDefinitionExistante
            provides signature
			  as MyCompositeSub1Sub2Interface1;
            requires signature as MyCompositeSub1Sub2Interface2;
		}

        ;
		
		binds MyCompositeSub1.MyCompositeSub1Interface1
		to MyCompositeSub1Sub1.MyPrimitiveInterface1;
		
		binds MyCompositeSub1.MyCompositeSub1Interface2
		to MyCompositeSub1Sub2.MyCompositeSub1Sub2Interface2;
		
		binds MyCompositeSub1Sub1.MyPrimitiveInterface2
		to MyCompositeSub1Sub2.MyComposite2Interface1;
	}

    ;
    binds this.MyCompositeInterface1 to MyComposite1Sub1.MyComposite2Interface1;
    binds MyComposite1Sub1.MyComposite2Interface2 to MyCompositeSub1.
    MyCompositeSub1Interface1;
    binds MyCompositeSub1.MyCompositeSub1Interface2 to this.MyCompositeInterface2;

}