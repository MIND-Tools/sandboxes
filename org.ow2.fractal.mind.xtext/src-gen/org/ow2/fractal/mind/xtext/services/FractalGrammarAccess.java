/*
* generated by Xtext
*/

package org.ow2.fractal.mind.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FractalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AdlDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdlDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportDefinitionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cDefinitionAnnotationsListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionAnnotationsListAnnotationsListParserRuleCall_1_0 = (RuleCall)cDefinitionAnnotationsListAssignment_1.eContents().get(0);
		private final Assignment cArchitecturedefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArchitecturedefinitionArchitectureDefinitionParserRuleCall_2_0 = (RuleCall)cArchitecturedefinitionAssignment_2.eContents().get(0);
		
		//AdlDefinition:
		//  imports+=ImportDefinition* definitionAnnotationsList=AnnotationsList?
		//  architecturedefinition=ArchitectureDefinition;
		public ParserRule getRule() { return rule; }

		//imports+=ImportDefinition* definitionAnnotationsList=AnnotationsList?
		//architecturedefinition=ArchitectureDefinition
		public Group getGroup() { return cGroup; }

		//imports+=ImportDefinition*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportDefinition
		public RuleCall getImportsImportDefinitionParserRuleCall_0_0() { return cImportsImportDefinitionParserRuleCall_0_0; }

		//definitionAnnotationsList=AnnotationsList?
		public Assignment getDefinitionAnnotationsListAssignment_1() { return cDefinitionAnnotationsListAssignment_1; }

		//AnnotationsList
		public RuleCall getDefinitionAnnotationsListAnnotationsListParserRuleCall_1_0() { return cDefinitionAnnotationsListAnnotationsListParserRuleCall_1_0; }

		//architecturedefinition=ArchitectureDefinition
		public Assignment getArchitecturedefinitionAssignment_2() { return cArchitecturedefinitionAssignment_2; }

		//ArchitectureDefinition
		public RuleCall getArchitecturedefinitionArchitectureDefinitionParserRuleCall_2_0() { return cArchitecturedefinitionArchitectureDefinitionParserRuleCall_2_0; }
	}

	public class ImportDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportNameIMPORT_NAMEParserRuleCall_1_0 = (RuleCall)cImportNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportDefinition:
		//  "import" importName=IMPORT_NAME ";";
		public ParserRule getRule() { return rule; }

		//"import" importName=IMPORT_NAME ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importName=IMPORT_NAME
		public Assignment getImportNameAssignment_1() { return cImportNameAssignment_1; }

		//IMPORT_NAME
		public RuleCall getImportNameIMPORT_NAMEParserRuleCall_1_0() { return cImportNameIMPORT_NAMEParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ArchitectureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArchitectureDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveComponentDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeComponentDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ArchitectureDefinition:
		//  ComponentTypeDefinition|PrimitiveComponentDefinition|
		//  CompositeComponentDefinition;
		public ParserRule getRule() { return rule; }

		//ComponentTypeDefinition|PrimitiveComponentDefinition|
		//CompositeComponentDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentTypeDefinition
		public RuleCall getComponentTypeDefinitionParserRuleCall_0() { return cComponentTypeDefinitionParserRuleCall_0; }

		//PrimitiveComponentDefinition
		public RuleCall getPrimitiveComponentDefinitionParserRuleCall_1() { return cPrimitiveComponentDefinitionParserRuleCall_1; }

		//CompositeComponentDefinition
		public RuleCall getCompositeComponentDefinitionParserRuleCall_2() { return cCompositeComponentDefinitionParserRuleCall_2; }
	}

	public class PrimitiveComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFQNParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPrimitiveFormalArgumentsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrimitiveFormalArgumentsListFormalArgumentsListParserRuleCall_3_0 = (RuleCall)cPrimitiveFormalArgumentsListAssignment_3.eContents().get(0);
		private final Assignment cReferencesListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReferencesListPrimitiveReferencesListParserRuleCall_4_0 = (RuleCall)cReferencesListAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cElementsAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cElementsAnnotationsListParserRuleCall_5_0_1_0_0 = (RuleCall)cElementsAssignment_5_0_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_5_0_1_1 = (Assignment)cGroup_5_0_1.eContents().get(1);
		private final RuleCall cElementsPrimitiveDefinitionElementParserRuleCall_5_0_1_1_0 = (RuleCall)cElementsAssignment_5_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cElementsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cElementsAnnotationsListParserRuleCall_5_1_0_0 = (RuleCall)cElementsAssignment_5_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cElementsPrimitiveDefinitionElementParserRuleCall_5_1_1_0 = (RuleCall)cElementsAssignment_5_1_1.eContents().get(0);
		
		//PrimitiveComponentDefinition:
		//  abstract?="abstract"? "primitive" name=FQN primitiveFormalArgumentsList=
		//  FormalArgumentsList? referencesList=PrimitiveReferencesList? ("{" (elements+=
		//  AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"|(elements+=
		//  AnnotationsList? elements+=PrimitiveDefinitionElement)*);
		public ParserRule getRule() { return rule; }

		//abstract?="abstract"? "primitive" name=FQN primitiveFormalArgumentsList=
		//FormalArgumentsList? referencesList=PrimitiveReferencesList? ("{" (elements+=
		//AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"|(elements+=
		//AnnotationsList? elements+=PrimitiveDefinitionElement)*)
		public Group getGroup() { return cGroup; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//"primitive"
		public Keyword getPrimitiveKeyword_1() { return cPrimitiveKeyword_1; }

		//name=FQN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_2_0() { return cNameFQNParserRuleCall_2_0; }

		//primitiveFormalArgumentsList=FormalArgumentsList?
		public Assignment getPrimitiveFormalArgumentsListAssignment_3() { return cPrimitiveFormalArgumentsListAssignment_3; }

		//FormalArgumentsList
		public RuleCall getPrimitiveFormalArgumentsListFormalArgumentsListParserRuleCall_3_0() { return cPrimitiveFormalArgumentsListFormalArgumentsListParserRuleCall_3_0; }

		//referencesList=PrimitiveReferencesList?
		public Assignment getReferencesListAssignment_4() { return cReferencesListAssignment_4; }

		//PrimitiveReferencesList
		public RuleCall getReferencesListPrimitiveReferencesListParserRuleCall_4_0() { return cReferencesListPrimitiveReferencesListParserRuleCall_4_0; }

		//"{" (elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"|(
		//elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"{" (elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }

		//(elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)*
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//elements+=AnnotationsList?
		public Assignment getElementsAssignment_5_0_1_0() { return cElementsAssignment_5_0_1_0; }

		//AnnotationsList
		public RuleCall getElementsAnnotationsListParserRuleCall_5_0_1_0_0() { return cElementsAnnotationsListParserRuleCall_5_0_1_0_0; }

		//elements+=PrimitiveDefinitionElement
		public Assignment getElementsAssignment_5_0_1_1() { return cElementsAssignment_5_0_1_1; }

		//PrimitiveDefinitionElement
		public RuleCall getElementsPrimitiveDefinitionElementParserRuleCall_5_0_1_1_0() { return cElementsPrimitiveDefinitionElementParserRuleCall_5_0_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//(elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//elements+=AnnotationsList?
		public Assignment getElementsAssignment_5_1_0() { return cElementsAssignment_5_1_0; }

		//AnnotationsList
		public RuleCall getElementsAnnotationsListParserRuleCall_5_1_0_0() { return cElementsAnnotationsListParserRuleCall_5_1_0_0; }

		//elements+=PrimitiveDefinitionElement
		public Assignment getElementsAssignment_5_1_1() { return cElementsAssignment_5_1_1; }

		//PrimitiveDefinitionElement
		public RuleCall getElementsPrimitiveDefinitionElementParserRuleCall_5_1_1_0() { return cElementsPrimitiveDefinitionElementParserRuleCall_5_1_1_0; }
	}

	public class PrimitiveDefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveDefinitionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cInterfaceDefinitionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAttributeDefinitionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cDataDefinitionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cImplementationDefinitionParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrimitiveDefinitionElement:
		//  (InterfaceDefinition|AttributeDefinition|DataDefinition|ImplementationDefinition
		//  ) ";"?;
		public ParserRule getRule() { return rule; }

		//(InterfaceDefinition|AttributeDefinition|DataDefinition|ImplementationDefinition
		//) ";"?
		public Group getGroup() { return cGroup; }

		//InterfaceDefinition|AttributeDefinition|DataDefinition|ImplementationDefinition
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall_0_0() { return cInterfaceDefinitionParserRuleCall_0_0; }

		//AttributeDefinition
		public RuleCall getAttributeDefinitionParserRuleCall_0_1() { return cAttributeDefinitionParserRuleCall_0_1; }

		//DataDefinition
		public RuleCall getDataDefinitionParserRuleCall_0_2() { return cDataDefinitionParserRuleCall_0_2; }

		//ImplementationDefinition
		public RuleCall getImplementationDefinitionParserRuleCall_0_3() { return cImplementationDefinitionParserRuleCall_0_3; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ComponentTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cReferencesListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReferencesListTypeReferencesListParserRuleCall_2_0 = (RuleCall)cReferencesListAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cElementsAnnotationsListParserRuleCall_3_0_0_0 = (RuleCall)cElementsAssignment_3_0_0.eContents().get(0);
		private final Assignment cElementsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cElementsTypeDefinitionElementParserRuleCall_3_0_1_0 = (RuleCall)cElementsAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Assignment cElementsAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cElementsAnnotationsListParserRuleCall_3_1_1_0_0 = (RuleCall)cElementsAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cElementsTypeDefinitionElementParserRuleCall_3_1_1_1_0 = (RuleCall)cElementsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//ComponentTypeDefinition:
		//  "type" name=FQN referencesList=TypeReferencesList? ((elements+=AnnotationsList?
		//  elements+=TypeDefinitionElement)*|"{" (elements+=AnnotationsList? elements+=
		//  TypeDefinitionElement)* "}");
		public ParserRule getRule() { return rule; }

		//"type" name=FQN referencesList=TypeReferencesList? ((elements+=AnnotationsList?
		//elements+=TypeDefinitionElement)*|"{" (elements+=AnnotationsList? elements+=
		//TypeDefinitionElement)* "}")
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }

		//referencesList=TypeReferencesList?
		public Assignment getReferencesListAssignment_2() { return cReferencesListAssignment_2; }

		//TypeReferencesList
		public RuleCall getReferencesListTypeReferencesListParserRuleCall_2_0() { return cReferencesListTypeReferencesListParserRuleCall_2_0; }

		//(elements+=AnnotationsList? elements+=TypeDefinitionElement)*|"{" (elements+=
		//AnnotationsList? elements+=TypeDefinitionElement)* "}"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//(elements+=AnnotationsList? elements+=TypeDefinitionElement)*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//elements+=AnnotationsList?
		public Assignment getElementsAssignment_3_0_0() { return cElementsAssignment_3_0_0; }

		//AnnotationsList
		public RuleCall getElementsAnnotationsListParserRuleCall_3_0_0_0() { return cElementsAnnotationsListParserRuleCall_3_0_0_0; }

		//elements+=TypeDefinitionElement
		public Assignment getElementsAssignment_3_0_1() { return cElementsAssignment_3_0_1; }

		//TypeDefinitionElement
		public RuleCall getElementsTypeDefinitionElementParserRuleCall_3_0_1_0() { return cElementsTypeDefinitionElementParserRuleCall_3_0_1_0; }

		//"{" (elements+=AnnotationsList? elements+=TypeDefinitionElement)* "}"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }

		//(elements+=AnnotationsList? elements+=TypeDefinitionElement)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//elements+=AnnotationsList?
		public Assignment getElementsAssignment_3_1_1_0() { return cElementsAssignment_3_1_1_0; }

		//AnnotationsList
		public RuleCall getElementsAnnotationsListParserRuleCall_3_1_1_0_0() { return cElementsAnnotationsListParserRuleCall_3_1_1_0_0; }

		//elements+=TypeDefinitionElement
		public Assignment getElementsAssignment_3_1_1_1() { return cElementsAssignment_3_1_1_1; }

		//TypeDefinitionElement
		public RuleCall getElementsTypeDefinitionElementParserRuleCall_3_1_1_1_0() { return cElementsTypeDefinitionElementParserRuleCall_3_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_2() { return cRightCurlyBracketKeyword_3_1_2; }
	}

	public class TypeReferenceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReferenceDefinition");
		private final Assignment cReferenceNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReferenceNameFQNParserRuleCall_0 = (RuleCall)cReferenceNameAssignment.eContents().get(0);
		
		//TypeReferenceDefinition:
		//  referenceName=FQN;
		public ParserRule getRule() { return rule; }

		//referenceName=FQN
		public Assignment getReferenceNameAssignment() { return cReferenceNameAssignment; }

		//FQN
		public RuleCall getReferenceNameFQNParserRuleCall_0() { return cReferenceNameFQNParserRuleCall_0; }
	}

	public class TypeDefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinitionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceDefinitionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//TypeDefinitionElement:
		//  InterfaceDefinition|InterfaceDefinition ";";
		public ParserRule getRule() { return rule; }

		//InterfaceDefinition|InterfaceDefinition ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall_0() { return cInterfaceDefinitionParserRuleCall_0; }

		//InterfaceDefinition ";"
		public Group getGroup_1() { return cGroup_1; }

		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall_1_0() { return cInterfaceDefinitionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class CompositeComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTemplateSpecifiersListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_2_0 = (RuleCall)cTemplateSpecifiersListAssignment_2.eContents().get(0);
		private final Assignment cCompositeFormalArgumentsListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0 = (RuleCall)cCompositeFormalArgumentsListAssignment_3.eContents().get(0);
		private final Assignment cReferencesListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReferencesListCompositeReferencesListParserRuleCall_4_0 = (RuleCall)cReferencesListAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Assignment cElementsAssignment_5_0_1_0 = (Assignment)cGroup_5_0_1.eContents().get(0);
		private final RuleCall cElementsAnnotationsListParserRuleCall_5_0_1_0_0 = (RuleCall)cElementsAssignment_5_0_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_5_0_1_1 = (Assignment)cGroup_5_0_1.eContents().get(1);
		private final RuleCall cElementsCompositeDefinitionElementParserRuleCall_5_0_1_1_0 = (RuleCall)cElementsAssignment_5_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cElementsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cElementsAnnotationsListParserRuleCall_5_1_0_0 = (RuleCall)cElementsAssignment_5_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cElementsCompositeDefinitionElementParserRuleCall_5_1_1_0 = (RuleCall)cElementsAssignment_5_1_1.eContents().get(0);
		
		//CompositeComponentDefinition:
		//  "composite" name=FQN templateSpecifiersList=TemplateSpecifiersList?
		//  compositeFormalArgumentsList=FormalArgumentsList? referencesList=
		//  CompositeReferencesList? ("{" (elements+=AnnotationsList? elements+=
		//  CompositeDefinitionElement)* "}"|(elements+=AnnotationsList? elements+=
		//  CompositeDefinitionElement)*);
		public ParserRule getRule() { return rule; }

		//"composite" name=FQN templateSpecifiersList=TemplateSpecifiersList?
		//compositeFormalArgumentsList=FormalArgumentsList? referencesList=
		//CompositeReferencesList? ("{" (elements+=AnnotationsList? elements+=
		//CompositeDefinitionElement)* "}"|(elements+=AnnotationsList? elements+=
		//CompositeDefinitionElement)*)
		public Group getGroup() { return cGroup; }

		//"composite"
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }

		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }

		//templateSpecifiersList=TemplateSpecifiersList?
		public Assignment getTemplateSpecifiersListAssignment_2() { return cTemplateSpecifiersListAssignment_2; }

		//TemplateSpecifiersList
		public RuleCall getTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_2_0() { return cTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_2_0; }

		//compositeFormalArgumentsList=FormalArgumentsList?
		public Assignment getCompositeFormalArgumentsListAssignment_3() { return cCompositeFormalArgumentsListAssignment_3; }

		//FormalArgumentsList
		public RuleCall getCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0() { return cCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0; }

		//referencesList=CompositeReferencesList?
		public Assignment getReferencesListAssignment_4() { return cReferencesListAssignment_4; }

		//CompositeReferencesList
		public RuleCall getReferencesListCompositeReferencesListParserRuleCall_4_0() { return cReferencesListCompositeReferencesListParserRuleCall_4_0; }

		//"{" (elements+=AnnotationsList? elements+=CompositeDefinitionElement)* "}"|(
		//elements+=AnnotationsList? elements+=CompositeDefinitionElement)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"{" (elements+=AnnotationsList? elements+=CompositeDefinitionElement)* "}"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0_0() { return cLeftCurlyBracketKeyword_5_0_0; }

		//(elements+=AnnotationsList? elements+=CompositeDefinitionElement)*
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//elements+=AnnotationsList?
		public Assignment getElementsAssignment_5_0_1_0() { return cElementsAssignment_5_0_1_0; }

		//AnnotationsList
		public RuleCall getElementsAnnotationsListParserRuleCall_5_0_1_0_0() { return cElementsAnnotationsListParserRuleCall_5_0_1_0_0; }

		//elements+=CompositeDefinitionElement
		public Assignment getElementsAssignment_5_0_1_1() { return cElementsAssignment_5_0_1_1; }

		//CompositeDefinitionElement
		public RuleCall getElementsCompositeDefinitionElementParserRuleCall_5_0_1_1_0() { return cElementsCompositeDefinitionElementParserRuleCall_5_0_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_0_2() { return cRightCurlyBracketKeyword_5_0_2; }

		//(elements+=AnnotationsList? elements+=CompositeDefinitionElement)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//elements+=AnnotationsList?
		public Assignment getElementsAssignment_5_1_0() { return cElementsAssignment_5_1_0; }

		//AnnotationsList
		public RuleCall getElementsAnnotationsListParserRuleCall_5_1_0_0() { return cElementsAnnotationsListParserRuleCall_5_1_0_0; }

		//elements+=CompositeDefinitionElement
		public Assignment getElementsAssignment_5_1_1() { return cElementsAssignment_5_1_1; }

		//CompositeDefinitionElement
		public RuleCall getElementsCompositeDefinitionElementParserRuleCall_5_1_1_0() { return cElementsCompositeDefinitionElementParserRuleCall_5_1_1_0; }
	}

	public class TemplateSpecifiersListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateSpecifiersList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTemplateSpecifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0 = (RuleCall)cTemplateSpecifiersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTemplateSpecifiersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0 = (RuleCall)cTemplateSpecifiersAssignment_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TemplateSpecifiersList:
		//  "<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=
		//  TemplateSpecifier)*) ">";
		public ParserRule getRule() { return rule; }

		//"<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=
		//TemplateSpecifier)*) ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*
		public Group getGroup_1() { return cGroup_1; }

		//templateSpecifiers+=TemplateSpecifier
		public Assignment getTemplateSpecifiersAssignment_1_0() { return cTemplateSpecifiersAssignment_1_0; }

		//TemplateSpecifier
		public RuleCall getTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0() { return cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0; }

		//("," templateSpecifiers+=TemplateSpecifier)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//templateSpecifiers+=TemplateSpecifier
		public Assignment getTemplateSpecifiersAssignment_1_1_1() { return cTemplateSpecifiersAssignment_1_1_1; }

		//TemplateSpecifier
		public RuleCall getTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0() { return cTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class FormalArgumentsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalArgumentsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFormalArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFormalArgumentsFormalArgumentParserRuleCall_1_0_0 = (RuleCall)cFormalArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFormalArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFormalArgumentsFormalArgumentParserRuleCall_1_1_1_0 = (RuleCall)cFormalArgumentsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FormalArgumentsList:
		//  "(" (formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*) ")";
		public ParserRule getRule() { return rule; }

		//"(" (formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*) ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*
		public Group getGroup_1() { return cGroup_1; }

		//formalArguments+=FormalArgument
		public Assignment getFormalArgumentsAssignment_1_0() { return cFormalArgumentsAssignment_1_0; }

		//FormalArgument
		public RuleCall getFormalArgumentsFormalArgumentParserRuleCall_1_0_0() { return cFormalArgumentsFormalArgumentParserRuleCall_1_0_0; }

		//("," formalArguments+=FormalArgument)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//formalArguments+=FormalArgument
		public Assignment getFormalArgumentsAssignment_1_1_1() { return cFormalArgumentsAssignment_1_1_1; }

		//FormalArgument
		public RuleCall getFormalArgumentsFormalArgumentParserRuleCall_1_1_1_0() { return cFormalArgumentsFormalArgumentParserRuleCall_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class PrimitiveReferencesListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveReferencesList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferencesPrimitiveReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReferencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReferencesPrimitiveReferenceDefinitionParserRuleCall_2_1_0 = (RuleCall)cReferencesAssignment_2_1.eContents().get(0);
		
		//PrimitiveReferencesList:
		//  "extends" references+=PrimitiveReferenceDefinition ("," references+=
		//  PrimitiveReferenceDefinition)*;
		public ParserRule getRule() { return rule; }

		//"extends" references+=PrimitiveReferenceDefinition ("," references+=
		//PrimitiveReferenceDefinition)*
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//references+=PrimitiveReferenceDefinition
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }

		//PrimitiveReferenceDefinition
		public RuleCall getReferencesPrimitiveReferenceDefinitionParserRuleCall_1_0() { return cReferencesPrimitiveReferenceDefinitionParserRuleCall_1_0; }

		//("," references+=PrimitiveReferenceDefinition)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//references+=PrimitiveReferenceDefinition
		public Assignment getReferencesAssignment_2_1() { return cReferencesAssignment_2_1; }

		//PrimitiveReferenceDefinition
		public RuleCall getReferencesPrimitiveReferenceDefinitionParserRuleCall_2_1_0() { return cReferencesPrimitiveReferenceDefinitionParserRuleCall_2_1_0; }
	}

	public class CompositeReferencesListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeReferencesList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferencesCompositeReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReferencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReferencesCompositeReferenceDefinitionParserRuleCall_2_1_0 = (RuleCall)cReferencesAssignment_2_1.eContents().get(0);
		
		//CompositeReferencesList:
		//  "extends" references+=CompositeReferenceDefinition ("," references+=
		//  CompositeReferenceDefinition)*;
		public ParserRule getRule() { return rule; }

		//"extends" references+=CompositeReferenceDefinition ("," references+=
		//CompositeReferenceDefinition)*
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//references+=CompositeReferenceDefinition
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }

		//CompositeReferenceDefinition
		public RuleCall getReferencesCompositeReferenceDefinitionParserRuleCall_1_0() { return cReferencesCompositeReferenceDefinitionParserRuleCall_1_0; }

		//("," references+=CompositeReferenceDefinition)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//references+=CompositeReferenceDefinition
		public Assignment getReferencesAssignment_2_1() { return cReferencesAssignment_2_1; }

		//CompositeReferenceDefinition
		public RuleCall getReferencesCompositeReferenceDefinitionParserRuleCall_2_1_0() { return cReferencesCompositeReferenceDefinitionParserRuleCall_2_1_0; }
	}

	public class TypeReferencesListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReferencesList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferencesTypeReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferencesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReferencesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReferencesTypeReferenceDefinitionParserRuleCall_2_1_0 = (RuleCall)cReferencesAssignment_2_1.eContents().get(0);
		
		//TypeReferencesList:
		//  "extends" references+=TypeReferenceDefinition ("," references+=
		//  TypeReferenceDefinition)*;
		public ParserRule getRule() { return rule; }

		//"extends" references+=TypeReferenceDefinition ("," references+=
		//TypeReferenceDefinition)*
		public Group getGroup() { return cGroup; }

		//"extends"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//references+=TypeReferenceDefinition
		public Assignment getReferencesAssignment_1() { return cReferencesAssignment_1; }

		//TypeReferenceDefinition
		public RuleCall getReferencesTypeReferenceDefinitionParserRuleCall_1_0() { return cReferencesTypeReferenceDefinitionParserRuleCall_1_0; }

		//("," references+=TypeReferenceDefinition)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//references+=TypeReferenceDefinition
		public Assignment getReferencesAssignment_2_1() { return cReferencesAssignment_2_1; }

		//TypeReferenceDefinition
		public RuleCall getReferencesTypeReferenceDefinitionParserRuleCall_2_1_0() { return cReferencesTypeReferenceDefinitionParserRuleCall_2_1_0; }
	}

	public class FormalArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalArgument");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FormalArgument:
		//  name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CompositeDefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeDefinitionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSubComponentDefinitionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cCompositeAnonymousSubComponentParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cInterfaceDefinitionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cBindingDefinitionParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CompositeDefinitionElement:
		//  (SubComponentDefinition|CompositeAnonymousSubComponent|InterfaceDefinition|
		//  BindingDefinition) ";"?;
		public ParserRule getRule() { return rule; }

		//(SubComponentDefinition|CompositeAnonymousSubComponent|InterfaceDefinition|
		//BindingDefinition) ";"?
		public Group getGroup() { return cGroup; }

		//SubComponentDefinition|CompositeAnonymousSubComponent|InterfaceDefinition|
		//BindingDefinition
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//SubComponentDefinition
		public RuleCall getSubComponentDefinitionParserRuleCall_0_0() { return cSubComponentDefinitionParserRuleCall_0_0; }

		//CompositeAnonymousSubComponent
		public RuleCall getCompositeAnonymousSubComponentParserRuleCall_0_1() { return cCompositeAnonymousSubComponentParserRuleCall_0_1; }

		//InterfaceDefinition
		public RuleCall getInterfaceDefinitionParserRuleCall_0_2() { return cInterfaceDefinitionParserRuleCall_0_2; }

		//BindingDefinition
		public RuleCall getBindingDefinitionParserRuleCall_0_3() { return cBindingDefinitionParserRuleCall_0_3; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class SubComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cCompositeSubComponentParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cCompositeAnonymousSubComponentParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cPrimitiveSubComponentParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cPrimitiveAnonymousSubComponentParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cTemplateSubComponentParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		
		//SubComponentDefinition:
		//  "contains" (CompositeSubComponent|CompositeAnonymousSubComponent|
		//  PrimitiveSubComponent|PrimitiveAnonymousSubComponent|TemplateSubComponent);
		public ParserRule getRule() { return rule; }

		//"contains" (CompositeSubComponent|CompositeAnonymousSubComponent|
		//PrimitiveSubComponent|PrimitiveAnonymousSubComponent|TemplateSubComponent)
		public Group getGroup() { return cGroup; }

		//"contains"
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }

		//CompositeSubComponent|CompositeAnonymousSubComponent|PrimitiveSubComponent|
		//PrimitiveAnonymousSubComponent|TemplateSubComponent
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//CompositeSubComponent
		public RuleCall getCompositeSubComponentParserRuleCall_1_0() { return cCompositeSubComponentParserRuleCall_1_0; }

		//CompositeAnonymousSubComponent
		public RuleCall getCompositeAnonymousSubComponentParserRuleCall_1_1() { return cCompositeAnonymousSubComponentParserRuleCall_1_1; }

		//PrimitiveSubComponent
		public RuleCall getPrimitiveSubComponentParserRuleCall_1_2() { return cPrimitiveSubComponentParserRuleCall_1_2; }

		//PrimitiveAnonymousSubComponent
		public RuleCall getPrimitiveAnonymousSubComponentParserRuleCall_1_3() { return cPrimitiveAnonymousSubComponentParserRuleCall_1_3; }

		//TemplateSubComponent
		public RuleCall getTemplateSubComponentParserRuleCall_1_4() { return cTemplateSubComponentParserRuleCall_1_4; }
	}

	public class ComponentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeReferenceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveReferenceDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeReferenceDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ComponentReference:
		//  CompositeReferenceDefinition|PrimitiveReferenceDefinition|
		//  TypeReferenceDefinition;
		public ParserRule getRule() { return rule; }

		//CompositeReferenceDefinition|PrimitiveReferenceDefinition|
		//TypeReferenceDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeReferenceDefinition
		public RuleCall getCompositeReferenceDefinitionParserRuleCall_0() { return cCompositeReferenceDefinitionParserRuleCall_0; }

		//PrimitiveReferenceDefinition
		public RuleCall getPrimitiveReferenceDefinitionParserRuleCall_1() { return cPrimitiveReferenceDefinitionParserRuleCall_1; }

		//TypeReferenceDefinition
		public RuleCall getTypeReferenceDefinitionParserRuleCall_2() { return cTypeReferenceDefinitionParserRuleCall_2; }
	}

	public class CompositeReferenceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeReferenceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceNameFQNParserRuleCall_0_0 = (RuleCall)cReferenceNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTemplatesListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTemplatesListTemplateDefinitionParserRuleCall_1_1_0 = (RuleCall)cTemplatesListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTemplatesListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTemplatesListTemplateDefinitionParserRuleCall_1_2_1_0 = (RuleCall)cTemplatesListAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_2_1_0 = (RuleCall)cArgumentsListAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsListAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//CompositeReferenceDefinition:
		//  referenceName=FQN ("<" templatesList+=TemplateDefinition ("," templatesList+=
		//  TemplateDefinition)* ">")? ("(" argumentsList+=ArgumentDefinition ("," argumentsList
		//  +=ArgumentDefinition)* ")")?;
		public ParserRule getRule() { return rule; }

		//referenceName=FQN ("<" templatesList+=TemplateDefinition ("," templatesList+=
		//TemplateDefinition)* ">")? ("(" argumentsList+=ArgumentDefinition ("," argumentsList
		//+=ArgumentDefinition)* ")")?
		public Group getGroup() { return cGroup; }

		//referenceName=FQN
		public Assignment getReferenceNameAssignment_0() { return cReferenceNameAssignment_0; }

		//FQN
		public RuleCall getReferenceNameFQNParserRuleCall_0_0() { return cReferenceNameFQNParserRuleCall_0_0; }

		//("<" templatesList+=TemplateDefinition ("," templatesList+=TemplateDefinition)* ">")
		//?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//templatesList+=TemplateDefinition
		public Assignment getTemplatesListAssignment_1_1() { return cTemplatesListAssignment_1_1; }

		//TemplateDefinition
		public RuleCall getTemplatesListTemplateDefinitionParserRuleCall_1_1_0() { return cTemplatesListTemplateDefinitionParserRuleCall_1_1_0; }

		//("," templatesList+=TemplateDefinition)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//templatesList+=TemplateDefinition
		public Assignment getTemplatesListAssignment_1_2_1() { return cTemplatesListAssignment_1_2_1; }

		//TemplateDefinition
		public RuleCall getTemplatesListTemplateDefinitionParserRuleCall_1_2_1_0() { return cTemplatesListTemplateDefinitionParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")
		//?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_2_1() { return cArgumentsListAssignment_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_2_1_0; }

		//("," argumentsList+=ArgumentDefinition)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_2_2_1() { return cArgumentsListAssignment_2_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class CompositeSubComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeSubComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceDefinitionCompositeReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferenceDefinitionAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//CompositeSubComponent:
		//  "composite" referenceDefinition=CompositeReferenceDefinition "as" name=ID;
		public ParserRule getRule() { return rule; }

		//"composite" referenceDefinition=CompositeReferenceDefinition "as" name=ID
		public Group getGroup() { return cGroup; }

		//"composite"
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }

		//referenceDefinition=CompositeReferenceDefinition
		public Assignment getReferenceDefinitionAssignment_1() { return cReferenceDefinitionAssignment_1; }

		//CompositeReferenceDefinition
		public RuleCall getReferenceDefinitionCompositeReferenceDefinitionParserRuleCall_1_0() { return cReferenceDefinitionCompositeReferenceDefinitionParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class CompositeAnonymousSubComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeAnonymousSubComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceDefinitionCompositeReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferenceDefinitionAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cElementsAnnotationsListParserRuleCall_5_0_0 = (RuleCall)cElementsAssignment_5_0.eContents().get(0);
		private final Assignment cElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElementsCompositeDefinitionElementParserRuleCall_5_1_0 = (RuleCall)cElementsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CompositeAnonymousSubComponent:
		//  "composite" referenceDefinition=CompositeReferenceDefinition? "as" name=ID "{" (
		//  elements+=AnnotationsList? elements+=CompositeDefinitionElement)* "}";
		public ParserRule getRule() { return rule; }

		//"composite" referenceDefinition=CompositeReferenceDefinition? "as" name=ID "{" (
		//elements+=AnnotationsList? elements+=CompositeDefinitionElement)* "}"
		public Group getGroup() { return cGroup; }

		//"composite"
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }

		//referenceDefinition=CompositeReferenceDefinition?
		public Assignment getReferenceDefinitionAssignment_1() { return cReferenceDefinitionAssignment_1; }

		//CompositeReferenceDefinition
		public RuleCall getReferenceDefinitionCompositeReferenceDefinitionParserRuleCall_1_0() { return cReferenceDefinitionCompositeReferenceDefinitionParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(elements+=AnnotationsList? elements+=CompositeDefinitionElement)*
		public Group getGroup_5() { return cGroup_5; }

		//elements+=AnnotationsList?
		public Assignment getElementsAssignment_5_0() { return cElementsAssignment_5_0; }

		//AnnotationsList
		public RuleCall getElementsAnnotationsListParserRuleCall_5_0_0() { return cElementsAnnotationsListParserRuleCall_5_0_0; }

		//elements+=CompositeDefinitionElement
		public Assignment getElementsAssignment_5_1() { return cElementsAssignment_5_1; }

		//CompositeDefinitionElement
		public RuleCall getElementsCompositeDefinitionElementParserRuleCall_5_1_0() { return cElementsCompositeDefinitionElementParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PrimitiveReferenceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveReferenceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceNameFQNParserRuleCall_0_0 = (RuleCall)cReferenceNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_1_1_0 = (RuleCall)cArgumentsListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsListAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PrimitiveReferenceDefinition:
		//  referenceName=FQN ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=
		//  ArgumentDefinition)* ")")?;
		public ParserRule getRule() { return rule; }

		//referenceName=FQN ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=
		//ArgumentDefinition)* ")")?
		public Group getGroup() { return cGroup; }

		//referenceName=FQN
		public Assignment getReferenceNameAssignment_0() { return cReferenceNameAssignment_0; }

		//FQN
		public RuleCall getReferenceNameFQNParserRuleCall_0_0() { return cReferenceNameFQNParserRuleCall_0_0; }

		//("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")
		//?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_1_1() { return cArgumentsListAssignment_1_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_1_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_1_1_0; }

		//("," argumentsList+=ArgumentDefinition)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//argumentsList+=ArgumentDefinition
		public Assignment getArgumentsListAssignment_1_2_1() { return cArgumentsListAssignment_1_2_1; }

		//ArgumentDefinition
		public RuleCall getArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0() { return cArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class TemplateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTemplateNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTemplateNameIDTerminalRuleCall_0_0_0 = (RuleCall)cTemplateNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cTemplateValueAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cTemplateValueFQNParserRuleCall_0_2_0_0 = (RuleCall)cTemplateValueAssignment_0_2_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_0_2_1 = (Keyword)cAlternatives_0_2.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Assignment cTemplateValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTemplateValueFQNParserRuleCall_1_0_0 = (RuleCall)cTemplateValueAssignment_1_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//TemplateDefinition:
		//  templateName=ID "=" (templateValue=FQN|"?")|(templateValue=FQN|"?");
		public ParserRule getRule() { return rule; }

		//templateName=ID "=" (templateValue=FQN|"?")|(templateValue=FQN|"?")
		public Alternatives getAlternatives() { return cAlternatives; }

		//templateName=ID "=" (templateValue=FQN|"?")
		public Group getGroup_0() { return cGroup_0; }

		//templateName=ID
		public Assignment getTemplateNameAssignment_0_0() { return cTemplateNameAssignment_0_0; }

		//ID
		public RuleCall getTemplateNameIDTerminalRuleCall_0_0_0() { return cTemplateNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//templateValue=FQN|"?"
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//templateValue=FQN
		public Assignment getTemplateValueAssignment_0_2_0() { return cTemplateValueAssignment_0_2_0; }

		//FQN
		public RuleCall getTemplateValueFQNParserRuleCall_0_2_0_0() { return cTemplateValueFQNParserRuleCall_0_2_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_0_2_1() { return cQuestionMarkKeyword_0_2_1; }

		//templateValue=FQN|"?"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//templateValue=FQN
		public Assignment getTemplateValueAssignment_1_0() { return cTemplateValueAssignment_1_0; }

		//FQN
		public RuleCall getTemplateValueFQNParserRuleCall_1_0_0() { return cTemplateValueFQNParserRuleCall_1_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
	}

	public class TemplateSubComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateSubComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTemplateReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTemplateReferenceTemplateSpecifierCrossReference_0_0 = (CrossReference)cTemplateReferenceAssignment_0.eContents().get(0);
		private final RuleCall cTemplateReferenceTemplateSpecifierIDTerminalRuleCall_0_0_1 = (RuleCall)cTemplateReferenceTemplateSpecifierCrossReference_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//TemplateSubComponent:
		//  templateReference=[TemplateSpecifier] "as" name=ID;
		public ParserRule getRule() { return rule; }

		//templateReference=[TemplateSpecifier] "as" name=ID
		public Group getGroup() { return cGroup; }

		//templateReference=[TemplateSpecifier]
		public Assignment getTemplateReferenceAssignment_0() { return cTemplateReferenceAssignment_0; }

		//[TemplateSpecifier]
		public CrossReference getTemplateReferenceTemplateSpecifierCrossReference_0_0() { return cTemplateReferenceTemplateSpecifierCrossReference_0_0; }

		//ID
		public RuleCall getTemplateReferenceTemplateSpecifierIDTerminalRuleCall_0_0_1() { return cTemplateReferenceTemplateSpecifierIDTerminalRuleCall_0_0_1; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class PrimitiveSubComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveSubComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceDefinitionPrimitiveReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferenceDefinitionAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//PrimitiveSubComponent:
		//  "primitive" referenceDefinition=PrimitiveReferenceDefinition "as" name=ID;
		public ParserRule getRule() { return rule; }

		//"primitive" referenceDefinition=PrimitiveReferenceDefinition "as" name=ID
		public Group getGroup() { return cGroup; }

		//"primitive"
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }

		//referenceDefinition=PrimitiveReferenceDefinition
		public Assignment getReferenceDefinitionAssignment_1() { return cReferenceDefinitionAssignment_1; }

		//PrimitiveReferenceDefinition
		public RuleCall getReferenceDefinitionPrimitiveReferenceDefinitionParserRuleCall_1_0() { return cReferenceDefinitionPrimitiveReferenceDefinitionParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class PrimitiveAnonymousSubComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveAnonymousSubComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceDefinitionPrimitiveReferenceDefinitionParserRuleCall_1_0 = (RuleCall)cReferenceDefinitionAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cElementsAnnotationsListParserRuleCall_5_0_0 = (RuleCall)cElementsAssignment_5_0.eContents().get(0);
		private final Assignment cElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElementsPrimitiveDefinitionElementParserRuleCall_5_1_0 = (RuleCall)cElementsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PrimitiveAnonymousSubComponent:
		//  "primitive" referenceDefinition=PrimitiveReferenceDefinition? "as" name=ID "{" (
		//  elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)* "}";
		public ParserRule getRule() { return rule; }

		//"primitive" referenceDefinition=PrimitiveReferenceDefinition? "as" name=ID "{" (
		//elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"
		public Group getGroup() { return cGroup; }

		//"primitive"
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }

		//referenceDefinition=PrimitiveReferenceDefinition?
		public Assignment getReferenceDefinitionAssignment_1() { return cReferenceDefinitionAssignment_1; }

		//PrimitiveReferenceDefinition
		public RuleCall getReferenceDefinitionPrimitiveReferenceDefinitionParserRuleCall_1_0() { return cReferenceDefinitionPrimitiveReferenceDefinitionParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)*
		public Group getGroup_5() { return cGroup_5; }

		//elements+=AnnotationsList?
		public Assignment getElementsAssignment_5_0() { return cElementsAssignment_5_0; }

		//AnnotationsList
		public RuleCall getElementsAnnotationsListParserRuleCall_5_0_0() { return cElementsAnnotationsListParserRuleCall_5_0_0; }

		//elements+=PrimitiveDefinitionElement
		public Assignment getElementsAssignment_5_1() { return cElementsAssignment_5_1; }

		//PrimitiveDefinitionElement
		public RuleCall getElementsPrimitiveDefinitionElementParserRuleCall_5_1_0() { return cElementsPrimitiveDefinitionElementParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAttributeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cAttributeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeNameIDTerminalRuleCall_2_0 = (RuleCall)cAttributeNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//AttributeDefinition:
		//  "attribute" type=AttributeType? attributeName=ID ("=" value=Value)?;
		public ParserRule getRule() { return rule; }

		//"attribute" type=AttributeType? attributeName=ID ("=" value=Value)?
		public Group getGroup() { return cGroup; }

		//"attribute"
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }

		//type=AttributeType?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_1_0() { return cTypeAttributeTypeParserRuleCall_1_0; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_2() { return cAttributeNameAssignment_2; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_2_0() { return cAttributeNameIDTerminalRuleCall_2_0; }

		//("=" value=Value)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//value=Value
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_1_0() { return cValueValueParserRuleCall_3_1_0; }
	}

	public class ArgumentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArgumentNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgumentNameIDTerminalRuleCall_0_0_0 = (RuleCall)cArgumentNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cArgumentValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cArgumentValueValueParserRuleCall_0_2_0 = (RuleCall)cArgumentValueAssignment_0_2.eContents().get(0);
		private final Assignment cArgumentValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArgumentValueValueParserRuleCall_1_0 = (RuleCall)cArgumentValueAssignment_1.eContents().get(0);
		
		//ArgumentDefinition:
		//  argumentName=ID "=" argumentValue=Value|argumentValue=Value;
		public ParserRule getRule() { return rule; }

		//argumentName=ID "=" argumentValue=Value|argumentValue=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//argumentName=ID "=" argumentValue=Value
		public Group getGroup_0() { return cGroup_0; }

		//argumentName=ID
		public Assignment getArgumentNameAssignment_0_0() { return cArgumentNameAssignment_0_0; }

		//ID
		public RuleCall getArgumentNameIDTerminalRuleCall_0_0_0() { return cArgumentNameIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//argumentValue=Value
		public Assignment getArgumentValueAssignment_0_2() { return cArgumentValueAssignment_0_2; }

		//Value
		public RuleCall getArgumentValueValueParserRuleCall_0_2_0() { return cArgumentValueValueParserRuleCall_0_2_0; }

		//argumentValue=Value
		public Assignment getArgumentValueAssignment_1() { return cArgumentValueAssignment_1; }

		//Value
		public RuleCall getArgumentValueValueParserRuleCall_1_0() { return cArgumentValueValueParserRuleCall_1_0; }
	}

	public class InterfaceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRoleAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRoleRoleEnumRuleCall_0_0_0 = (RuleCall)cRoleAssignment_0_0.eContents().get(0);
		private final Keyword cAsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cCollectionAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_0_3_0_0 = (Keyword)cCollectionAssignment_0_3_0.eContents().get(0);
		private final Assignment cCollectionsizeAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cCollectionsizeINTTerminalRuleCall_0_3_1_0 = (RuleCall)cCollectionsizeAssignment_0_3_1.eContents().get(0);
		private final Assignment cCollectionAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final Keyword cCollectionRightSquareBracketKeyword_0_3_2_0 = (Keyword)cCollectionAssignment_0_3_2.eContents().get(0);
		private final Assignment cContingencyAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cContingencyContingencyEnumRuleCall_0_4_0 = (RuleCall)cContingencyAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRoleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRoleRoleEnumRuleCall_1_0_0 = (RuleCall)cRoleAssignment_1_0.eContents().get(0);
		private final Assignment cSignatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSignatureFQNParserRuleCall_1_1_0 = (RuleCall)cSignatureAssignment_1_1.eContents().get(0);
		private final Keyword cAsKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cCollectionAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final Keyword cCollectionLeftSquareBracketKeyword_1_4_0_0 = (Keyword)cCollectionAssignment_1_4_0.eContents().get(0);
		private final Assignment cCollectionsizeAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cCollectionsizeINTTerminalRuleCall_1_4_1_0 = (RuleCall)cCollectionsizeAssignment_1_4_1.eContents().get(0);
		private final Assignment cCollectionAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final Keyword cCollectionRightSquareBracketKeyword_1_4_2_0 = (Keyword)cCollectionAssignment_1_4_2.eContents().get(0);
		private final Assignment cContingencyAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cContingencyContingencyEnumRuleCall_1_5_0 = (RuleCall)cContingencyAssignment_1_5.eContents().get(0);
		
		//InterfaceDefinition:
		//  role=Role "as" name=ID (collection?="[" collectionsize=INT? collection?="]")?
		//  contingency=Contingency?|role=Role signature=FQN "as" name=ID (collection?="["
		//  collectionsize=INT? collection?="]")? contingency=Contingency?;
		public ParserRule getRule() { return rule; }

		//role=Role "as" name=ID (collection?="[" collectionsize=INT? collection?="]")?
		//contingency=Contingency?|role=Role signature=FQN "as" name=ID (collection?="["
		//collectionsize=INT? collection?="]")? contingency=Contingency?
		public Alternatives getAlternatives() { return cAlternatives; }

		//role=Role "as" name=ID (collection?="[" collectionsize=INT? collection?="]")?
		//contingency=Contingency?
		public Group getGroup_0() { return cGroup_0; }

		//role=Role
		public Assignment getRoleAssignment_0_0() { return cRoleAssignment_0_0; }

		//Role
		public RuleCall getRoleRoleEnumRuleCall_0_0_0() { return cRoleRoleEnumRuleCall_0_0_0; }

		//"as"
		public Keyword getAsKeyword_0_1() { return cAsKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//(collection?="[" collectionsize=INT? collection?="]")?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//collection?="["
		public Assignment getCollectionAssignment_0_3_0() { return cCollectionAssignment_0_3_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_0_3_0_0() { return cCollectionLeftSquareBracketKeyword_0_3_0_0; }

		//collectionsize=INT?
		public Assignment getCollectionsizeAssignment_0_3_1() { return cCollectionsizeAssignment_0_3_1; }

		//INT
		public RuleCall getCollectionsizeINTTerminalRuleCall_0_3_1_0() { return cCollectionsizeINTTerminalRuleCall_0_3_1_0; }

		//collection?="]"
		public Assignment getCollectionAssignment_0_3_2() { return cCollectionAssignment_0_3_2; }

		//"]"
		public Keyword getCollectionRightSquareBracketKeyword_0_3_2_0() { return cCollectionRightSquareBracketKeyword_0_3_2_0; }

		//contingency=Contingency?
		public Assignment getContingencyAssignment_0_4() { return cContingencyAssignment_0_4; }

		//Contingency
		public RuleCall getContingencyContingencyEnumRuleCall_0_4_0() { return cContingencyContingencyEnumRuleCall_0_4_0; }

		//role=Role signature=FQN "as" name=ID (collection?="[" collectionsize=INT? collection?=
		//"]")? contingency=Contingency?
		public Group getGroup_1() { return cGroup_1; }

		//role=Role
		public Assignment getRoleAssignment_1_0() { return cRoleAssignment_1_0; }

		//Role
		public RuleCall getRoleRoleEnumRuleCall_1_0_0() { return cRoleRoleEnumRuleCall_1_0_0; }

		//signature=FQN
		public Assignment getSignatureAssignment_1_1() { return cSignatureAssignment_1_1; }

		//FQN
		public RuleCall getSignatureFQNParserRuleCall_1_1_0() { return cSignatureFQNParserRuleCall_1_1_0; }

		//"as"
		public Keyword getAsKeyword_1_2() { return cAsKeyword_1_2; }

		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }

		//(collection?="[" collectionsize=INT? collection?="]")?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//collection?="["
		public Assignment getCollectionAssignment_1_4_0() { return cCollectionAssignment_1_4_0; }

		//"["
		public Keyword getCollectionLeftSquareBracketKeyword_1_4_0_0() { return cCollectionLeftSquareBracketKeyword_1_4_0_0; }

		//collectionsize=INT?
		public Assignment getCollectionsizeAssignment_1_4_1() { return cCollectionsizeAssignment_1_4_1; }

		//INT
		public RuleCall getCollectionsizeINTTerminalRuleCall_1_4_1_0() { return cCollectionsizeINTTerminalRuleCall_1_4_1_0; }

		//collection?="]"
		public Assignment getCollectionAssignment_1_4_2() { return cCollectionAssignment_1_4_2; }

		//"]"
		public Keyword getCollectionRightSquareBracketKeyword_1_4_2_0() { return cCollectionRightSquareBracketKeyword_1_4_2_0; }

		//contingency=Contingency?
		public Assignment getContingencyAssignment_1_5() { return cContingencyAssignment_1_5; }

		//Contingency
		public RuleCall getContingencyContingencyEnumRuleCall_1_5_0() { return cContingencyContingencyEnumRuleCall_1_5_0; }
	}

	public class BindingDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindingDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cThisKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cInterfaceSourceParentNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInterfaceSourceParentNameIDTerminalRuleCall_1_1_0 = (RuleCall)cInterfaceSourceParentNameAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterfaceSourceNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInterfaceSourceNameIDTerminalRuleCall_3_0 = (RuleCall)cInterfaceSourceNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInterfaceSourceIndexAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInterfaceSourceIndexINTTerminalRuleCall_4_1_0 = (RuleCall)cInterfaceSourceIndexAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cThisKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Assignment cInterfaceTargetParentNameAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cInterfaceTargetParentNameIDTerminalRuleCall_6_1_0 = (RuleCall)cInterfaceTargetParentNameAssignment_6_1.eContents().get(0);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cInterfaceTargetNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInterfaceTargetNameIDTerminalRuleCall_8_0 = (RuleCall)cInterfaceTargetNameAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLeftSquareBracketKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cInterfaceTargetIndexAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cInterfaceTargetIndexINTTerminalRuleCall_9_1_0 = (RuleCall)cInterfaceTargetIndexAssignment_9_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		
		//BindingDefinition:
		//  "binds" ("this"|interfaceSourceParentName=ID) "." interfaceSourceName=ID ("["
		//  interfaceSourceIndex=INT "]")? "to" ("this"|interfaceTargetParentName=ID) "."
		//  interfaceTargetName=ID ("[" interfaceTargetIndex=INT "]")?;
		public ParserRule getRule() { return rule; }

		//"binds" ("this"|interfaceSourceParentName=ID) "." interfaceSourceName=ID ("["
		//interfaceSourceIndex=INT "]")? "to" ("this"|interfaceTargetParentName=ID) "."
		//interfaceTargetName=ID ("[" interfaceTargetIndex=INT "]")?
		public Group getGroup() { return cGroup; }

		//"binds"
		public Keyword getBindsKeyword_0() { return cBindsKeyword_0; }

		//"this"|interfaceSourceParentName=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"this"
		public Keyword getThisKeyword_1_0() { return cThisKeyword_1_0; }

		//interfaceSourceParentName=ID
		public Assignment getInterfaceSourceParentNameAssignment_1_1() { return cInterfaceSourceParentNameAssignment_1_1; }

		//ID
		public RuleCall getInterfaceSourceParentNameIDTerminalRuleCall_1_1_0() { return cInterfaceSourceParentNameIDTerminalRuleCall_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//interfaceSourceName=ID
		public Assignment getInterfaceSourceNameAssignment_3() { return cInterfaceSourceNameAssignment_3; }

		//ID
		public RuleCall getInterfaceSourceNameIDTerminalRuleCall_3_0() { return cInterfaceSourceNameIDTerminalRuleCall_3_0; }

		//("[" interfaceSourceIndex=INT "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//interfaceSourceIndex=INT
		public Assignment getInterfaceSourceIndexAssignment_4_1() { return cInterfaceSourceIndexAssignment_4_1; }

		//INT
		public RuleCall getInterfaceSourceIndexINTTerminalRuleCall_4_1_0() { return cInterfaceSourceIndexINTTerminalRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//"this"|interfaceTargetParentName=ID
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"this"
		public Keyword getThisKeyword_6_0() { return cThisKeyword_6_0; }

		//interfaceTargetParentName=ID
		public Assignment getInterfaceTargetParentNameAssignment_6_1() { return cInterfaceTargetParentNameAssignment_6_1; }

		//ID
		public RuleCall getInterfaceTargetParentNameIDTerminalRuleCall_6_1_0() { return cInterfaceTargetParentNameIDTerminalRuleCall_6_1_0; }

		//"."
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }

		//interfaceTargetName=ID
		public Assignment getInterfaceTargetNameAssignment_8() { return cInterfaceTargetNameAssignment_8; }

		//ID
		public RuleCall getInterfaceTargetNameIDTerminalRuleCall_8_0() { return cInterfaceTargetNameIDTerminalRuleCall_8_0; }

		//("[" interfaceTargetIndex=INT "]")?
		public Group getGroup_9() { return cGroup_9; }

		//"["
		public Keyword getLeftSquareBracketKeyword_9_0() { return cLeftSquareBracketKeyword_9_0; }

		//interfaceTargetIndex=INT
		public Assignment getInterfaceTargetIndexAssignment_9_1() { return cInterfaceTargetIndexAssignment_9_1; }

		//INT
		public RuleCall getInterfaceTargetIndexINTTerminalRuleCall_9_1_0() { return cInterfaceTargetIndexINTTerminalRuleCall_9_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_9_2() { return cRightSquareBracketKeyword_9_2; }
	}

	public class DataDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDataKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cFileCAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cFileCFileCParserRuleCall_0_1_0_0 = (RuleCall)cFileCAssignment_0_1_0.eContents().get(0);
		private final Assignment cInlineCcodeAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cInlineCcodeInlineCodeCParserRuleCall_0_1_1_0 = (RuleCall)cInlineCcodeAssignment_0_1_1.eContents().get(0);
		private final Keyword cNodataKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//DataDefinition:
		//  "data" (fileC=FileC|inlineCcode=InlineCodeC)|"nodata";
		public ParserRule getRule() { return rule; }

		//"data" (fileC=FileC|inlineCcode=InlineCodeC)|"nodata"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"data" (fileC=FileC|inlineCcode=InlineCodeC)
		public Group getGroup_0() { return cGroup_0; }

		//"data"
		public Keyword getDataKeyword_0_0() { return cDataKeyword_0_0; }

		//fileC=FileC|inlineCcode=InlineCodeC
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//fileC=FileC
		public Assignment getFileCAssignment_0_1_0() { return cFileCAssignment_0_1_0; }

		//FileC
		public RuleCall getFileCFileCParserRuleCall_0_1_0_0() { return cFileCFileCParserRuleCall_0_1_0_0; }

		//inlineCcode=InlineCodeC
		public Assignment getInlineCcodeAssignment_0_1_1() { return cInlineCcodeAssignment_0_1_1; }

		//InlineCodeC
		public RuleCall getInlineCcodeInlineCodeCParserRuleCall_0_1_1_0() { return cInlineCcodeInlineCodeCParserRuleCall_0_1_1_0; }

		//"nodata"
		public Keyword getNodataKeyword_1() { return cNodataKeyword_1; }
	}

	public class ImplementationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplementationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFileCAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFileCFileCParserRuleCall_1_0_0 = (RuleCall)cFileCAssignment_1_0.eContents().get(0);
		private final Assignment cInlineCcodeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cInlineCcodeInlineCodeCParserRuleCall_1_1_0 = (RuleCall)cInlineCcodeAssignment_1_1.eContents().get(0);
		
		//ImplementationDefinition:
		//  "source" (fileC=FileC|inlineCcode=InlineCodeC);
		public ParserRule getRule() { return rule; }

		//"source" (fileC=FileC|inlineCcode=InlineCodeC)
		public Group getGroup() { return cGroup; }

		//"source"
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//fileC=FileC|inlineCcode=InlineCodeC
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//fileC=FileC
		public Assignment getFileCAssignment_1_0() { return cFileCAssignment_1_0; }

		//FileC
		public RuleCall getFileCFileCParserRuleCall_1_0_0() { return cFileCFileCParserRuleCall_1_0_0; }

		//inlineCcode=InlineCodeC
		public Assignment getInlineCcodeAssignment_1_1() { return cInlineCcodeAssignment_1_1; }

		//InlineCodeC
		public RuleCall getInlineCcodeInlineCodeCParserRuleCall_1_1_0() { return cInlineCcodeInlineCodeCParserRuleCall_1_1_0; }
	}

	public class TemplateSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cConformstoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentTypeNameFQNParserRuleCall_2_0 = (RuleCall)cComponentTypeNameAssignment_2.eContents().get(0);
		
		//TemplateSpecifier:
		//  name=ID "conformsto" componentTypeName=FQN;
		public ParserRule getRule() { return rule; }

		//name=ID "conformsto" componentTypeName=FQN
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"conformsto"
		public Keyword getConformstoKeyword_1() { return cConformstoKeyword_1; }

		//componentTypeName=FQN
		public Assignment getComponentTypeNameAssignment_2() { return cComponentTypeNameAssignment_2; }

		//FQN
		public RuleCall getComponentTypeNameFQNParserRuleCall_2_0() { return cComponentTypeNameFQNParserRuleCall_2_0; }
	}

	public class FileCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectoryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectoryPathTerminalRuleCall_0_0 = (RuleCall)cDirectoryAssignment_0.eContents().get(0);
		private final Assignment cFileNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileNameFileNameParserRuleCall_1_0 = (RuleCall)cFileNameAssignment_1.eContents().get(0);
		
		//FileC:
		//  directory=Path? fileName=FileName;
		public ParserRule getRule() { return rule; }

		//directory=Path? fileName=FileName
		public Group getGroup() { return cGroup; }

		//directory=Path?
		public Assignment getDirectoryAssignment_0() { return cDirectoryAssignment_0; }

		//Path
		public RuleCall getDirectoryPathTerminalRuleCall_0_0() { return cDirectoryPathTerminalRuleCall_0_0; }

		//fileName=FileName
		public Assignment getFileNameAssignment_1() { return cFileNameAssignment_1; }

		//FileName
		public RuleCall getFileNameFileNameParserRuleCall_1_0() { return cFileNameFileNameParserRuleCall_1_0; }
	}

	public class FileNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FileName returns ecore::EString:
		//  ID ("." ID)?;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class InlineCodeCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineCodeC");
		private final Assignment cCodeCAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCodeCCodeCTerminalRuleCall_0 = (RuleCall)cCodeCAssignment.eContents().get(0);
		
		//InlineCodeC:
		//  codeC=CodeC;
		public ParserRule getRule() { return rule; }

		//codeC=CodeC
		public Assignment getCodeCAssignment() { return cCodeCAssignment; }

		//CodeC
		public RuleCall getCodeCCodeCTerminalRuleCall_0() { return cCodeCCodeCTerminalRuleCall_0; }
	}

	public class AnnotationsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		
		//AnnotationsList:
		//  annotations+=Annotation annotations+=Annotation*;
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation annotations+=Annotation*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAnnotationTypeParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationElementsAnnotationElementParserRuleCall_2_1_0 = (RuleCall)cAnnotationElementsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAnnotationElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0 = (RuleCall)cAnnotationElementsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Annotation:
		//  "@" name=AnnotationType ("(" annotationElements+=AnnotationElement (","
		//  annotationElements+=AnnotationElement)* ")")?;
		public ParserRule getRule() { return rule; }

		//"@" name=AnnotationType ("(" annotationElements+=AnnotationElement (","
		//annotationElements+=AnnotationElement)* ")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=AnnotationType
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AnnotationType
		public RuleCall getNameAnnotationTypeParserRuleCall_1_0() { return cNameAnnotationTypeParserRuleCall_1_0; }

		//("(" annotationElements+=AnnotationElement ("," annotationElements+=
		//AnnotationElement)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//annotationElements+=AnnotationElement
		public Assignment getAnnotationElementsAssignment_2_1() { return cAnnotationElementsAssignment_2_1; }

		//AnnotationElement
		public RuleCall getAnnotationElementsAnnotationElementParserRuleCall_2_1_0() { return cAnnotationElementsAnnotationElementParserRuleCall_2_1_0; }

		//("," annotationElements+=AnnotationElement)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//annotationElements+=AnnotationElement
		public Assignment getAnnotationElementsAssignment_2_2_1() { return cAnnotationElementsAssignment_2_2_1; }

		//AnnotationElement
		public RuleCall getAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0() { return cAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class AnnotationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementValueElementValueParserRuleCall_0_0 = (RuleCall)cElementValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cElementNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementNameIDTerminalRuleCall_1_0_0 = (RuleCall)cElementNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElementValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementValueElementValueParserRuleCall_1_2_0 = (RuleCall)cElementValueAssignment_1_2.eContents().get(0);
		
		//AnnotationElement:
		//  elementValue=ElementValue|elementName=ID "=" elementValue=ElementValue;
		public ParserRule getRule() { return rule; }

		//elementValue=ElementValue|elementName=ID "=" elementValue=ElementValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//elementValue=ElementValue
		public Assignment getElementValueAssignment_0() { return cElementValueAssignment_0; }

		//ElementValue
		public RuleCall getElementValueElementValueParserRuleCall_0_0() { return cElementValueElementValueParserRuleCall_0_0; }

		//elementName=ID "=" elementValue=ElementValue
		public Group getGroup_1() { return cGroup_1; }

		//elementName=ID
		public Assignment getElementNameAssignment_1_0() { return cElementNameAssignment_1_0; }

		//ID
		public RuleCall getElementNameIDTerminalRuleCall_1_0_0() { return cElementNameIDTerminalRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//elementValue=ElementValue
		public Assignment getElementValueAssignment_1_2() { return cElementValueAssignment_1_2; }

		//ElementValue
		public RuleCall getElementValueElementValueParserRuleCall_1_2_0() { return cElementValueElementValueParserRuleCall_1_2_0; }
	}

	public class ElementValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElementValueArrayInitializerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementValue:
		//  ConstantValue|Annotation|ElementValueArrayInitializer;
		public ParserRule getRule() { return rule; }

		//ConstantValue|Annotation|ElementValueArrayInitializer
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstantValue
		public RuleCall getConstantValueParserRuleCall_0() { return cConstantValueParserRuleCall_0; }

		//Annotation
		public RuleCall getAnnotationParserRuleCall_1() { return cAnnotationParserRuleCall_1; }

		//ElementValueArrayInitializer
		public RuleCall getElementValueArrayInitializerParserRuleCall_2() { return cElementValueArrayInitializerParserRuleCall_2; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueConstantFormatParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ConstantValue:
		//  value=ConstantFormat;
		public ParserRule getRule() { return rule; }

		//value=ConstantFormat
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ConstantFormat
		public RuleCall getValueConstantFormatParserRuleCall_0() { return cValueConstantFormatParserRuleCall_0; }
	}

	public class ConstantFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstantFormat returns ecore::EString:
		//  INT|STRING;
		public ParserRule getRule() { return rule; }

		//INT|STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class ElementValueArrayInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValueArrayInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesElementValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesElementValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ElementValueArrayInitializer:
		//  "{" values+=ElementValue ("," values+=ElementValue)* "}";
		public ParserRule getRule() { return rule; }

		//"{" values+=ElementValue ("," values+=ElementValue)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//values+=ElementValue
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//ElementValue
		public RuleCall getValuesElementValueParserRuleCall_1_0() { return cValuesElementValueParserRuleCall_1_0; }

		//("," values+=ElementValue)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=ElementValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//ElementValue
		public RuleCall getValuesElementValueParserRuleCall_2_1_0() { return cValuesElementValueParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignedINTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHexadecimalTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value returns ecore::EString:
		//  ID|signedINT|HexadecimalType|STRING;
		public ParserRule getRule() { return rule; }

		//ID|signedINT|HexadecimalType|STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//signedINT
		public RuleCall getSignedINTParserRuleCall_1() { return cSignedINTParserRuleCall_1; }

		//HexadecimalType
		public RuleCall getHexadecimalTypeParserRuleCall_2() { return cHexadecimalTypeParserRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
	}

	public class HexadecimalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexadecimalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//HexadecimalType returns ecore::EString:
		//  "0x" INT;
		public ParserRule getRule() { return rule; }

		//"0x" INT
		public Group getGroup() { return cGroup; }

		//"0x"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class AnnotationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOverrideKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSingletonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLDFlagsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCFlagsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final RuleCall cFQNParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AnnotationType returns ecore::EString:
		//  "Override"|"Singleton"|"LDFlags"|"CFlags"|FQN;
		public ParserRule getRule() { return rule; }

		//"Override"|"Singleton"|"LDFlags"|"CFlags"|FQN
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Override"
		public Keyword getOverrideKeyword_0() { return cOverrideKeyword_0; }

		//"Singleton"
		public Keyword getSingletonKeyword_1() { return cSingletonKeyword_1; }

		//"LDFlags"
		public Keyword getLDFlagsKeyword_2() { return cLDFlagsKeyword_2; }

		//"CFlags"
		public Keyword getCFlagsKeyword_3() { return cCFlagsKeyword_3; }

		//FQN
		public RuleCall getFQNParserRuleCall_4() { return cFQNParserRuleCall_4; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSTRUCTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUNIONKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cENUMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AttributeType returns ecore::EString:
		//  "STRUCT"|"UNION"|"ENUM"|ID;
		public ParserRule getRule() { return rule; }

		//"STRUCT"|"UNION"|"ENUM"|ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"STRUCT"
		public Keyword getSTRUCTKeyword_0() { return cSTRUCTKeyword_0; }

		//"UNION"
		public Keyword getUNIONKeyword_1() { return cUNIONKeyword_1; }

		//"ENUM"
		public Keyword getENUMKeyword_2() { return cENUMKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//  ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class IMPORT_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IMPORT_NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cFullStopAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IMPORT_NAME returns ecore::EString:
		//  ID ("." ID)* ".*"?;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)* ".*"?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_2() { return cFullStopAsteriskKeyword_2; }
	}

	public class SignedINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signedINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//signedINT returns ecore::EString:
		//  ("+"|"-")? INT;
		public ParserRule getRule() { return rule; }

		//("+"|"-")? INT
		public Group getGroup() { return cGroup; }

		//("+"|"-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class ContingencyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Contingency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOptionalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_0 = (Keyword)cOptionalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMandatoryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMandatoryMandatoryKeyword_1_0 = (Keyword)cMandatoryEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Contingency:
		//  optional | mandatory;
		public EnumRule getRule() { return rule; }

		//optional | mandatory
		public Alternatives getAlternatives() { return cAlternatives; }

		//optional
		public EnumLiteralDeclaration getOptionalEnumLiteralDeclaration_0() { return cOptionalEnumLiteralDeclaration_0; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_0() { return cOptionalOptionalKeyword_0_0; }

		//mandatory
		public EnumLiteralDeclaration getMandatoryEnumLiteralDeclaration_1() { return cMandatoryEnumLiteralDeclaration_1; }

		//"mandatory"
		public Keyword getMandatoryMandatoryKeyword_1_0() { return cMandatoryMandatoryKeyword_1_0; }
	}

	public class RoleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cProvidesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cProvidesProvidesKeyword_0_0 = (Keyword)cProvidesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRequiresEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRequiresRequiresKeyword_1_0 = (Keyword)cRequiresEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Role:
		//  provides | requires;
		public EnumRule getRule() { return rule; }

		//provides | requires
		public Alternatives getAlternatives() { return cAlternatives; }

		//provides
		public EnumLiteralDeclaration getProvidesEnumLiteralDeclaration_0() { return cProvidesEnumLiteralDeclaration_0; }

		//"provides"
		public Keyword getProvidesProvidesKeyword_0_0() { return cProvidesProvidesKeyword_0_0; }

		//requires
		public EnumLiteralDeclaration getRequiresEnumLiteralDeclaration_1() { return cRequiresEnumLiteralDeclaration_1; }

		//"requires"
		public Keyword getRequiresRequiresKeyword_1_0() { return cRequiresRequiresKeyword_1_0; }
	}
	
	private AdlDefinitionElements pAdlDefinition;
	private ImportDefinitionElements pImportDefinition;
	private ArchitectureDefinitionElements pArchitectureDefinition;
	private PrimitiveComponentDefinitionElements pPrimitiveComponentDefinition;
	private PrimitiveDefinitionElementElements pPrimitiveDefinitionElement;
	private ComponentTypeDefinitionElements pComponentTypeDefinition;
	private TypeReferenceDefinitionElements pTypeReferenceDefinition;
	private TypeDefinitionElementElements pTypeDefinitionElement;
	private CompositeComponentDefinitionElements pCompositeComponentDefinition;
	private TemplateSpecifiersListElements pTemplateSpecifiersList;
	private FormalArgumentsListElements pFormalArgumentsList;
	private PrimitiveReferencesListElements pPrimitiveReferencesList;
	private CompositeReferencesListElements pCompositeReferencesList;
	private TypeReferencesListElements pTypeReferencesList;
	private FormalArgumentElements pFormalArgument;
	private CompositeDefinitionElementElements pCompositeDefinitionElement;
	private SubComponentDefinitionElements pSubComponentDefinition;
	private ComponentReferenceElements pComponentReference;
	private CompositeReferenceDefinitionElements pCompositeReferenceDefinition;
	private CompositeSubComponentElements pCompositeSubComponent;
	private CompositeAnonymousSubComponentElements pCompositeAnonymousSubComponent;
	private PrimitiveReferenceDefinitionElements pPrimitiveReferenceDefinition;
	private TemplateDefinitionElements pTemplateDefinition;
	private TemplateSubComponentElements pTemplateSubComponent;
	private PrimitiveSubComponentElements pPrimitiveSubComponent;
	private PrimitiveAnonymousSubComponentElements pPrimitiveAnonymousSubComponent;
	private AttributeDefinitionElements pAttributeDefinition;
	private ArgumentDefinitionElements pArgumentDefinition;
	private InterfaceDefinitionElements pInterfaceDefinition;
	private BindingDefinitionElements pBindingDefinition;
	private DataDefinitionElements pDataDefinition;
	private ImplementationDefinitionElements pImplementationDefinition;
	private TemplateSpecifierElements pTemplateSpecifier;
	private FileCElements pFileC;
	private FileNameElements pFileName;
	private InlineCodeCElements pInlineCodeC;
	private AnnotationsListElements pAnnotationsList;
	private AnnotationElements pAnnotation;
	private AnnotationElementElements pAnnotationElement;
	private ElementValueElements pElementValue;
	private ConstantValueElements pConstantValue;
	private ConstantFormatElements pConstantFormat;
	private ElementValueArrayInitializerElements pElementValueArrayInitializer;
	private ValueElements pValue;
	private HexadecimalTypeElements pHexadecimalType;
	private AnnotationTypeElements pAnnotationType;
	private AttributeTypeElements pAttributeType;
	private FQNElements pFQN;
	private ContingencyElements unknownRuleContingency;
	private RoleElements unknownRuleRole;
	private IMPORT_NAMEElements pIMPORT_NAME;
	private TerminalRule tCodeC;
	private TerminalRule tPath;
	private SignedINTElements pSignedINT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FractalGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AdlDefinition:
	//  imports+=ImportDefinition* definitionAnnotationsList=AnnotationsList?
	//  architecturedefinition=ArchitectureDefinition;
	public AdlDefinitionElements getAdlDefinitionAccess() {
		return (pAdlDefinition != null) ? pAdlDefinition : (pAdlDefinition = new AdlDefinitionElements());
	}
	
	public ParserRule getAdlDefinitionRule() {
		return getAdlDefinitionAccess().getRule();
	}

	//ImportDefinition:
	//  "import" importName=IMPORT_NAME ";";
	public ImportDefinitionElements getImportDefinitionAccess() {
		return (pImportDefinition != null) ? pImportDefinition : (pImportDefinition = new ImportDefinitionElements());
	}
	
	public ParserRule getImportDefinitionRule() {
		return getImportDefinitionAccess().getRule();
	}

	//ArchitectureDefinition:
	//  ComponentTypeDefinition|PrimitiveComponentDefinition|
	//  CompositeComponentDefinition;
	public ArchitectureDefinitionElements getArchitectureDefinitionAccess() {
		return (pArchitectureDefinition != null) ? pArchitectureDefinition : (pArchitectureDefinition = new ArchitectureDefinitionElements());
	}
	
	public ParserRule getArchitectureDefinitionRule() {
		return getArchitectureDefinitionAccess().getRule();
	}

	//PrimitiveComponentDefinition:
	//  abstract?="abstract"? "primitive" name=FQN primitiveFormalArgumentsList=
	//  FormalArgumentsList? referencesList=PrimitiveReferencesList? ("{" (elements+=
	//  AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"|(elements+=
	//  AnnotationsList? elements+=PrimitiveDefinitionElement)*);
	public PrimitiveComponentDefinitionElements getPrimitiveComponentDefinitionAccess() {
		return (pPrimitiveComponentDefinition != null) ? pPrimitiveComponentDefinition : (pPrimitiveComponentDefinition = new PrimitiveComponentDefinitionElements());
	}
	
	public ParserRule getPrimitiveComponentDefinitionRule() {
		return getPrimitiveComponentDefinitionAccess().getRule();
	}

	//PrimitiveDefinitionElement:
	//  (InterfaceDefinition|AttributeDefinition|DataDefinition|ImplementationDefinition
	//  ) ";"?;
	public PrimitiveDefinitionElementElements getPrimitiveDefinitionElementAccess() {
		return (pPrimitiveDefinitionElement != null) ? pPrimitiveDefinitionElement : (pPrimitiveDefinitionElement = new PrimitiveDefinitionElementElements());
	}
	
	public ParserRule getPrimitiveDefinitionElementRule() {
		return getPrimitiveDefinitionElementAccess().getRule();
	}

	//ComponentTypeDefinition:
	//  "type" name=FQN referencesList=TypeReferencesList? ((elements+=AnnotationsList?
	//  elements+=TypeDefinitionElement)*|"{" (elements+=AnnotationsList? elements+=
	//  TypeDefinitionElement)* "}");
	public ComponentTypeDefinitionElements getComponentTypeDefinitionAccess() {
		return (pComponentTypeDefinition != null) ? pComponentTypeDefinition : (pComponentTypeDefinition = new ComponentTypeDefinitionElements());
	}
	
	public ParserRule getComponentTypeDefinitionRule() {
		return getComponentTypeDefinitionAccess().getRule();
	}

	//TypeReferenceDefinition:
	//  referenceName=FQN;
	public TypeReferenceDefinitionElements getTypeReferenceDefinitionAccess() {
		return (pTypeReferenceDefinition != null) ? pTypeReferenceDefinition : (pTypeReferenceDefinition = new TypeReferenceDefinitionElements());
	}
	
	public ParserRule getTypeReferenceDefinitionRule() {
		return getTypeReferenceDefinitionAccess().getRule();
	}

	//TypeDefinitionElement:
	//  InterfaceDefinition|InterfaceDefinition ";";
	public TypeDefinitionElementElements getTypeDefinitionElementAccess() {
		return (pTypeDefinitionElement != null) ? pTypeDefinitionElement : (pTypeDefinitionElement = new TypeDefinitionElementElements());
	}
	
	public ParserRule getTypeDefinitionElementRule() {
		return getTypeDefinitionElementAccess().getRule();
	}

	//CompositeComponentDefinition:
	//  "composite" name=FQN templateSpecifiersList=TemplateSpecifiersList?
	//  compositeFormalArgumentsList=FormalArgumentsList? referencesList=
	//  CompositeReferencesList? ("{" (elements+=AnnotationsList? elements+=
	//  CompositeDefinitionElement)* "}"|(elements+=AnnotationsList? elements+=
	//  CompositeDefinitionElement)*);
	public CompositeComponentDefinitionElements getCompositeComponentDefinitionAccess() {
		return (pCompositeComponentDefinition != null) ? pCompositeComponentDefinition : (pCompositeComponentDefinition = new CompositeComponentDefinitionElements());
	}
	
	public ParserRule getCompositeComponentDefinitionRule() {
		return getCompositeComponentDefinitionAccess().getRule();
	}

	//TemplateSpecifiersList:
	//  "<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=
	//  TemplateSpecifier)*) ">";
	public TemplateSpecifiersListElements getTemplateSpecifiersListAccess() {
		return (pTemplateSpecifiersList != null) ? pTemplateSpecifiersList : (pTemplateSpecifiersList = new TemplateSpecifiersListElements());
	}
	
	public ParserRule getTemplateSpecifiersListRule() {
		return getTemplateSpecifiersListAccess().getRule();
	}

	//FormalArgumentsList:
	//  "(" (formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*) ")";
	public FormalArgumentsListElements getFormalArgumentsListAccess() {
		return (pFormalArgumentsList != null) ? pFormalArgumentsList : (pFormalArgumentsList = new FormalArgumentsListElements());
	}
	
	public ParserRule getFormalArgumentsListRule() {
		return getFormalArgumentsListAccess().getRule();
	}

	//PrimitiveReferencesList:
	//  "extends" references+=PrimitiveReferenceDefinition ("," references+=
	//  PrimitiveReferenceDefinition)*;
	public PrimitiveReferencesListElements getPrimitiveReferencesListAccess() {
		return (pPrimitiveReferencesList != null) ? pPrimitiveReferencesList : (pPrimitiveReferencesList = new PrimitiveReferencesListElements());
	}
	
	public ParserRule getPrimitiveReferencesListRule() {
		return getPrimitiveReferencesListAccess().getRule();
	}

	//CompositeReferencesList:
	//  "extends" references+=CompositeReferenceDefinition ("," references+=
	//  CompositeReferenceDefinition)*;
	public CompositeReferencesListElements getCompositeReferencesListAccess() {
		return (pCompositeReferencesList != null) ? pCompositeReferencesList : (pCompositeReferencesList = new CompositeReferencesListElements());
	}
	
	public ParserRule getCompositeReferencesListRule() {
		return getCompositeReferencesListAccess().getRule();
	}

	//TypeReferencesList:
	//  "extends" references+=TypeReferenceDefinition ("," references+=
	//  TypeReferenceDefinition)*;
	public TypeReferencesListElements getTypeReferencesListAccess() {
		return (pTypeReferencesList != null) ? pTypeReferencesList : (pTypeReferencesList = new TypeReferencesListElements());
	}
	
	public ParserRule getTypeReferencesListRule() {
		return getTypeReferencesListAccess().getRule();
	}

	//FormalArgument:
	//  name=ID;
	public FormalArgumentElements getFormalArgumentAccess() {
		return (pFormalArgument != null) ? pFormalArgument : (pFormalArgument = new FormalArgumentElements());
	}
	
	public ParserRule getFormalArgumentRule() {
		return getFormalArgumentAccess().getRule();
	}

	//CompositeDefinitionElement:
	//  (SubComponentDefinition|CompositeAnonymousSubComponent|InterfaceDefinition|
	//  BindingDefinition) ";"?;
	public CompositeDefinitionElementElements getCompositeDefinitionElementAccess() {
		return (pCompositeDefinitionElement != null) ? pCompositeDefinitionElement : (pCompositeDefinitionElement = new CompositeDefinitionElementElements());
	}
	
	public ParserRule getCompositeDefinitionElementRule() {
		return getCompositeDefinitionElementAccess().getRule();
	}

	//SubComponentDefinition:
	//  "contains" (CompositeSubComponent|CompositeAnonymousSubComponent|
	//  PrimitiveSubComponent|PrimitiveAnonymousSubComponent|TemplateSubComponent);
	public SubComponentDefinitionElements getSubComponentDefinitionAccess() {
		return (pSubComponentDefinition != null) ? pSubComponentDefinition : (pSubComponentDefinition = new SubComponentDefinitionElements());
	}
	
	public ParserRule getSubComponentDefinitionRule() {
		return getSubComponentDefinitionAccess().getRule();
	}

	//ComponentReference:
	//  CompositeReferenceDefinition|PrimitiveReferenceDefinition|
	//  TypeReferenceDefinition;
	public ComponentReferenceElements getComponentReferenceAccess() {
		return (pComponentReference != null) ? pComponentReference : (pComponentReference = new ComponentReferenceElements());
	}
	
	public ParserRule getComponentReferenceRule() {
		return getComponentReferenceAccess().getRule();
	}

	//CompositeReferenceDefinition:
	//  referenceName=FQN ("<" templatesList+=TemplateDefinition ("," templatesList+=
	//  TemplateDefinition)* ">")? ("(" argumentsList+=ArgumentDefinition ("," argumentsList
	//  +=ArgumentDefinition)* ")")?;
	public CompositeReferenceDefinitionElements getCompositeReferenceDefinitionAccess() {
		return (pCompositeReferenceDefinition != null) ? pCompositeReferenceDefinition : (pCompositeReferenceDefinition = new CompositeReferenceDefinitionElements());
	}
	
	public ParserRule getCompositeReferenceDefinitionRule() {
		return getCompositeReferenceDefinitionAccess().getRule();
	}

	//CompositeSubComponent:
	//  "composite" referenceDefinition=CompositeReferenceDefinition "as" name=ID;
	public CompositeSubComponentElements getCompositeSubComponentAccess() {
		return (pCompositeSubComponent != null) ? pCompositeSubComponent : (pCompositeSubComponent = new CompositeSubComponentElements());
	}
	
	public ParserRule getCompositeSubComponentRule() {
		return getCompositeSubComponentAccess().getRule();
	}

	//CompositeAnonymousSubComponent:
	//  "composite" referenceDefinition=CompositeReferenceDefinition? "as" name=ID "{" (
	//  elements+=AnnotationsList? elements+=CompositeDefinitionElement)* "}";
	public CompositeAnonymousSubComponentElements getCompositeAnonymousSubComponentAccess() {
		return (pCompositeAnonymousSubComponent != null) ? pCompositeAnonymousSubComponent : (pCompositeAnonymousSubComponent = new CompositeAnonymousSubComponentElements());
	}
	
	public ParserRule getCompositeAnonymousSubComponentRule() {
		return getCompositeAnonymousSubComponentAccess().getRule();
	}

	//PrimitiveReferenceDefinition:
	//  referenceName=FQN ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=
	//  ArgumentDefinition)* ")")?;
	public PrimitiveReferenceDefinitionElements getPrimitiveReferenceDefinitionAccess() {
		return (pPrimitiveReferenceDefinition != null) ? pPrimitiveReferenceDefinition : (pPrimitiveReferenceDefinition = new PrimitiveReferenceDefinitionElements());
	}
	
	public ParserRule getPrimitiveReferenceDefinitionRule() {
		return getPrimitiveReferenceDefinitionAccess().getRule();
	}

	//TemplateDefinition:
	//  templateName=ID "=" (templateValue=FQN|"?")|(templateValue=FQN|"?");
	public TemplateDefinitionElements getTemplateDefinitionAccess() {
		return (pTemplateDefinition != null) ? pTemplateDefinition : (pTemplateDefinition = new TemplateDefinitionElements());
	}
	
	public ParserRule getTemplateDefinitionRule() {
		return getTemplateDefinitionAccess().getRule();
	}

	//TemplateSubComponent:
	//  templateReference=[TemplateSpecifier] "as" name=ID;
	public TemplateSubComponentElements getTemplateSubComponentAccess() {
		return (pTemplateSubComponent != null) ? pTemplateSubComponent : (pTemplateSubComponent = new TemplateSubComponentElements());
	}
	
	public ParserRule getTemplateSubComponentRule() {
		return getTemplateSubComponentAccess().getRule();
	}

	//PrimitiveSubComponent:
	//  "primitive" referenceDefinition=PrimitiveReferenceDefinition "as" name=ID;
	public PrimitiveSubComponentElements getPrimitiveSubComponentAccess() {
		return (pPrimitiveSubComponent != null) ? pPrimitiveSubComponent : (pPrimitiveSubComponent = new PrimitiveSubComponentElements());
	}
	
	public ParserRule getPrimitiveSubComponentRule() {
		return getPrimitiveSubComponentAccess().getRule();
	}

	//PrimitiveAnonymousSubComponent:
	//  "primitive" referenceDefinition=PrimitiveReferenceDefinition? "as" name=ID "{" (
	//  elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)* "}";
	public PrimitiveAnonymousSubComponentElements getPrimitiveAnonymousSubComponentAccess() {
		return (pPrimitiveAnonymousSubComponent != null) ? pPrimitiveAnonymousSubComponent : (pPrimitiveAnonymousSubComponent = new PrimitiveAnonymousSubComponentElements());
	}
	
	public ParserRule getPrimitiveAnonymousSubComponentRule() {
		return getPrimitiveAnonymousSubComponentAccess().getRule();
	}

	//AttributeDefinition:
	//  "attribute" type=AttributeType? attributeName=ID ("=" value=Value)?;
	public AttributeDefinitionElements getAttributeDefinitionAccess() {
		return (pAttributeDefinition != null) ? pAttributeDefinition : (pAttributeDefinition = new AttributeDefinitionElements());
	}
	
	public ParserRule getAttributeDefinitionRule() {
		return getAttributeDefinitionAccess().getRule();
	}

	//ArgumentDefinition:
	//  argumentName=ID "=" argumentValue=Value|argumentValue=Value;
	public ArgumentDefinitionElements getArgumentDefinitionAccess() {
		return (pArgumentDefinition != null) ? pArgumentDefinition : (pArgumentDefinition = new ArgumentDefinitionElements());
	}
	
	public ParserRule getArgumentDefinitionRule() {
		return getArgumentDefinitionAccess().getRule();
	}

	//InterfaceDefinition:
	//  role=Role "as" name=ID (collection?="[" collectionsize=INT? collection?="]")?
	//  contingency=Contingency?|role=Role signature=FQN "as" name=ID (collection?="["
	//  collectionsize=INT? collection?="]")? contingency=Contingency?;
	public InterfaceDefinitionElements getInterfaceDefinitionAccess() {
		return (pInterfaceDefinition != null) ? pInterfaceDefinition : (pInterfaceDefinition = new InterfaceDefinitionElements());
	}
	
	public ParserRule getInterfaceDefinitionRule() {
		return getInterfaceDefinitionAccess().getRule();
	}

	//BindingDefinition:
	//  "binds" ("this"|interfaceSourceParentName=ID) "." interfaceSourceName=ID ("["
	//  interfaceSourceIndex=INT "]")? "to" ("this"|interfaceTargetParentName=ID) "."
	//  interfaceTargetName=ID ("[" interfaceTargetIndex=INT "]")?;
	public BindingDefinitionElements getBindingDefinitionAccess() {
		return (pBindingDefinition != null) ? pBindingDefinition : (pBindingDefinition = new BindingDefinitionElements());
	}
	
	public ParserRule getBindingDefinitionRule() {
		return getBindingDefinitionAccess().getRule();
	}

	//DataDefinition:
	//  "data" (fileC=FileC|inlineCcode=InlineCodeC)|"nodata";
	public DataDefinitionElements getDataDefinitionAccess() {
		return (pDataDefinition != null) ? pDataDefinition : (pDataDefinition = new DataDefinitionElements());
	}
	
	public ParserRule getDataDefinitionRule() {
		return getDataDefinitionAccess().getRule();
	}

	//ImplementationDefinition:
	//  "source" (fileC=FileC|inlineCcode=InlineCodeC);
	public ImplementationDefinitionElements getImplementationDefinitionAccess() {
		return (pImplementationDefinition != null) ? pImplementationDefinition : (pImplementationDefinition = new ImplementationDefinitionElements());
	}
	
	public ParserRule getImplementationDefinitionRule() {
		return getImplementationDefinitionAccess().getRule();
	}

	//TemplateSpecifier:
	//  name=ID "conformsto" componentTypeName=FQN;
	public TemplateSpecifierElements getTemplateSpecifierAccess() {
		return (pTemplateSpecifier != null) ? pTemplateSpecifier : (pTemplateSpecifier = new TemplateSpecifierElements());
	}
	
	public ParserRule getTemplateSpecifierRule() {
		return getTemplateSpecifierAccess().getRule();
	}

	//FileC:
	//  directory=Path? fileName=FileName;
	public FileCElements getFileCAccess() {
		return (pFileC != null) ? pFileC : (pFileC = new FileCElements());
	}
	
	public ParserRule getFileCRule() {
		return getFileCAccess().getRule();
	}

	//FileName returns ecore::EString:
	//  ID ("." ID)?;
	public FileNameElements getFileNameAccess() {
		return (pFileName != null) ? pFileName : (pFileName = new FileNameElements());
	}
	
	public ParserRule getFileNameRule() {
		return getFileNameAccess().getRule();
	}

	//InlineCodeC:
	//  codeC=CodeC;
	public InlineCodeCElements getInlineCodeCAccess() {
		return (pInlineCodeC != null) ? pInlineCodeC : (pInlineCodeC = new InlineCodeCElements());
	}
	
	public ParserRule getInlineCodeCRule() {
		return getInlineCodeCAccess().getRule();
	}

	//AnnotationsList:
	//  annotations+=Annotation annotations+=Annotation*;
	public AnnotationsListElements getAnnotationsListAccess() {
		return (pAnnotationsList != null) ? pAnnotationsList : (pAnnotationsList = new AnnotationsListElements());
	}
	
	public ParserRule getAnnotationsListRule() {
		return getAnnotationsListAccess().getRule();
	}

	//Annotation:
	//  "@" name=AnnotationType ("(" annotationElements+=AnnotationElement (","
	//  annotationElements+=AnnotationElement)* ")")?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//AnnotationElement:
	//  elementValue=ElementValue|elementName=ID "=" elementValue=ElementValue;
	public AnnotationElementElements getAnnotationElementAccess() {
		return (pAnnotationElement != null) ? pAnnotationElement : (pAnnotationElement = new AnnotationElementElements());
	}
	
	public ParserRule getAnnotationElementRule() {
		return getAnnotationElementAccess().getRule();
	}

	//ElementValue:
	//  ConstantValue|Annotation|ElementValueArrayInitializer;
	public ElementValueElements getElementValueAccess() {
		return (pElementValue != null) ? pElementValue : (pElementValue = new ElementValueElements());
	}
	
	public ParserRule getElementValueRule() {
		return getElementValueAccess().getRule();
	}

	//ConstantValue:
	//  value=ConstantFormat;
	public ConstantValueElements getConstantValueAccess() {
		return (pConstantValue != null) ? pConstantValue : (pConstantValue = new ConstantValueElements());
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ConstantFormat returns ecore::EString:
	//  INT|STRING;
	public ConstantFormatElements getConstantFormatAccess() {
		return (pConstantFormat != null) ? pConstantFormat : (pConstantFormat = new ConstantFormatElements());
	}
	
	public ParserRule getConstantFormatRule() {
		return getConstantFormatAccess().getRule();
	}

	//ElementValueArrayInitializer:
	//  "{" values+=ElementValue ("," values+=ElementValue)* "}";
	public ElementValueArrayInitializerElements getElementValueArrayInitializerAccess() {
		return (pElementValueArrayInitializer != null) ? pElementValueArrayInitializer : (pElementValueArrayInitializer = new ElementValueArrayInitializerElements());
	}
	
	public ParserRule getElementValueArrayInitializerRule() {
		return getElementValueArrayInitializerAccess().getRule();
	}

	//Value returns ecore::EString:
	//  ID|signedINT|HexadecimalType|STRING;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//HexadecimalType returns ecore::EString:
	//  "0x" INT;
	public HexadecimalTypeElements getHexadecimalTypeAccess() {
		return (pHexadecimalType != null) ? pHexadecimalType : (pHexadecimalType = new HexadecimalTypeElements());
	}
	
	public ParserRule getHexadecimalTypeRule() {
		return getHexadecimalTypeAccess().getRule();
	}

	//AnnotationType returns ecore::EString:
	//  "Override"|"Singleton"|"LDFlags"|"CFlags"|FQN;
	public AnnotationTypeElements getAnnotationTypeAccess() {
		return (pAnnotationType != null) ? pAnnotationType : (pAnnotationType = new AnnotationTypeElements());
	}
	
	public ParserRule getAnnotationTypeRule() {
		return getAnnotationTypeAccess().getRule();
	}

	//AttributeType returns ecore::EString:
	//  "STRUCT"|"UNION"|"ENUM"|ID;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (pAttributeType != null) ? pAttributeType : (pAttributeType = new AttributeTypeElements());
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//FQN returns ecore::EString:
	//  ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//enum Contingency:
	//  optional | mandatory;
	public ContingencyElements getContingencyAccess() {
		return (unknownRuleContingency != null) ? unknownRuleContingency : (unknownRuleContingency = new ContingencyElements());
	}
	
	public EnumRule getContingencyRule() {
		return getContingencyAccess().getRule();
	}

	//enum Role:
	//  provides | requires;
	public RoleElements getRoleAccess() {
		return (unknownRuleRole != null) ? unknownRuleRole : (unknownRuleRole = new RoleElements());
	}
	
	public EnumRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//IMPORT_NAME returns ecore::EString:
	//  ID ("." ID)* ".*"?;
	public IMPORT_NAMEElements getIMPORT_NAMEAccess() {
		return (pIMPORT_NAME != null) ? pIMPORT_NAME : (pIMPORT_NAME = new IMPORT_NAMEElements());
	}
	
	public ParserRule getIMPORT_NAMERule() {
		return getIMPORT_NAMEAccess().getRule();
	}

	//terminal CodeC:
	//  "{{"->"}}";
	public TerminalRule getCodeCRule() {
		return (tCodeC != null) ? tCodeC : (tCodeC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CodeC"));
	} 

	//terminal Path:
	//  (ID ":"? | "."*) (("\\" | "\\\\" | "/") ID)* ("\\" | "\\\\" | "/");
	public TerminalRule getPathRule() {
		return (tPath != null) ? tPath : (tPath = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Path"));
	} 

	//signedINT returns ecore::EString:
	//  ("+"|"-")? INT;
	public SignedINTElements getSignedINTAccess() {
		return (pSignedINT != null) ? pSignedINT : (pSignedINT = new SignedINTElements());
	}
	
	public ParserRule getSignedINTRule() {
		return getSignedINTAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
