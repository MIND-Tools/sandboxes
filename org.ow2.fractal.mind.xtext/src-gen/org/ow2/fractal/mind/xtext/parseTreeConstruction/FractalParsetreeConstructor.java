/*
* generated by Xtext
*/
package org.ow2.fractal.mind.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.ow2.fractal.mind.xtext.services.FractalGrammarAccess;

import com.google.inject.Inject;

public class FractalParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private FractalGrammarAccess grammarAccess;
	
	@Override	
	public FractalGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdlDefinition_Group(this, this, 0, inst);
			case 1: return new ImportDefinition_Group(this, this, 1, inst);
			case 2: return new ArchitectureDefinition_Alternatives(this, this, 2, inst);
			case 3: return new PrimitiveComponentDefinition_Group(this, this, 3, inst);
			case 4: return new PrimitiveDefinitionElement_Group(this, this, 4, inst);
			case 5: return new ComponentTypeDefinition_Group(this, this, 5, inst);
			case 6: return new TypeReferenceDefinition_ReferenceNameAssignment(this, this, 6, inst);
			case 7: return new TypeDefinitionElement_Alternatives(this, this, 7, inst);
			case 8: return new CompositeComponentDefinition_Group(this, this, 8, inst);
			case 9: return new TemplateSpecifiersList_Group(this, this, 9, inst);
			case 10: return new FormalArgumentsList_Group(this, this, 10, inst);
			case 11: return new PrimitiveReferencesList_Group(this, this, 11, inst);
			case 12: return new CompositeReferencesList_Group(this, this, 12, inst);
			case 13: return new TypeReferencesList_Group(this, this, 13, inst);
			case 14: return new FormalArgument_NameAssignment(this, this, 14, inst);
			case 15: return new CompositeDefinitionElement_Group(this, this, 15, inst);
			case 16: return new SubComponentDefinition_Group(this, this, 16, inst);
			case 17: return new ComponentReference_Alternatives(this, this, 17, inst);
			case 18: return new CompositeReferenceDefinition_Group(this, this, 18, inst);
			case 19: return new CompositeSubComponent_Group(this, this, 19, inst);
			case 20: return new CompositeAnonymousSubComponent_Group(this, this, 20, inst);
			case 21: return new PrimitiveReferenceDefinition_Group(this, this, 21, inst);
			case 22: return new TemplateDefinition_Alternatives(this, this, 22, inst);
			case 23: return new TemplateSubComponent_Group(this, this, 23, inst);
			case 24: return new PrimitiveSubComponent_Group(this, this, 24, inst);
			case 25: return new PrimitiveAnonymousSubComponent_Group(this, this, 25, inst);
			case 26: return new AttributeDefinition_Group(this, this, 26, inst);
			case 27: return new ArgumentDefinition_Alternatives(this, this, 27, inst);
			case 28: return new InterfaceDefinition_Alternatives(this, this, 28, inst);
			case 29: return new BindingDefinition_Group(this, this, 29, inst);
			case 30: return new DataDefinition_Alternatives(this, this, 30, inst);
			case 31: return new ImplementationDefinition_Group(this, this, 31, inst);
			case 32: return new TemplateSpecifier_Group(this, this, 32, inst);
			case 33: return new FileC_Group(this, this, 33, inst);
			case 34: return new InlineCodeC_CodeCAssignment(this, this, 34, inst);
			case 35: return new AnnotationsList_Group(this, this, 35, inst);
			case 36: return new Annotation_Group(this, this, 36, inst);
			case 37: return new AnnotationElement_Alternatives(this, this, 37, inst);
			case 38: return new ElementValue_Alternatives(this, this, 38, inst);
			case 39: return new ConstantValue_ValueAssignment(this, this, 39, inst);
			case 40: return new ElementValueArrayInitializer_Group(this, this, 40, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule AdlDefinition ****************
 *
 * AdlDefinition:
 *   imports+=ImportDefinition* definitionAnnotationsList=AnnotationsList?
 *   architecturedefinition=ArchitectureDefinition;
 *
 **/

// imports+=ImportDefinition* definitionAnnotationsList=AnnotationsList?
// architecturedefinition=ArchitectureDefinition
protected class AdlDefinition_Group extends GroupToken {
	
	public AdlDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdlDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdlDefinition_ArchitecturedefinitionAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdlDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=ImportDefinition*
protected class AdlDefinition_ImportsAssignment_0 extends AssignmentToken  {
	
	public AdlDefinition_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdlDefinitionAccess().getImportsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ImportDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdlDefinitionAccess().getImportsImportDefinitionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdlDefinition_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// definitionAnnotationsList=AnnotationsList?
protected class AdlDefinition_DefinitionAnnotationsListAssignment_1 extends AssignmentToken  {
	
	public AdlDefinition_DefinitionAnnotationsListAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdlDefinitionAccess().getDefinitionAnnotationsListAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("definitionAnnotationsList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("definitionAnnotationsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdlDefinitionAccess().getDefinitionAnnotationsListAnnotationsListParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdlDefinition_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// architecturedefinition=ArchitectureDefinition
protected class AdlDefinition_ArchitecturedefinitionAssignment_2 extends AssignmentToken  {
	
	public AdlDefinition_ArchitecturedefinitionAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdlDefinitionAccess().getArchitecturedefinitionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArchitectureDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("architecturedefinition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("architecturedefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArchitectureDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAdlDefinitionAccess().getArchitecturedefinitionArchitectureDefinitionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AdlDefinition_DefinitionAnnotationsListAssignment_1(parent, next, actIndex, consumed);
			case 1: return new AdlDefinition_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule AdlDefinition ****************/


/************ begin Rule ImportDefinition ****************
 *
 * ImportDefinition:
 *   "import" importName=IMPORT_NAME ";";
 *
 **/

// "import" importName=IMPORT_NAME ";"
protected class ImportDefinition_Group extends GroupToken {
	
	public ImportDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ImportDefinition_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class ImportDefinition_ImportKeyword_0 extends KeywordToken  {
	
	public ImportDefinition_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportDefinitionAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importName=IMPORT_NAME
protected class ImportDefinition_ImportNameAssignment_1 extends AssignmentToken  {
	
	public ImportDefinition_ImportNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportDefinitionAccess().getImportNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ImportDefinition_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getImportDefinitionAccess().getImportNameIMPORT_NAMEParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ImportDefinition_SemicolonKeyword_2 extends KeywordToken  {
	
	public ImportDefinition_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportDefinitionAccess().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ImportDefinition_ImportNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ImportDefinition ****************/


/************ begin Rule ArchitectureDefinition ****************
 *
 * ArchitectureDefinition:
 *   ComponentTypeDefinition|PrimitiveComponentDefinition|
 *   CompositeComponentDefinition;
 *
 **/

// ComponentTypeDefinition|PrimitiveComponentDefinition|
// CompositeComponentDefinition
protected class ArchitectureDefinition_Alternatives extends AlternativesToken {

	public ArchitectureDefinition_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getArchitectureDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArchitectureDefinition_ComponentTypeDefinitionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ArchitectureDefinition_PrimitiveComponentDefinitionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ArchitectureDefinition_CompositeComponentDefinitionParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getArchitectureDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ComponentTypeDefinition
protected class ArchitectureDefinition_ComponentTypeDefinitionParserRuleCall_0 extends RuleCallToken {
	
	public ArchitectureDefinition_ComponentTypeDefinitionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArchitectureDefinitionAccess().getComponentTypeDefinitionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentTypeDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ComponentTypeDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getComponentTypeDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PrimitiveComponentDefinition
protected class ArchitectureDefinition_PrimitiveComponentDefinitionParserRuleCall_1 extends RuleCallToken {
	
	public ArchitectureDefinition_PrimitiveComponentDefinitionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArchitectureDefinitionAccess().getPrimitiveComponentDefinitionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PrimitiveComponentDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPrimitiveComponentDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompositeComponentDefinition
protected class ArchitectureDefinition_CompositeComponentDefinitionParserRuleCall_2 extends RuleCallToken {
	
	public ArchitectureDefinition_CompositeComponentDefinitionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArchitectureDefinitionAccess().getCompositeComponentDefinitionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeComponentDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompositeComponentDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompositeComponentDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ArchitectureDefinition ****************/


/************ begin Rule PrimitiveComponentDefinition ****************
 *
 * PrimitiveComponentDefinition:
 *   abstract?="abstract"? "primitive" name=FQN primitiveFormalArgumentsList=
 *   FormalArgumentsList? referencesList=PrimitiveReferencesList? ("{" (elements+=
 *   AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"|(elements+=
 *   AnnotationsList? elements+=PrimitiveDefinitionElement)*);
 *
 **/

// abstract?="abstract"? "primitive" name=FQN primitiveFormalArgumentsList=
// FormalArgumentsList? referencesList=PrimitiveReferencesList? ("{" (elements+=
// AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"|(elements+=
// AnnotationsList? elements+=PrimitiveDefinitionElement)*)
protected class PrimitiveComponentDefinition_Group extends GroupToken {
	
	public PrimitiveComponentDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_Alternatives_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimitiveComponentDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// abstract?="abstract"?
protected class PrimitiveComponentDefinition_AbstractAssignment_0 extends AssignmentToken  {
	
	public PrimitiveComponentDefinition_AbstractAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getAbstractAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("abstract",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("abstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPrimitiveComponentDefinitionAccess().getAbstractAbstractKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "primitive"
protected class PrimitiveComponentDefinition_PrimitiveKeyword_1 extends KeywordToken  {
	
	public PrimitiveComponentDefinition_PrimitiveKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getPrimitiveKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_AbstractAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=FQN
protected class PrimitiveComponentDefinition_NameAssignment_2 extends AssignmentToken  {
	
	public PrimitiveComponentDefinition_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_PrimitiveKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPrimitiveComponentDefinitionAccess().getNameFQNParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// primitiveFormalArgumentsList=FormalArgumentsList?
protected class PrimitiveComponentDefinition_PrimitiveFormalArgumentsListAssignment_3 extends AssignmentToken  {
	
	public PrimitiveComponentDefinition_PrimitiveFormalArgumentsListAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getPrimitiveFormalArgumentsListAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormalArgumentsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("primitiveFormalArgumentsList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("primitiveFormalArgumentsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalArgumentsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveComponentDefinitionAccess().getPrimitiveFormalArgumentsListFormalArgumentsListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// referencesList=PrimitiveReferencesList?
protected class PrimitiveComponentDefinition_ReferencesListAssignment_4 extends AssignmentToken  {
	
	public PrimitiveComponentDefinition_ReferencesListAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getReferencesListAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferencesList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referencesList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referencesList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveReferencesListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveComponentDefinitionAccess().getReferencesListPrimitiveReferencesListParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_PrimitiveFormalArgumentsListAssignment_3(parent, next, actIndex, consumed);
			case 1: return new PrimitiveComponentDefinition_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{" (elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"|(
// elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)*
protected class PrimitiveComponentDefinition_Alternatives_5 extends AlternativesToken {

	public PrimitiveComponentDefinition_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_Group_5_0(parent, this, 0, inst);
			case 1: return new PrimitiveComponentDefinition_Group_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{" (elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"
protected class PrimitiveComponentDefinition_Group_5_0 extends GroupToken {
	
	public PrimitiveComponentDefinition_Group_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_RightCurlyBracketKeyword_5_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class PrimitiveComponentDefinition_LeftCurlyBracketKeyword_5_0_0 extends KeywordToken  {
	
	public PrimitiveComponentDefinition_LeftCurlyBracketKeyword_5_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getLeftCurlyBracketKeyword_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_ReferencesListAssignment_4(parent, this, 0, inst);
			case 1: return new PrimitiveComponentDefinition_PrimitiveFormalArgumentsListAssignment_3(parent, this, 1, inst);
			case 2: return new PrimitiveComponentDefinition_NameAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// (elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)*
protected class PrimitiveComponentDefinition_Group_5_0_1 extends GroupToken {
	
	public PrimitiveComponentDefinition_Group_5_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getGroup_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_ElementsAssignment_5_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=AnnotationsList?
protected class PrimitiveComponentDefinition_ElementsAssignment_5_0_1_0 extends AssignmentToken  {
	
	public PrimitiveComponentDefinition_ElementsAssignment_5_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getElementsAssignment_5_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveComponentDefinitionAccess().getElementsAnnotationsListParserRuleCall_5_0_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_Group_5_0_1(parent, next, actIndex, consumed);
			case 1: return new PrimitiveComponentDefinition_LeftCurlyBracketKeyword_5_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=PrimitiveDefinitionElement
protected class PrimitiveComponentDefinition_ElementsAssignment_5_0_1_1 extends AssignmentToken  {
	
	public PrimitiveComponentDefinition_ElementsAssignment_5_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getElementsAssignment_5_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveDefinitionElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveDefinitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveComponentDefinitionAccess().getElementsPrimitiveDefinitionElementParserRuleCall_5_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_ElementsAssignment_5_0_1_0(parent, next, actIndex, consumed);
			case 1: return new PrimitiveComponentDefinition_Group_5_0_1(parent, next, actIndex, consumed);
			case 2: return new PrimitiveComponentDefinition_LeftCurlyBracketKeyword_5_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class PrimitiveComponentDefinition_RightCurlyBracketKeyword_5_0_2 extends KeywordToken  {
	
	public PrimitiveComponentDefinition_RightCurlyBracketKeyword_5_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getRightCurlyBracketKeyword_5_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_Group_5_0_1(parent, this, 0, inst);
			case 1: return new PrimitiveComponentDefinition_LeftCurlyBracketKeyword_5_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// (elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)*
protected class PrimitiveComponentDefinition_Group_5_1 extends GroupToken {
	
	public PrimitiveComponentDefinition_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_ElementsAssignment_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=AnnotationsList?
protected class PrimitiveComponentDefinition_ElementsAssignment_5_1_0 extends AssignmentToken  {
	
	public PrimitiveComponentDefinition_ElementsAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getElementsAssignment_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveComponentDefinitionAccess().getElementsAnnotationsListParserRuleCall_5_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_Group_5_1(parent, next, actIndex, consumed);
			case 1: return new PrimitiveComponentDefinition_ReferencesListAssignment_4(parent, next, actIndex, consumed);
			case 2: return new PrimitiveComponentDefinition_PrimitiveFormalArgumentsListAssignment_3(parent, next, actIndex, consumed);
			case 3: return new PrimitiveComponentDefinition_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=PrimitiveDefinitionElement
protected class PrimitiveComponentDefinition_ElementsAssignment_5_1_1 extends AssignmentToken  {
	
	public PrimitiveComponentDefinition_ElementsAssignment_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveComponentDefinitionAccess().getElementsAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveDefinitionElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveDefinitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveComponentDefinitionAccess().getElementsPrimitiveDefinitionElementParserRuleCall_5_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveComponentDefinition_ElementsAssignment_5_1_0(parent, next, actIndex, consumed);
			case 1: return new PrimitiveComponentDefinition_Group_5_1(parent, next, actIndex, consumed);
			case 2: return new PrimitiveComponentDefinition_ReferencesListAssignment_4(parent, next, actIndex, consumed);
			case 3: return new PrimitiveComponentDefinition_PrimitiveFormalArgumentsListAssignment_3(parent, next, actIndex, consumed);
			case 4: return new PrimitiveComponentDefinition_NameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule PrimitiveComponentDefinition ****************/


/************ begin Rule PrimitiveDefinitionElement ****************
 *
 * PrimitiveDefinitionElement:
 *   (InterfaceDefinition|AttributeDefinition|DataDefinition|ImplementationDefinition
 *   ) ";"?;
 *
 **/

// (InterfaceDefinition|AttributeDefinition|DataDefinition|ImplementationDefinition
// ) ";"?
protected class PrimitiveDefinitionElement_Group extends GroupToken {
	
	public PrimitiveDefinitionElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveDefinitionElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveDefinitionElement_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimitiveDefinitionElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InterfaceDefinition|AttributeDefinition|DataDefinition|ImplementationDefinition
protected class PrimitiveDefinitionElement_Alternatives_0 extends AlternativesToken {

	public PrimitiveDefinitionElement_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPrimitiveDefinitionElementAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveDefinitionElement_InterfaceDefinitionParserRuleCall_0_0(parent, this, 0, inst);
			case 1: return new PrimitiveDefinitionElement_AttributeDefinitionParserRuleCall_0_1(parent, this, 1, inst);
			case 2: return new PrimitiveDefinitionElement_DataDefinitionParserRuleCall_0_2(parent, this, 2, inst);
			case 3: return new PrimitiveDefinitionElement_ImplementationDefinitionParserRuleCall_0_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// InterfaceDefinition
protected class PrimitiveDefinitionElement_InterfaceDefinitionParserRuleCall_0_0 extends RuleCallToken {
	
	public PrimitiveDefinitionElement_InterfaceDefinitionParserRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimitiveDefinitionElementAccess().getInterfaceDefinitionParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InterfaceDefinition_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInterfaceDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AttributeDefinition
protected class PrimitiveDefinitionElement_AttributeDefinitionParserRuleCall_0_1 extends RuleCallToken {
	
	public PrimitiveDefinitionElement_AttributeDefinitionParserRuleCall_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimitiveDefinitionElementAccess().getAttributeDefinitionParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AttributeDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAttributeDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DataDefinition
protected class PrimitiveDefinitionElement_DataDefinitionParserRuleCall_0_2 extends RuleCallToken {
	
	public PrimitiveDefinitionElement_DataDefinitionParserRuleCall_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimitiveDefinitionElementAccess().getDataDefinitionParserRuleCall_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DataDefinition_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDataDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ImplementationDefinition
protected class PrimitiveDefinitionElement_ImplementationDefinitionParserRuleCall_0_3 extends RuleCallToken {
	
	public PrimitiveDefinitionElement_ImplementationDefinitionParserRuleCall_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPrimitiveDefinitionElementAccess().getImplementationDefinitionParserRuleCall_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ImplementationDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ImplementationDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getImplementationDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}



/************ end Rule PrimitiveDefinitionElement ****************/


/************ begin Rule ComponentTypeDefinition ****************
 *
 * ComponentTypeDefinition:
 *   "type" name=FQN referencesList=TypeReferencesList? ((elements+=AnnotationsList?
 *   elements+=TypeDefinitionElement)*|"{" (elements+=AnnotationsList? elements+=
 *   TypeDefinitionElement)* "}");
 *
 **/

// "type" name=FQN referencesList=TypeReferencesList? ((elements+=AnnotationsList?
// elements+=TypeDefinitionElement)*|"{" (elements+=AnnotationsList? elements+=
// TypeDefinitionElement)* "}")
protected class ComponentTypeDefinition_Group extends GroupToken {
	
	public ComponentTypeDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentTypeDefinition_Alternatives_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getComponentTypeDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "type"
protected class ComponentTypeDefinition_TypeKeyword_0 extends KeywordToken  {
	
	public ComponentTypeDefinition_TypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getTypeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=FQN
protected class ComponentTypeDefinition_NameAssignment_1 extends AssignmentToken  {
	
	public ComponentTypeDefinition_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentTypeDefinition_TypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getComponentTypeDefinitionAccess().getNameFQNParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// referencesList=TypeReferencesList?
protected class ComponentTypeDefinition_ReferencesListAssignment_2 extends AssignmentToken  {
	
	public ComponentTypeDefinition_ReferencesListAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getReferencesListAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeReferencesList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referencesList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referencesList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeReferencesListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponentTypeDefinitionAccess().getReferencesListTypeReferencesListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentTypeDefinition_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (elements+=AnnotationsList? elements+=TypeDefinitionElement)*|"{" (elements+=
// AnnotationsList? elements+=TypeDefinitionElement)* "}"
protected class ComponentTypeDefinition_Alternatives_3 extends AlternativesToken {

	public ComponentTypeDefinition_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentTypeDefinition_Group_3_0(parent, this, 0, inst);
			case 1: return new ComponentTypeDefinition_Group_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (elements+=AnnotationsList? elements+=TypeDefinitionElement)*
protected class ComponentTypeDefinition_Group_3_0 extends GroupToken {
	
	public ComponentTypeDefinition_Group_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getGroup_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentTypeDefinition_ElementsAssignment_3_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=AnnotationsList?
protected class ComponentTypeDefinition_ElementsAssignment_3_0_0 extends AssignmentToken  {
	
	public ComponentTypeDefinition_ElementsAssignment_3_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getElementsAssignment_3_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponentTypeDefinitionAccess().getElementsAnnotationsListParserRuleCall_3_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentTypeDefinition_Group_3_0(parent, next, actIndex, consumed);
			case 1: return new ComponentTypeDefinition_ReferencesListAssignment_2(parent, next, actIndex, consumed);
			case 2: return new ComponentTypeDefinition_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=TypeDefinitionElement
protected class ComponentTypeDefinition_ElementsAssignment_3_0_1 extends AssignmentToken  {
	
	public ComponentTypeDefinition_ElementsAssignment_3_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getElementsAssignment_3_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDefinitionElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeDefinitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponentTypeDefinitionAccess().getElementsTypeDefinitionElementParserRuleCall_3_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentTypeDefinition_ElementsAssignment_3_0_0(parent, next, actIndex, consumed);
			case 1: return new ComponentTypeDefinition_Group_3_0(parent, next, actIndex, consumed);
			case 2: return new ComponentTypeDefinition_ReferencesListAssignment_2(parent, next, actIndex, consumed);
			case 3: return new ComponentTypeDefinition_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "{" (elements+=AnnotationsList? elements+=TypeDefinitionElement)* "}"
protected class ComponentTypeDefinition_Group_3_1 extends GroupToken {
	
	public ComponentTypeDefinition_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentTypeDefinition_RightCurlyBracketKeyword_3_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class ComponentTypeDefinition_LeftCurlyBracketKeyword_3_1_0 extends KeywordToken  {
	
	public ComponentTypeDefinition_LeftCurlyBracketKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getLeftCurlyBracketKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentTypeDefinition_ReferencesListAssignment_2(parent, this, 0, inst);
			case 1: return new ComponentTypeDefinition_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// (elements+=AnnotationsList? elements+=TypeDefinitionElement)*
protected class ComponentTypeDefinition_Group_3_1_1 extends GroupToken {
	
	public ComponentTypeDefinition_Group_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getGroup_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentTypeDefinition_ElementsAssignment_3_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=AnnotationsList?
protected class ComponentTypeDefinition_ElementsAssignment_3_1_1_0 extends AssignmentToken  {
	
	public ComponentTypeDefinition_ElementsAssignment_3_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getElementsAssignment_3_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponentTypeDefinitionAccess().getElementsAnnotationsListParserRuleCall_3_1_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentTypeDefinition_Group_3_1_1(parent, next, actIndex, consumed);
			case 1: return new ComponentTypeDefinition_LeftCurlyBracketKeyword_3_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=TypeDefinitionElement
protected class ComponentTypeDefinition_ElementsAssignment_3_1_1_1 extends AssignmentToken  {
	
	public ComponentTypeDefinition_ElementsAssignment_3_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getElementsAssignment_3_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDefinitionElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeDefinitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponentTypeDefinitionAccess().getElementsTypeDefinitionElementParserRuleCall_3_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentTypeDefinition_ElementsAssignment_3_1_1_0(parent, next, actIndex, consumed);
			case 1: return new ComponentTypeDefinition_Group_3_1_1(parent, next, actIndex, consumed);
			case 2: return new ComponentTypeDefinition_LeftCurlyBracketKeyword_3_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class ComponentTypeDefinition_RightCurlyBracketKeyword_3_1_2 extends KeywordToken  {
	
	public ComponentTypeDefinition_RightCurlyBracketKeyword_3_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentTypeDefinitionAccess().getRightCurlyBracketKeyword_3_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentTypeDefinition_Group_3_1_1(parent, this, 0, inst);
			case 1: return new ComponentTypeDefinition_LeftCurlyBracketKeyword_3_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule ComponentTypeDefinition ****************/


/************ begin Rule TypeReferenceDefinition ****************
 *
 * TypeReferenceDefinition:
 *   referenceName=FQN;
 *
 **/

// referenceName=FQN
protected class TypeReferenceDefinition_ReferenceNameAssignment extends AssignmentToken  {
	
	public TypeReferenceDefinition_ReferenceNameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeReferenceDefinitionAccess().getReferenceNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeReferenceDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referenceName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referenceName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getTypeReferenceDefinitionAccess().getReferenceNameFQNParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule TypeReferenceDefinition ****************/


/************ begin Rule TypeDefinitionElement ****************
 *
 * TypeDefinitionElement:
 *   InterfaceDefinition|InterfaceDefinition ";";
 *
 **/

// InterfaceDefinition|InterfaceDefinition ";"
protected class TypeDefinitionElement_Alternatives extends AlternativesToken {

	public TypeDefinitionElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeDefinitionElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDefinitionElement_InterfaceDefinitionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new TypeDefinitionElement_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeDefinitionElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InterfaceDefinition
protected class TypeDefinitionElement_InterfaceDefinitionParserRuleCall_0 extends RuleCallToken {
	
	public TypeDefinitionElement_InterfaceDefinitionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeDefinitionElementAccess().getInterfaceDefinitionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InterfaceDefinition_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInterfaceDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// InterfaceDefinition ";"
protected class TypeDefinitionElement_Group_1 extends GroupToken {
	
	public TypeDefinitionElement_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeDefinitionElementAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDefinitionElement_SemicolonKeyword_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// InterfaceDefinition
protected class TypeDefinitionElement_InterfaceDefinitionParserRuleCall_1_0 extends RuleCallToken {
	
	public TypeDefinitionElement_InterfaceDefinitionParserRuleCall_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeDefinitionElementAccess().getInterfaceDefinitionParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InterfaceDefinition_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInterfaceDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ";"
protected class TypeDefinitionElement_SemicolonKeyword_1_1 extends KeywordToken  {
	
	public TypeDefinitionElement_SemicolonKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeDefinitionElementAccess().getSemicolonKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeDefinitionElement_InterfaceDefinitionParserRuleCall_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule TypeDefinitionElement ****************/


/************ begin Rule CompositeComponentDefinition ****************
 *
 * CompositeComponentDefinition:
 *   "composite" name=FQN templateSpecifiersList=TemplateSpecifiersList?
 *   compositeFormalArgumentsList=FormalArgumentsList? referencesList=
 *   CompositeReferencesList? ("{" (elements+=AnnotationsList? elements+=
 *   CompositeDefinitionElement)* "}"|(elements+=AnnotationsList? elements+=
 *   CompositeDefinitionElement)*);
 *
 **/

// "composite" name=FQN templateSpecifiersList=TemplateSpecifiersList?
// compositeFormalArgumentsList=FormalArgumentsList? referencesList=
// CompositeReferencesList? ("{" (elements+=AnnotationsList? elements+=
// CompositeDefinitionElement)* "}"|(elements+=AnnotationsList? elements+=
// CompositeDefinitionElement)*)
protected class CompositeComponentDefinition_Group extends GroupToken {
	
	public CompositeComponentDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeComponentDefinition_Alternatives_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompositeComponentDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "composite"
protected class CompositeComponentDefinition_CompositeKeyword_0 extends KeywordToken  {
	
	public CompositeComponentDefinition_CompositeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getCompositeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=FQN
protected class CompositeComponentDefinition_NameAssignment_1 extends AssignmentToken  {
	
	public CompositeComponentDefinition_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeComponentDefinition_CompositeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCompositeComponentDefinitionAccess().getNameFQNParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// templateSpecifiersList=TemplateSpecifiersList?
protected class CompositeComponentDefinition_TemplateSpecifiersListAssignment_2 extends AssignmentToken  {
	
	public CompositeComponentDefinition_TemplateSpecifiersListAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getTemplateSpecifiersListAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifiersList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("templateSpecifiersList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("templateSpecifiersList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTemplateSpecifiersListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeComponentDefinitionAccess().getTemplateSpecifiersListTemplateSpecifiersListParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeComponentDefinition_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// compositeFormalArgumentsList=FormalArgumentsList?
protected class CompositeComponentDefinition_CompositeFormalArgumentsListAssignment_3 extends AssignmentToken  {
	
	public CompositeComponentDefinition_CompositeFormalArgumentsListAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getCompositeFormalArgumentsListAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormalArgumentsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("compositeFormalArgumentsList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("compositeFormalArgumentsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalArgumentsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeComponentDefinitionAccess().getCompositeFormalArgumentsListFormalArgumentsListParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeComponentDefinition_TemplateSpecifiersListAssignment_2(parent, next, actIndex, consumed);
			case 1: return new CompositeComponentDefinition_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// referencesList=CompositeReferencesList?
protected class CompositeComponentDefinition_ReferencesListAssignment_4 extends AssignmentToken  {
	
	public CompositeComponentDefinition_ReferencesListAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getReferencesListAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferencesList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referencesList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referencesList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeReferencesListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeComponentDefinitionAccess().getReferencesListCompositeReferencesListParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeComponentDefinition_CompositeFormalArgumentsListAssignment_3(parent, next, actIndex, consumed);
			case 1: return new CompositeComponentDefinition_TemplateSpecifiersListAssignment_2(parent, next, actIndex, consumed);
			case 2: return new CompositeComponentDefinition_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{" (elements+=AnnotationsList? elements+=CompositeDefinitionElement)* "}"|(
// elements+=AnnotationsList? elements+=CompositeDefinitionElement)*
protected class CompositeComponentDefinition_Alternatives_5 extends AlternativesToken {

	public CompositeComponentDefinition_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeComponentDefinition_Group_5_0(parent, this, 0, inst);
			case 1: return new CompositeComponentDefinition_Group_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{" (elements+=AnnotationsList? elements+=CompositeDefinitionElement)* "}"
protected class CompositeComponentDefinition_Group_5_0 extends GroupToken {
	
	public CompositeComponentDefinition_Group_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeComponentDefinition_RightCurlyBracketKeyword_5_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class CompositeComponentDefinition_LeftCurlyBracketKeyword_5_0_0 extends KeywordToken  {
	
	public CompositeComponentDefinition_LeftCurlyBracketKeyword_5_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getLeftCurlyBracketKeyword_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeComponentDefinition_ReferencesListAssignment_4(parent, this, 0, inst);
			case 1: return new CompositeComponentDefinition_CompositeFormalArgumentsListAssignment_3(parent, this, 1, inst);
			case 2: return new CompositeComponentDefinition_TemplateSpecifiersListAssignment_2(parent, this, 2, inst);
			case 3: return new CompositeComponentDefinition_NameAssignment_1(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// (elements+=AnnotationsList? elements+=CompositeDefinitionElement)*
protected class CompositeComponentDefinition_Group_5_0_1 extends GroupToken {
	
	public CompositeComponentDefinition_Group_5_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getGroup_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeComponentDefinition_ElementsAssignment_5_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=AnnotationsList?
protected class CompositeComponentDefinition_ElementsAssignment_5_0_1_0 extends AssignmentToken  {
	
	public CompositeComponentDefinition_ElementsAssignment_5_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getElementsAssignment_5_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeComponentDefinitionAccess().getElementsAnnotationsListParserRuleCall_5_0_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeComponentDefinition_Group_5_0_1(parent, next, actIndex, consumed);
			case 1: return new CompositeComponentDefinition_LeftCurlyBracketKeyword_5_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=CompositeDefinitionElement
protected class CompositeComponentDefinition_ElementsAssignment_5_0_1_1 extends AssignmentToken  {
	
	public CompositeComponentDefinition_ElementsAssignment_5_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getElementsAssignment_5_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeDefinitionElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeDefinitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeComponentDefinitionAccess().getElementsCompositeDefinitionElementParserRuleCall_5_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeComponentDefinition_ElementsAssignment_5_0_1_0(parent, next, actIndex, consumed);
			case 1: return new CompositeComponentDefinition_Group_5_0_1(parent, next, actIndex, consumed);
			case 2: return new CompositeComponentDefinition_LeftCurlyBracketKeyword_5_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class CompositeComponentDefinition_RightCurlyBracketKeyword_5_0_2 extends KeywordToken  {
	
	public CompositeComponentDefinition_RightCurlyBracketKeyword_5_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getRightCurlyBracketKeyword_5_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeComponentDefinition_Group_5_0_1(parent, this, 0, inst);
			case 1: return new CompositeComponentDefinition_LeftCurlyBracketKeyword_5_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// (elements+=AnnotationsList? elements+=CompositeDefinitionElement)*
protected class CompositeComponentDefinition_Group_5_1 extends GroupToken {
	
	public CompositeComponentDefinition_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeComponentDefinition_ElementsAssignment_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=AnnotationsList?
protected class CompositeComponentDefinition_ElementsAssignment_5_1_0 extends AssignmentToken  {
	
	public CompositeComponentDefinition_ElementsAssignment_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getElementsAssignment_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeComponentDefinitionAccess().getElementsAnnotationsListParserRuleCall_5_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeComponentDefinition_Group_5_1(parent, next, actIndex, consumed);
			case 1: return new CompositeComponentDefinition_ReferencesListAssignment_4(parent, next, actIndex, consumed);
			case 2: return new CompositeComponentDefinition_CompositeFormalArgumentsListAssignment_3(parent, next, actIndex, consumed);
			case 3: return new CompositeComponentDefinition_TemplateSpecifiersListAssignment_2(parent, next, actIndex, consumed);
			case 4: return new CompositeComponentDefinition_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=CompositeDefinitionElement
protected class CompositeComponentDefinition_ElementsAssignment_5_1_1 extends AssignmentToken  {
	
	public CompositeComponentDefinition_ElementsAssignment_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeComponentDefinitionAccess().getElementsAssignment_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeDefinitionElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeDefinitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeComponentDefinitionAccess().getElementsCompositeDefinitionElementParserRuleCall_5_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeComponentDefinition_ElementsAssignment_5_1_0(parent, next, actIndex, consumed);
			case 1: return new CompositeComponentDefinition_Group_5_1(parent, next, actIndex, consumed);
			case 2: return new CompositeComponentDefinition_ReferencesListAssignment_4(parent, next, actIndex, consumed);
			case 3: return new CompositeComponentDefinition_CompositeFormalArgumentsListAssignment_3(parent, next, actIndex, consumed);
			case 4: return new CompositeComponentDefinition_TemplateSpecifiersListAssignment_2(parent, next, actIndex, consumed);
			case 5: return new CompositeComponentDefinition_NameAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule CompositeComponentDefinition ****************/


/************ begin Rule TemplateSpecifiersList ****************
 *
 * TemplateSpecifiersList:
 *   "<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=
 *   TemplateSpecifier)*) ">";
 *
 **/

// "<" (templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=
// TemplateSpecifier)*) ">"
protected class TemplateSpecifiersList_Group extends GroupToken {
	
	public TemplateSpecifiersList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateSpecifiersListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifiersList_GreaterThanSignKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTemplateSpecifiersListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "<"
protected class TemplateSpecifiersList_LessThanSignKeyword_0 extends KeywordToken  {
	
	public TemplateSpecifiersList_LessThanSignKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateSpecifiersListAccess().getLessThanSignKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// templateSpecifiers+=TemplateSpecifier ("," templateSpecifiers+=TemplateSpecifier)*
protected class TemplateSpecifiersList_Group_1 extends GroupToken {
	
	public TemplateSpecifiersList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateSpecifiersListAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifiersList_Group_1_1(parent, this, 0, inst);
			case 1: return new TemplateSpecifiersList_TemplateSpecifiersAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// templateSpecifiers+=TemplateSpecifier
protected class TemplateSpecifiersList_TemplateSpecifiersAssignment_1_0 extends AssignmentToken  {
	
	public TemplateSpecifiersList_TemplateSpecifiersAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateSpecifiersListAccess().getTemplateSpecifiersAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("templateSpecifiers",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("templateSpecifiers");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTemplateSpecifierRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTemplateSpecifiersListAccess().getTemplateSpecifiersTemplateSpecifierParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateSpecifiersList_LessThanSignKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," templateSpecifiers+=TemplateSpecifier)*
protected class TemplateSpecifiersList_Group_1_1 extends GroupToken {
	
	public TemplateSpecifiersList_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateSpecifiersListAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifiersList_TemplateSpecifiersAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class TemplateSpecifiersList_CommaKeyword_1_1_0 extends KeywordToken  {
	
	public TemplateSpecifiersList_CommaKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateSpecifiersListAccess().getCommaKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifiersList_Group_1_1(parent, this, 0, inst);
			case 1: return new TemplateSpecifiersList_TemplateSpecifiersAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// templateSpecifiers+=TemplateSpecifier
protected class TemplateSpecifiersList_TemplateSpecifiersAssignment_1_1_1 extends AssignmentToken  {
	
	public TemplateSpecifiersList_TemplateSpecifiersAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateSpecifiersListAccess().getTemplateSpecifiersAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifier_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("templateSpecifiers",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("templateSpecifiers");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTemplateSpecifierRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTemplateSpecifiersListAccess().getTemplateSpecifiersTemplateSpecifierParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TemplateSpecifiersList_CommaKeyword_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ">"
protected class TemplateSpecifiersList_GreaterThanSignKeyword_2 extends KeywordToken  {
	
	public TemplateSpecifiersList_GreaterThanSignKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateSpecifiersListAccess().getGreaterThanSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifiersList_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule TemplateSpecifiersList ****************/


/************ begin Rule FormalArgumentsList ****************
 *
 * FormalArgumentsList:
 *   "(" (formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*) ")";
 *
 **/

// "(" (formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*) ")"
protected class FormalArgumentsList_Group extends GroupToken {
	
	public FormalArgumentsList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFormalArgumentsListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormalArgumentsList_RightParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFormalArgumentsListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "("
protected class FormalArgumentsList_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public FormalArgumentsList_LeftParenthesisKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFormalArgumentsListAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// formalArguments+=FormalArgument ("," formalArguments+=FormalArgument)*
protected class FormalArgumentsList_Group_1 extends GroupToken {
	
	public FormalArgumentsList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFormalArgumentsListAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormalArgumentsList_Group_1_1(parent, this, 0, inst);
			case 1: return new FormalArgumentsList_FormalArgumentsAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// formalArguments+=FormalArgument
protected class FormalArgumentsList_FormalArgumentsAssignment_1_0 extends AssignmentToken  {
	
	public FormalArgumentsList_FormalArgumentsAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFormalArgumentsListAccess().getFormalArgumentsAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormalArgument_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("formalArguments",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("formalArguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormalArgumentsListAccess().getFormalArgumentsFormalArgumentParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormalArgumentsList_LeftParenthesisKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," formalArguments+=FormalArgument)*
protected class FormalArgumentsList_Group_1_1 extends GroupToken {
	
	public FormalArgumentsList_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFormalArgumentsListAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormalArgumentsList_FormalArgumentsAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class FormalArgumentsList_CommaKeyword_1_1_0 extends KeywordToken  {
	
	public FormalArgumentsList_CommaKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFormalArgumentsListAccess().getCommaKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormalArgumentsList_Group_1_1(parent, this, 0, inst);
			case 1: return new FormalArgumentsList_FormalArgumentsAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// formalArguments+=FormalArgument
protected class FormalArgumentsList_FormalArgumentsAssignment_1_1_1 extends AssignmentToken  {
	
	public FormalArgumentsList_FormalArgumentsAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFormalArgumentsListAccess().getFormalArgumentsAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormalArgument_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("formalArguments",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("formalArguments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormalArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFormalArgumentsListAccess().getFormalArgumentsFormalArgumentParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FormalArgumentsList_CommaKeyword_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class FormalArgumentsList_RightParenthesisKeyword_2 extends KeywordToken  {
	
	public FormalArgumentsList_RightParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFormalArgumentsListAccess().getRightParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FormalArgumentsList_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FormalArgumentsList ****************/


/************ begin Rule PrimitiveReferencesList ****************
 *
 * PrimitiveReferencesList:
 *   "extends" references+=PrimitiveReferenceDefinition ("," references+=
 *   PrimitiveReferenceDefinition)*;
 *
 **/

// "extends" references+=PrimitiveReferenceDefinition ("," references+=
// PrimitiveReferenceDefinition)*
protected class PrimitiveReferencesList_Group extends GroupToken {
	
	public PrimitiveReferencesList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveReferencesListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferencesList_Group_2(parent, this, 0, inst);
			case 1: return new PrimitiveReferencesList_ReferencesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimitiveReferencesListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "extends"
protected class PrimitiveReferencesList_ExtendsKeyword_0 extends KeywordToken  {
	
	public PrimitiveReferencesList_ExtendsKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveReferencesListAccess().getExtendsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// references+=PrimitiveReferenceDefinition
protected class PrimitiveReferencesList_ReferencesAssignment_1 extends AssignmentToken  {
	
	public PrimitiveReferencesList_ReferencesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveReferencesListAccess().getReferencesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveReferencesListAccess().getReferencesPrimitiveReferenceDefinitionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveReferencesList_ExtendsKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," references+=PrimitiveReferenceDefinition)*
protected class PrimitiveReferencesList_Group_2 extends GroupToken {
	
	public PrimitiveReferencesList_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveReferencesListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferencesList_ReferencesAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class PrimitiveReferencesList_CommaKeyword_2_0 extends KeywordToken  {
	
	public PrimitiveReferencesList_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveReferencesListAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferencesList_Group_2(parent, this, 0, inst);
			case 1: return new PrimitiveReferencesList_ReferencesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// references+=PrimitiveReferenceDefinition
protected class PrimitiveReferencesList_ReferencesAssignment_2_1 extends AssignmentToken  {
	
	public PrimitiveReferencesList_ReferencesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveReferencesListAccess().getReferencesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveReferencesListAccess().getReferencesPrimitiveReferenceDefinitionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveReferencesList_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PrimitiveReferencesList ****************/


/************ begin Rule CompositeReferencesList ****************
 *
 * CompositeReferencesList:
 *   "extends" references+=CompositeReferenceDefinition ("," references+=
 *   CompositeReferenceDefinition)*;
 *
 **/

// "extends" references+=CompositeReferenceDefinition ("," references+=
// CompositeReferenceDefinition)*
protected class CompositeReferencesList_Group extends GroupToken {
	
	public CompositeReferencesList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeReferencesListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferencesList_Group_2(parent, this, 0, inst);
			case 1: return new CompositeReferencesList_ReferencesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompositeReferencesListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "extends"
protected class CompositeReferencesList_ExtendsKeyword_0 extends KeywordToken  {
	
	public CompositeReferencesList_ExtendsKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeReferencesListAccess().getExtendsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// references+=CompositeReferenceDefinition
protected class CompositeReferencesList_ReferencesAssignment_1 extends AssignmentToken  {
	
	public CompositeReferencesList_ReferencesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeReferencesListAccess().getReferencesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeReferencesListAccess().getReferencesCompositeReferenceDefinitionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeReferencesList_ExtendsKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," references+=CompositeReferenceDefinition)*
protected class CompositeReferencesList_Group_2 extends GroupToken {
	
	public CompositeReferencesList_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeReferencesListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferencesList_ReferencesAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class CompositeReferencesList_CommaKeyword_2_0 extends KeywordToken  {
	
	public CompositeReferencesList_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeReferencesListAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferencesList_Group_2(parent, this, 0, inst);
			case 1: return new CompositeReferencesList_ReferencesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// references+=CompositeReferenceDefinition
protected class CompositeReferencesList_ReferencesAssignment_2_1 extends AssignmentToken  {
	
	public CompositeReferencesList_ReferencesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeReferencesListAccess().getReferencesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeReferencesListAccess().getReferencesCompositeReferenceDefinitionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeReferencesList_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule CompositeReferencesList ****************/


/************ begin Rule TypeReferencesList ****************
 *
 * TypeReferencesList:
 *   "extends" references+=TypeReferenceDefinition ("," references+=
 *   TypeReferenceDefinition)*;
 *
 **/

// "extends" references+=TypeReferenceDefinition ("," references+=
// TypeReferenceDefinition)*
protected class TypeReferencesList_Group extends GroupToken {
	
	public TypeReferencesList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeReferencesListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeReferencesList_Group_2(parent, this, 0, inst);
			case 1: return new TypeReferencesList_ReferencesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeReferencesListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "extends"
protected class TypeReferencesList_ExtendsKeyword_0 extends KeywordToken  {
	
	public TypeReferencesList_ExtendsKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeReferencesListAccess().getExtendsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// references+=TypeReferenceDefinition
protected class TypeReferencesList_ReferencesAssignment_1 extends AssignmentToken  {
	
	public TypeReferencesList_ReferencesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeReferencesListAccess().getReferencesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeReferenceDefinition_ReferenceNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeReferencesListAccess().getReferencesTypeReferenceDefinitionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeReferencesList_ExtendsKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," references+=TypeReferenceDefinition)*
protected class TypeReferencesList_Group_2 extends GroupToken {
	
	public TypeReferencesList_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeReferencesListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeReferencesList_ReferencesAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class TypeReferencesList_CommaKeyword_2_0 extends KeywordToken  {
	
	public TypeReferencesList_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTypeReferencesListAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeReferencesList_Group_2(parent, this, 0, inst);
			case 1: return new TypeReferencesList_ReferencesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// references+=TypeReferenceDefinition
protected class TypeReferencesList_ReferencesAssignment_2_1 extends AssignmentToken  {
	
	public TypeReferencesList_ReferencesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeReferencesListAccess().getReferencesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeReferenceDefinition_ReferenceNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("references",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("references");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getTypeReferencesListAccess().getReferencesTypeReferenceDefinitionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TypeReferencesList_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule TypeReferencesList ****************/


/************ begin Rule FormalArgument ****************
 *
 * FormalArgument:
 *   name=ID;
 *
 **/

// name=ID
protected class FormalArgument_NameAssignment extends AssignmentToken  {
	
	public FormalArgument_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFormalArgumentAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFormalArgumentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFormalArgumentAccess().getNameIDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule FormalArgument ****************/


/************ begin Rule CompositeDefinitionElement ****************
 *
 * CompositeDefinitionElement:
 *   (SubComponentDefinition|CompositeAnonymousSubComponent|InterfaceDefinition|
 *   BindingDefinition) ";"?;
 *
 **/

// (SubComponentDefinition|CompositeAnonymousSubComponent|InterfaceDefinition|
// BindingDefinition) ";"?
protected class CompositeDefinitionElement_Group extends GroupToken {
	
	public CompositeDefinitionElement_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeDefinitionElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeDefinitionElement_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompositeDefinitionElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SubComponentDefinition|CompositeAnonymousSubComponent|InterfaceDefinition|
// BindingDefinition
protected class CompositeDefinitionElement_Alternatives_0 extends AlternativesToken {

	public CompositeDefinitionElement_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompositeDefinitionElementAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeDefinitionElement_SubComponentDefinitionParserRuleCall_0_0(parent, this, 0, inst);
			case 1: return new CompositeDefinitionElement_CompositeAnonymousSubComponentParserRuleCall_0_1(parent, this, 1, inst);
			case 2: return new CompositeDefinitionElement_InterfaceDefinitionParserRuleCall_0_2(parent, this, 2, inst);
			case 3: return new CompositeDefinitionElement_BindingDefinitionParserRuleCall_0_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// SubComponentDefinition
protected class CompositeDefinitionElement_SubComponentDefinitionParserRuleCall_0_0 extends RuleCallToken {
	
	public CompositeDefinitionElement_SubComponentDefinitionParserRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompositeDefinitionElementAccess().getSubComponentDefinitionParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubComponentDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SubComponentDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSubComponentDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CompositeAnonymousSubComponent
protected class CompositeDefinitionElement_CompositeAnonymousSubComponentParserRuleCall_0_1 extends RuleCallToken {
	
	public CompositeDefinitionElement_CompositeAnonymousSubComponentParserRuleCall_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompositeDefinitionElementAccess().getCompositeAnonymousSubComponentParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompositeAnonymousSubComponent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompositeAnonymousSubComponentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// InterfaceDefinition
protected class CompositeDefinitionElement_InterfaceDefinitionParserRuleCall_0_2 extends RuleCallToken {
	
	public CompositeDefinitionElement_InterfaceDefinitionParserRuleCall_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompositeDefinitionElementAccess().getInterfaceDefinitionParserRuleCall_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InterfaceDefinition_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInterfaceDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BindingDefinition
protected class CompositeDefinitionElement_BindingDefinitionParserRuleCall_0_3 extends RuleCallToken {
	
	public CompositeDefinitionElement_BindingDefinitionParserRuleCall_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompositeDefinitionElementAccess().getBindingDefinitionParserRuleCall_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BindingDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBindingDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}



/************ end Rule CompositeDefinitionElement ****************/


/************ begin Rule SubComponentDefinition ****************
 *
 * SubComponentDefinition:
 *   "contains" (CompositeSubComponent|CompositeAnonymousSubComponent|
 *   PrimitiveSubComponent|PrimitiveAnonymousSubComponent|TemplateSubComponent);
 *
 **/

// "contains" (CompositeSubComponent|CompositeAnonymousSubComponent|
// PrimitiveSubComponent|PrimitiveAnonymousSubComponent|TemplateSubComponent)
protected class SubComponentDefinition_Group extends GroupToken {
	
	public SubComponentDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSubComponentDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubComponentDefinition_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSubComponentDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "contains"
protected class SubComponentDefinition_ContainsKeyword_0 extends KeywordToken  {
	
	public SubComponentDefinition_ContainsKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSubComponentDefinitionAccess().getContainsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// CompositeSubComponent|CompositeAnonymousSubComponent|PrimitiveSubComponent|
// PrimitiveAnonymousSubComponent|TemplateSubComponent
protected class SubComponentDefinition_Alternatives_1 extends AlternativesToken {

	public SubComponentDefinition_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSubComponentDefinitionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubComponentDefinition_CompositeSubComponentParserRuleCall_1_0(parent, this, 0, inst);
			case 1: return new SubComponentDefinition_CompositeAnonymousSubComponentParserRuleCall_1_1(parent, this, 1, inst);
			case 2: return new SubComponentDefinition_PrimitiveSubComponentParserRuleCall_1_2(parent, this, 2, inst);
			case 3: return new SubComponentDefinition_PrimitiveAnonymousSubComponentParserRuleCall_1_3(parent, this, 3, inst);
			case 4: return new SubComponentDefinition_TemplateSubComponentParserRuleCall_1_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}

// CompositeSubComponent
protected class SubComponentDefinition_CompositeSubComponentParserRuleCall_1_0 extends RuleCallToken {
	
	public SubComponentDefinition_CompositeSubComponentParserRuleCall_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubComponentDefinitionAccess().getCompositeSubComponentParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeSubComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompositeSubComponent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompositeSubComponentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubComponentDefinition_ContainsKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// CompositeAnonymousSubComponent
protected class SubComponentDefinition_CompositeAnonymousSubComponentParserRuleCall_1_1 extends RuleCallToken {
	
	public SubComponentDefinition_CompositeAnonymousSubComponentParserRuleCall_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubComponentDefinitionAccess().getCompositeAnonymousSubComponentParserRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompositeAnonymousSubComponent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompositeAnonymousSubComponentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubComponentDefinition_ContainsKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// PrimitiveSubComponent
protected class SubComponentDefinition_PrimitiveSubComponentParserRuleCall_1_2 extends RuleCallToken {
	
	public SubComponentDefinition_PrimitiveSubComponentParserRuleCall_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubComponentDefinitionAccess().getPrimitiveSubComponentParserRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveSubComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PrimitiveSubComponent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPrimitiveSubComponentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubComponentDefinition_ContainsKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// PrimitiveAnonymousSubComponent
protected class SubComponentDefinition_PrimitiveAnonymousSubComponentParserRuleCall_1_3 extends RuleCallToken {
	
	public SubComponentDefinition_PrimitiveAnonymousSubComponentParserRuleCall_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubComponentDefinitionAccess().getPrimitiveAnonymousSubComponentParserRuleCall_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PrimitiveAnonymousSubComponent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPrimitiveAnonymousSubComponentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubComponentDefinition_ContainsKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// TemplateSubComponent
protected class SubComponentDefinition_TemplateSubComponentParserRuleCall_1_4 extends RuleCallToken {
	
	public SubComponentDefinition_TemplateSubComponentParserRuleCall_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSubComponentDefinitionAccess().getTemplateSubComponentParserRuleCall_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSubComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TemplateSubComponent_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTemplateSubComponentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SubComponentDefinition_ContainsKeyword_0(parent, next, actIndex, inst);
			default: return null;
		}	
	}	
}



/************ end Rule SubComponentDefinition ****************/


/************ begin Rule ComponentReference ****************
 *
 * ComponentReference:
 *   CompositeReferenceDefinition|PrimitiveReferenceDefinition|
 *   TypeReferenceDefinition;
 *
 **/

// CompositeReferenceDefinition|PrimitiveReferenceDefinition|
// TypeReferenceDefinition
protected class ComponentReference_Alternatives extends AlternativesToken {

	public ComponentReference_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getComponentReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentReference_CompositeReferenceDefinitionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ComponentReference_PrimitiveReferenceDefinitionParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ComponentReference_TypeReferenceDefinitionParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getComponentReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// CompositeReferenceDefinition
protected class ComponentReference_CompositeReferenceDefinitionParserRuleCall_0 extends RuleCallToken {
	
	public ComponentReference_CompositeReferenceDefinitionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentReferenceAccess().getCompositeReferenceDefinitionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CompositeReferenceDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCompositeReferenceDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PrimitiveReferenceDefinition
protected class ComponentReference_PrimitiveReferenceDefinitionParserRuleCall_1 extends RuleCallToken {
	
	public ComponentReference_PrimitiveReferenceDefinitionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentReferenceAccess().getPrimitiveReferenceDefinitionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PrimitiveReferenceDefinition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPrimitiveReferenceDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// TypeReferenceDefinition
protected class ComponentReference_TypeReferenceDefinitionParserRuleCall_2 extends RuleCallToken {
	
	public ComponentReference_TypeReferenceDefinitionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComponentReferenceAccess().getTypeReferenceDefinitionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TypeReferenceDefinition_ReferenceNameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(TypeReferenceDefinition_ReferenceNameAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getTypeReferenceDefinitionRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ComponentReference ****************/


/************ begin Rule CompositeReferenceDefinition ****************
 *
 * CompositeReferenceDefinition:
 *   referenceName=FQN ("<" templatesList+=TemplateDefinition ("," templatesList+=
 *   TemplateDefinition)* ">")? ("(" argumentsList+=ArgumentDefinition ("," argumentsList
 *   +=ArgumentDefinition)* ")")?;
 *
 **/

// referenceName=FQN ("<" templatesList+=TemplateDefinition ("," templatesList+=
// TemplateDefinition)* ">")? ("(" argumentsList+=ArgumentDefinition ("," argumentsList
// +=ArgumentDefinition)* ")")?
protected class CompositeReferenceDefinition_Group extends GroupToken {
	
	public CompositeReferenceDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group_2(parent, this, 0, inst);
			case 1: return new CompositeReferenceDefinition_Group_1(parent, this, 1, inst);
			case 2: return new CompositeReferenceDefinition_ReferenceNameAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompositeReferenceDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// referenceName=FQN
protected class CompositeReferenceDefinition_ReferenceNameAssignment_0 extends AssignmentToken  {
	
	public CompositeReferenceDefinition_ReferenceNameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getReferenceNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referenceName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referenceName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCompositeReferenceDefinitionAccess().getReferenceNameFQNParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("<" templatesList+=TemplateDefinition ("," templatesList+=TemplateDefinition)* ">")
// ?
protected class CompositeReferenceDefinition_Group_1 extends GroupToken {
	
	public CompositeReferenceDefinition_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_GreaterThanSignKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "<"
protected class CompositeReferenceDefinition_LessThanSignKeyword_1_0 extends KeywordToken  {
	
	public CompositeReferenceDefinition_LessThanSignKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getLessThanSignKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_ReferenceNameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// templatesList+=TemplateDefinition
protected class CompositeReferenceDefinition_TemplatesListAssignment_1_1 extends AssignmentToken  {
	
	public CompositeReferenceDefinition_TemplatesListAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getTemplatesListAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("templatesList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("templatesList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTemplateDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeReferenceDefinitionAccess().getTemplatesListTemplateDefinitionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeReferenceDefinition_LessThanSignKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," templatesList+=TemplateDefinition)*
protected class CompositeReferenceDefinition_Group_1_2 extends GroupToken {
	
	public CompositeReferenceDefinition_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_TemplatesListAssignment_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class CompositeReferenceDefinition_CommaKeyword_1_2_0 extends KeywordToken  {
	
	public CompositeReferenceDefinition_CommaKeyword_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getCommaKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group_1_2(parent, this, 0, inst);
			case 1: return new CompositeReferenceDefinition_TemplatesListAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// templatesList+=TemplateDefinition
protected class CompositeReferenceDefinition_TemplatesListAssignment_1_2_1 extends AssignmentToken  {
	
	public CompositeReferenceDefinition_TemplatesListAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getTemplatesListAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("templatesList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("templatesList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTemplateDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeReferenceDefinitionAccess().getTemplatesListTemplateDefinitionParserRuleCall_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeReferenceDefinition_CommaKeyword_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ">"
protected class CompositeReferenceDefinition_GreaterThanSignKeyword_1_3 extends KeywordToken  {
	
	public CompositeReferenceDefinition_GreaterThanSignKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getGreaterThanSignKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group_1_2(parent, this, 0, inst);
			case 1: return new CompositeReferenceDefinition_TemplatesListAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")
// ?
protected class CompositeReferenceDefinition_Group_2 extends GroupToken {
	
	public CompositeReferenceDefinition_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_RightParenthesisKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class CompositeReferenceDefinition_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public CompositeReferenceDefinition_LeftParenthesisKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group_1(parent, this, 0, inst);
			case 1: return new CompositeReferenceDefinition_ReferenceNameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// argumentsList+=ArgumentDefinition
protected class CompositeReferenceDefinition_ArgumentsListAssignment_2_1 extends AssignmentToken  {
	
	public CompositeReferenceDefinition_ArgumentsListAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getArgumentsListAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArgumentDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("argumentsList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("argumentsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeReferenceDefinitionAccess().getArgumentsListArgumentDefinitionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeReferenceDefinition_LeftParenthesisKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," argumentsList+=ArgumentDefinition)*
protected class CompositeReferenceDefinition_Group_2_2 extends GroupToken {
	
	public CompositeReferenceDefinition_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_ArgumentsListAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class CompositeReferenceDefinition_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public CompositeReferenceDefinition_CommaKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getCommaKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group_2_2(parent, this, 0, inst);
			case 1: return new CompositeReferenceDefinition_ArgumentsListAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// argumentsList+=ArgumentDefinition
protected class CompositeReferenceDefinition_ArgumentsListAssignment_2_2_1 extends AssignmentToken  {
	
	public CompositeReferenceDefinition_ArgumentsListAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getArgumentsListAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArgumentDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("argumentsList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("argumentsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeReferenceDefinitionAccess().getArgumentsListArgumentDefinitionParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeReferenceDefinition_CommaKeyword_2_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class CompositeReferenceDefinition_RightParenthesisKeyword_2_3 extends KeywordToken  {
	
	public CompositeReferenceDefinition_RightParenthesisKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeReferenceDefinitionAccess().getRightParenthesisKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group_2_2(parent, this, 0, inst);
			case 1: return new CompositeReferenceDefinition_ArgumentsListAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule CompositeReferenceDefinition ****************/


/************ begin Rule CompositeSubComponent ****************
 *
 * CompositeSubComponent:
 *   "composite" referenceDefinition=CompositeReferenceDefinition "as" name=ID;
 *
 **/

// "composite" referenceDefinition=CompositeReferenceDefinition "as" name=ID
protected class CompositeSubComponent_Group extends GroupToken {
	
	public CompositeSubComponent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeSubComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeSubComponent_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompositeSubComponentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "composite"
protected class CompositeSubComponent_CompositeKeyword_0 extends KeywordToken  {
	
	public CompositeSubComponent_CompositeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeSubComponentAccess().getCompositeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// referenceDefinition=CompositeReferenceDefinition
protected class CompositeSubComponent_ReferenceDefinitionAssignment_1 extends AssignmentToken  {
	
	public CompositeSubComponent_ReferenceDefinitionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeSubComponentAccess().getReferenceDefinitionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referenceDefinition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referenceDefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeSubComponentAccess().getReferenceDefinitionCompositeReferenceDefinitionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeSubComponent_CompositeKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "as"
protected class CompositeSubComponent_AsKeyword_2 extends KeywordToken  {
	
	public CompositeSubComponent_AsKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeSubComponentAccess().getAsKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeSubComponent_ReferenceDefinitionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class CompositeSubComponent_NameAssignment_3 extends AssignmentToken  {
	
	public CompositeSubComponent_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeSubComponentAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeSubComponent_AsKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCompositeSubComponentAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule CompositeSubComponent ****************/


/************ begin Rule CompositeAnonymousSubComponent ****************
 *
 * CompositeAnonymousSubComponent:
 *   "composite" referenceDefinition=CompositeReferenceDefinition? "as" name=ID "{" (
 *   elements+=AnnotationsList? elements+=CompositeDefinitionElement)* "}";
 *
 **/

// "composite" referenceDefinition=CompositeReferenceDefinition? "as" name=ID "{" (
// elements+=AnnotationsList? elements+=CompositeDefinitionElement)* "}"
protected class CompositeAnonymousSubComponent_Group extends GroupToken {
	
	public CompositeAnonymousSubComponent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompositeAnonymousSubComponentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "composite"
protected class CompositeAnonymousSubComponent_CompositeKeyword_0 extends KeywordToken  {
	
	public CompositeAnonymousSubComponent_CompositeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getCompositeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// referenceDefinition=CompositeReferenceDefinition?
protected class CompositeAnonymousSubComponent_ReferenceDefinitionAssignment_1 extends AssignmentToken  {
	
	public CompositeAnonymousSubComponent_ReferenceDefinitionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getReferenceDefinitionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referenceDefinition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referenceDefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeAnonymousSubComponentAccess().getReferenceDefinitionCompositeReferenceDefinitionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_CompositeKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "as"
protected class CompositeAnonymousSubComponent_AsKeyword_2 extends KeywordToken  {
	
	public CompositeAnonymousSubComponent_AsKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getAsKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_ReferenceDefinitionAssignment_1(parent, this, 0, inst);
			case 1: return new CompositeAnonymousSubComponent_CompositeKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class CompositeAnonymousSubComponent_NameAssignment_3 extends AssignmentToken  {
	
	public CompositeAnonymousSubComponent_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_AsKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCompositeAnonymousSubComponentAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class CompositeAnonymousSubComponent_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public CompositeAnonymousSubComponent_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (elements+=AnnotationsList? elements+=CompositeDefinitionElement)*
protected class CompositeAnonymousSubComponent_Group_5 extends GroupToken {
	
	public CompositeAnonymousSubComponent_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_ElementsAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=AnnotationsList?
protected class CompositeAnonymousSubComponent_ElementsAssignment_5_0 extends AssignmentToken  {
	
	public CompositeAnonymousSubComponent_ElementsAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getElementsAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeAnonymousSubComponentAccess().getElementsAnnotationsListParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_Group_5(parent, next, actIndex, consumed);
			case 1: return new CompositeAnonymousSubComponent_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=CompositeDefinitionElement
protected class CompositeAnonymousSubComponent_ElementsAssignment_5_1 extends AssignmentToken  {
	
	public CompositeAnonymousSubComponent_ElementsAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getElementsAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeDefinitionElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCompositeDefinitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCompositeAnonymousSubComponentAccess().getElementsCompositeDefinitionElementParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_ElementsAssignment_5_0(parent, next, actIndex, consumed);
			case 1: return new CompositeAnonymousSubComponent_Group_5(parent, next, actIndex, consumed);
			case 2: return new CompositeAnonymousSubComponent_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class CompositeAnonymousSubComponent_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public CompositeAnonymousSubComponent_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCompositeAnonymousSubComponentAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CompositeAnonymousSubComponent_Group_5(parent, this, 0, inst);
			case 1: return new CompositeAnonymousSubComponent_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CompositeAnonymousSubComponent ****************/


/************ begin Rule PrimitiveReferenceDefinition ****************
 *
 * PrimitiveReferenceDefinition:
 *   referenceName=FQN ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=
 *   ArgumentDefinition)* ")")?;
 *
 **/

// referenceName=FQN ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=
// ArgumentDefinition)* ")")?
protected class PrimitiveReferenceDefinition_Group extends GroupToken {
	
	public PrimitiveReferenceDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveReferenceDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_Group_1(parent, this, 0, inst);
			case 1: return new PrimitiveReferenceDefinition_ReferenceNameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimitiveReferenceDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// referenceName=FQN
protected class PrimitiveReferenceDefinition_ReferenceNameAssignment_0 extends AssignmentToken  {
	
	public PrimitiveReferenceDefinition_ReferenceNameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveReferenceDefinitionAccess().getReferenceNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referenceName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referenceName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPrimitiveReferenceDefinitionAccess().getReferenceNameFQNParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("(" argumentsList+=ArgumentDefinition ("," argumentsList+=ArgumentDefinition)* ")")
// ?
protected class PrimitiveReferenceDefinition_Group_1 extends GroupToken {
	
	public PrimitiveReferenceDefinition_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveReferenceDefinitionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_RightParenthesisKeyword_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class PrimitiveReferenceDefinition_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public PrimitiveReferenceDefinition_LeftParenthesisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveReferenceDefinitionAccess().getLeftParenthesisKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_ReferenceNameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// argumentsList+=ArgumentDefinition
protected class PrimitiveReferenceDefinition_ArgumentsListAssignment_1_1 extends AssignmentToken  {
	
	public PrimitiveReferenceDefinition_ArgumentsListAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveReferenceDefinitionAccess().getArgumentsListAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArgumentDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("argumentsList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("argumentsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveReferenceDefinitionAccess().getArgumentsListArgumentDefinitionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_LeftParenthesisKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," argumentsList+=ArgumentDefinition)*
protected class PrimitiveReferenceDefinition_Group_1_2 extends GroupToken {
	
	public PrimitiveReferenceDefinition_Group_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveReferenceDefinitionAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_ArgumentsListAssignment_1_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class PrimitiveReferenceDefinition_CommaKeyword_1_2_0 extends KeywordToken  {
	
	public PrimitiveReferenceDefinition_CommaKeyword_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveReferenceDefinitionAccess().getCommaKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_Group_1_2(parent, this, 0, inst);
			case 1: return new PrimitiveReferenceDefinition_ArgumentsListAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// argumentsList+=ArgumentDefinition
protected class PrimitiveReferenceDefinition_ArgumentsListAssignment_1_2_1 extends AssignmentToken  {
	
	public PrimitiveReferenceDefinition_ArgumentsListAssignment_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveReferenceDefinitionAccess().getArgumentsListAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArgumentDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("argumentsList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("argumentsList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveReferenceDefinitionAccess().getArgumentsListArgumentDefinitionParserRuleCall_1_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_CommaKeyword_1_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class PrimitiveReferenceDefinition_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public PrimitiveReferenceDefinition_RightParenthesisKeyword_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveReferenceDefinitionAccess().getRightParenthesisKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_Group_1_2(parent, this, 0, inst);
			case 1: return new PrimitiveReferenceDefinition_ArgumentsListAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule PrimitiveReferenceDefinition ****************/


/************ begin Rule TemplateDefinition ****************
 *
 * TemplateDefinition:
 *   templateName=ID "=" (templateValue=FQN|"?")|(templateValue=FQN|"?");
 *
 **/

// templateName=ID "=" (templateValue=FQN|"?")|(templateValue=FQN|"?")
protected class TemplateDefinition_Alternatives extends AlternativesToken {

	public TemplateDefinition_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateDefinition_Group_0(parent, this, 0, inst);
			case 1: return new TemplateDefinition_Alternatives_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTemplateDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// templateName=ID "=" (templateValue=FQN|"?")
protected class TemplateDefinition_Group_0 extends GroupToken {
	
	public TemplateDefinition_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateDefinition_Alternatives_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// templateName=ID
protected class TemplateDefinition_TemplateNameAssignment_0_0 extends AssignmentToken  {
	
	public TemplateDefinition_TemplateNameAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getTemplateNameAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("templateName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("templateName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTemplateDefinitionAccess().getTemplateNameIDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class TemplateDefinition_EqualsSignKeyword_0_1 extends KeywordToken  {
	
	public TemplateDefinition_EqualsSignKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getEqualsSignKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateDefinition_TemplateNameAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// templateValue=FQN|"?"
protected class TemplateDefinition_Alternatives_0_2 extends AlternativesToken {

	public TemplateDefinition_Alternatives_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getAlternatives_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateDefinition_TemplateValueAssignment_0_2_0(parent, this, 0, inst);
			case 1: return new TemplateDefinition_QuestionMarkKeyword_0_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// templateValue=FQN
protected class TemplateDefinition_TemplateValueAssignment_0_2_0 extends AssignmentToken  {
	
	public TemplateDefinition_TemplateValueAssignment_0_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getTemplateValueAssignment_0_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateDefinition_EqualsSignKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("templateValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("templateValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getTemplateDefinitionAccess().getTemplateValueFQNParserRuleCall_0_2_0_0();
			return obj;
		}
		return null;
	}

}

// "?"
protected class TemplateDefinition_QuestionMarkKeyword_0_2_1 extends KeywordToken  {
	
	public TemplateDefinition_QuestionMarkKeyword_0_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getQuestionMarkKeyword_0_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateDefinition_EqualsSignKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



// templateValue=FQN|"?"
protected class TemplateDefinition_Alternatives_1 extends AlternativesToken {

	public TemplateDefinition_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateDefinition_TemplateValueAssignment_1_0(parent, this, 0, inst);
			case 1: return new TemplateDefinition_QuestionMarkKeyword_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// templateValue=FQN
protected class TemplateDefinition_TemplateValueAssignment_1_0 extends AssignmentToken  {
	
	public TemplateDefinition_TemplateValueAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getTemplateValueAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("templateValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("templateValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getTemplateDefinitionAccess().getTemplateValueFQNParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "?"
protected class TemplateDefinition_QuestionMarkKeyword_1_1 extends KeywordToken  {
	
	public TemplateDefinition_QuestionMarkKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateDefinitionAccess().getQuestionMarkKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}



/************ end Rule TemplateDefinition ****************/


/************ begin Rule TemplateSubComponent ****************
 *
 * TemplateSubComponent:
 *   templateReference=[TemplateSpecifier] "as" name=ID;
 *
 **/

// templateReference=[TemplateSpecifier] "as" name=ID
protected class TemplateSubComponent_Group extends GroupToken {
	
	public TemplateSubComponent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateSubComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSubComponent_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTemplateSubComponentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// templateReference=[TemplateSpecifier]
protected class TemplateSubComponent_TemplateReferenceAssignment_0 extends AssignmentToken  {
	
	public TemplateSubComponent_TemplateReferenceAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateSubComponentAccess().getTemplateReferenceAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("templateReference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("templateReference");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTemplateSubComponentAccess().getTemplateReferenceTemplateSpecifierCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getTemplateSubComponentAccess().getTemplateReferenceTemplateSpecifierCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "as"
protected class TemplateSubComponent_AsKeyword_1 extends KeywordToken  {
	
	public TemplateSubComponent_AsKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateSubComponentAccess().getAsKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSubComponent_TemplateReferenceAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class TemplateSubComponent_NameAssignment_2 extends AssignmentToken  {
	
	public TemplateSubComponent_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateSubComponentAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSubComponent_AsKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTemplateSubComponentAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TemplateSubComponent ****************/


/************ begin Rule PrimitiveSubComponent ****************
 *
 * PrimitiveSubComponent:
 *   "primitive" referenceDefinition=PrimitiveReferenceDefinition "as" name=ID;
 *
 **/

// "primitive" referenceDefinition=PrimitiveReferenceDefinition "as" name=ID
protected class PrimitiveSubComponent_Group extends GroupToken {
	
	public PrimitiveSubComponent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveSubComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveSubComponent_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimitiveSubComponentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "primitive"
protected class PrimitiveSubComponent_PrimitiveKeyword_0 extends KeywordToken  {
	
	public PrimitiveSubComponent_PrimitiveKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveSubComponentAccess().getPrimitiveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// referenceDefinition=PrimitiveReferenceDefinition
protected class PrimitiveSubComponent_ReferenceDefinitionAssignment_1 extends AssignmentToken  {
	
	public PrimitiveSubComponent_ReferenceDefinitionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveSubComponentAccess().getReferenceDefinitionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referenceDefinition",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referenceDefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveSubComponentAccess().getReferenceDefinitionPrimitiveReferenceDefinitionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveSubComponent_PrimitiveKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "as"
protected class PrimitiveSubComponent_AsKeyword_2 extends KeywordToken  {
	
	public PrimitiveSubComponent_AsKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveSubComponentAccess().getAsKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveSubComponent_ReferenceDefinitionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class PrimitiveSubComponent_NameAssignment_3 extends AssignmentToken  {
	
	public PrimitiveSubComponent_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveSubComponentAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveSubComponent_AsKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPrimitiveSubComponentAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule PrimitiveSubComponent ****************/


/************ begin Rule PrimitiveAnonymousSubComponent ****************
 *
 * PrimitiveAnonymousSubComponent:
 *   "primitive" referenceDefinition=PrimitiveReferenceDefinition? "as" name=ID "{" (
 *   elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)* "}";
 *
 **/

// "primitive" referenceDefinition=PrimitiveReferenceDefinition? "as" name=ID "{" (
// elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)* "}"
protected class PrimitiveAnonymousSubComponent_Group extends GroupToken {
	
	public PrimitiveAnonymousSubComponent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPrimitiveAnonymousSubComponentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "primitive"
protected class PrimitiveAnonymousSubComponent_PrimitiveKeyword_0 extends KeywordToken  {
	
	public PrimitiveAnonymousSubComponent_PrimitiveKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getPrimitiveKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// referenceDefinition=PrimitiveReferenceDefinition?
protected class PrimitiveAnonymousSubComponent_ReferenceDefinitionAssignment_1 extends AssignmentToken  {
	
	public PrimitiveAnonymousSubComponent_ReferenceDefinitionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getReferenceDefinitionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveReferenceDefinition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referenceDefinition",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referenceDefinition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveReferenceDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveAnonymousSubComponentAccess().getReferenceDefinitionPrimitiveReferenceDefinitionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_PrimitiveKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "as"
protected class PrimitiveAnonymousSubComponent_AsKeyword_2 extends KeywordToken  {
	
	public PrimitiveAnonymousSubComponent_AsKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getAsKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_ReferenceDefinitionAssignment_1(parent, this, 0, inst);
			case 1: return new PrimitiveAnonymousSubComponent_PrimitiveKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class PrimitiveAnonymousSubComponent_NameAssignment_3 extends AssignmentToken  {
	
	public PrimitiveAnonymousSubComponent_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_AsKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPrimitiveAnonymousSubComponentAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class PrimitiveAnonymousSubComponent_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public PrimitiveAnonymousSubComponent_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (elements+=AnnotationsList? elements+=PrimitiveDefinitionElement)*
protected class PrimitiveAnonymousSubComponent_Group_5 extends GroupToken {
	
	public PrimitiveAnonymousSubComponent_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_ElementsAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elements+=AnnotationsList?
protected class PrimitiveAnonymousSubComponent_ElementsAssignment_5_0 extends AssignmentToken  {
	
	public PrimitiveAnonymousSubComponent_ElementsAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getElementsAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveAnonymousSubComponentAccess().getElementsAnnotationsListParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_Group_5(parent, next, actIndex, consumed);
			case 1: return new PrimitiveAnonymousSubComponent_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// elements+=PrimitiveDefinitionElement
protected class PrimitiveAnonymousSubComponent_ElementsAssignment_5_1 extends AssignmentToken  {
	
	public PrimitiveAnonymousSubComponent_ElementsAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getElementsAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveDefinitionElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrimitiveDefinitionElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPrimitiveAnonymousSubComponentAccess().getElementsPrimitiveDefinitionElementParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_ElementsAssignment_5_0(parent, next, actIndex, consumed);
			case 1: return new PrimitiveAnonymousSubComponent_Group_5(parent, next, actIndex, consumed);
			case 2: return new PrimitiveAnonymousSubComponent_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class PrimitiveAnonymousSubComponent_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public PrimitiveAnonymousSubComponent_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrimitiveAnonymousSubComponentAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PrimitiveAnonymousSubComponent_Group_5(parent, this, 0, inst);
			case 1: return new PrimitiveAnonymousSubComponent_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PrimitiveAnonymousSubComponent ****************/


/************ begin Rule AttributeDefinition ****************
 *
 * AttributeDefinition:
 *   "attribute" type=AttributeType? attributeName=ID ("=" value=Value)?;
 *
 **/

// "attribute" type=AttributeType? attributeName=ID ("=" value=Value)?
protected class AttributeDefinition_Group extends GroupToken {
	
	public AttributeDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeDefinition_Group_3(parent, this, 0, inst);
			case 1: return new AttributeDefinition_AttributeNameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "attribute"
protected class AttributeDefinition_AttributeKeyword_0 extends KeywordToken  {
	
	public AttributeDefinition_AttributeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeDefinitionAccess().getAttributeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=AttributeType?
protected class AttributeDefinition_TypeAssignment_1 extends AssignmentToken  {
	
	public AttributeDefinition_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeDefinitionAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeDefinition_AttributeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeDefinitionAccess().getTypeAttributeTypeParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// attributeName=ID
protected class AttributeDefinition_AttributeNameAssignment_2 extends AssignmentToken  {
	
	public AttributeDefinition_AttributeNameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeDefinitionAccess().getAttributeNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeDefinition_TypeAssignment_1(parent, this, 0, inst);
			case 1: return new AttributeDefinition_AttributeKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attributeName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attributeName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeDefinitionAccess().getAttributeNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("=" value=Value)?
protected class AttributeDefinition_Group_3 extends GroupToken {
	
	public AttributeDefinition_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeDefinitionAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeDefinition_ValueAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class AttributeDefinition_EqualsSignKeyword_3_0 extends KeywordToken  {
	
	public AttributeDefinition_EqualsSignKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeDefinitionAccess().getEqualsSignKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeDefinition_AttributeNameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Value
protected class AttributeDefinition_ValueAssignment_3_1 extends AssignmentToken  {
	
	public AttributeDefinition_ValueAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeDefinitionAccess().getValueAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeDefinition_EqualsSignKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeDefinitionAccess().getValueValueParserRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule AttributeDefinition ****************/


/************ begin Rule ArgumentDefinition ****************
 *
 * ArgumentDefinition:
 *   argumentName=ID "=" argumentValue=Value|argumentValue=Value;
 *
 **/

// argumentName=ID "=" argumentValue=Value|argumentValue=Value
protected class ArgumentDefinition_Alternatives extends AlternativesToken {

	public ArgumentDefinition_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getArgumentDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArgumentDefinition_Group_0(parent, this, 0, inst);
			case 1: return new ArgumentDefinition_ArgumentValueAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getArgumentDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// argumentName=ID "=" argumentValue=Value
protected class ArgumentDefinition_Group_0 extends GroupToken {
	
	public ArgumentDefinition_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArgumentDefinitionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArgumentDefinition_ArgumentValueAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// argumentName=ID
protected class ArgumentDefinition_ArgumentNameAssignment_0_0 extends AssignmentToken  {
	
	public ArgumentDefinition_ArgumentNameAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentDefinitionAccess().getArgumentNameAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("argumentName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("argumentName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getArgumentDefinitionAccess().getArgumentNameIDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class ArgumentDefinition_EqualsSignKeyword_0_1 extends KeywordToken  {
	
	public ArgumentDefinition_EqualsSignKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getArgumentDefinitionAccess().getEqualsSignKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArgumentDefinition_ArgumentNameAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// argumentValue=Value
protected class ArgumentDefinition_ArgumentValueAssignment_0_2 extends AssignmentToken  {
	
	public ArgumentDefinition_ArgumentValueAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentDefinitionAccess().getArgumentValueAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ArgumentDefinition_EqualsSignKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("argumentValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("argumentValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getArgumentDefinitionAccess().getArgumentValueValueParserRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}


// argumentValue=Value
protected class ArgumentDefinition_ArgumentValueAssignment_1 extends AssignmentToken  {
	
	public ArgumentDefinition_ArgumentValueAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentDefinitionAccess().getArgumentValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("argumentValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("argumentValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getArgumentDefinitionAccess().getArgumentValueValueParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ArgumentDefinition ****************/


/************ begin Rule InterfaceDefinition ****************
 *
 * InterfaceDefinition:
 *   role=Role "as" name=ID (collection?="[" collectionsize=INT? collection?="]")?
 *   contingency=Contingency?|role=Role signature=FQN "as" name=ID (collection?="["
 *   collectionsize=INT? collection?="]")? contingency=Contingency?;
 *
 **/

// role=Role "as" name=ID (collection?="[" collectionsize=INT? collection?="]")?
// contingency=Contingency?|role=Role signature=FQN "as" name=ID (collection?="["
// collectionsize=INT? collection?="]")? contingency=Contingency?
protected class InterfaceDefinition_Alternatives extends AlternativesToken {

	public InterfaceDefinition_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_Group_0(parent, this, 0, inst);
			case 1: return new InterfaceDefinition_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInterfaceDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// role=Role "as" name=ID (collection?="[" collectionsize=INT? collection?="]")?
// contingency=Contingency?
protected class InterfaceDefinition_Group_0 extends GroupToken {
	
	public InterfaceDefinition_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_ContingencyAssignment_0_4(parent, this, 0, inst);
			case 1: return new InterfaceDefinition_Group_0_3(parent, this, 1, inst);
			case 2: return new InterfaceDefinition_NameAssignment_0_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// role=Role
protected class InterfaceDefinition_RoleAssignment_0_0 extends AssignmentToken  {
	
	public InterfaceDefinition_RoleAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getRoleAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("role",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("role");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getInterfaceDefinitionAccess().getRoleRoleEnumRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "as"
protected class InterfaceDefinition_AsKeyword_0_1 extends KeywordToken  {
	
	public InterfaceDefinition_AsKeyword_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getAsKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_RoleAssignment_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class InterfaceDefinition_NameAssignment_0_2 extends AssignmentToken  {
	
	public InterfaceDefinition_NameAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getNameAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_AsKeyword_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInterfaceDefinitionAccess().getNameIDTerminalRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}

// (collection?="[" collectionsize=INT? collection?="]")?
protected class InterfaceDefinition_Group_0_3 extends GroupToken {
	
	public InterfaceDefinition_Group_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getGroup_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_CollectionAssignment_0_3_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// collection?="["
protected class InterfaceDefinition_CollectionAssignment_0_3_0 extends AssignmentToken  {
	
	public InterfaceDefinition_CollectionAssignment_0_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getCollectionAssignment_0_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_NameAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collection",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collection");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getInterfaceDefinitionAccess().getCollectionLeftSquareBracketKeyword_0_3_0_0();
			return obj;
		}
		return null;
	}

}

// collectionsize=INT?
protected class InterfaceDefinition_CollectionsizeAssignment_0_3_1 extends AssignmentToken  {
	
	public InterfaceDefinition_CollectionsizeAssignment_0_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getCollectionsizeAssignment_0_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_CollectionAssignment_0_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collectionsize",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collectionsize");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInterfaceDefinitionAccess().getCollectionsizeINTTerminalRuleCall_0_3_1_0();
			return obj;
		}
		return null;
	}

}

// collection?="]"
protected class InterfaceDefinition_CollectionAssignment_0_3_2 extends AssignmentToken  {
	
	public InterfaceDefinition_CollectionAssignment_0_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getCollectionAssignment_0_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_CollectionsizeAssignment_0_3_1(parent, this, 0, inst);
			case 1: return new InterfaceDefinition_CollectionAssignment_0_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collection",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collection");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getInterfaceDefinitionAccess().getCollectionRightSquareBracketKeyword_0_3_2_0();
			return obj;
		}
		return null;
	}

}


// contingency=Contingency?
protected class InterfaceDefinition_ContingencyAssignment_0_4 extends AssignmentToken  {
	
	public InterfaceDefinition_ContingencyAssignment_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getContingencyAssignment_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_Group_0_3(parent, this, 0, inst);
			case 1: return new InterfaceDefinition_NameAssignment_0_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contingency",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contingency");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getInterfaceDefinitionAccess().getContingencyContingencyEnumRuleCall_0_4_0();
			return obj;
		}
		return null;
	}

}


// role=Role signature=FQN "as" name=ID (collection?="[" collectionsize=INT? collection?=
// "]")? contingency=Contingency?
protected class InterfaceDefinition_Group_1 extends GroupToken {
	
	public InterfaceDefinition_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_ContingencyAssignment_1_5(parent, this, 0, inst);
			case 1: return new InterfaceDefinition_Group_1_4(parent, this, 1, inst);
			case 2: return new InterfaceDefinition_NameAssignment_1_3(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// role=Role
protected class InterfaceDefinition_RoleAssignment_1_0 extends AssignmentToken  {
	
	public InterfaceDefinition_RoleAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getRoleAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("role",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("role");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getInterfaceDefinitionAccess().getRoleRoleEnumRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// signature=FQN
protected class InterfaceDefinition_SignatureAssignment_1_1 extends AssignmentToken  {
	
	public InterfaceDefinition_SignatureAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getSignatureAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_RoleAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("signature",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("signature");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getInterfaceDefinitionAccess().getSignatureFQNParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// "as"
protected class InterfaceDefinition_AsKeyword_1_2 extends KeywordToken  {
	
	public InterfaceDefinition_AsKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getAsKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_SignatureAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class InterfaceDefinition_NameAssignment_1_3 extends AssignmentToken  {
	
	public InterfaceDefinition_NameAssignment_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getNameAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_AsKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInterfaceDefinitionAccess().getNameIDTerminalRuleCall_1_3_0();
			return obj;
		}
		return null;
	}

}

// (collection?="[" collectionsize=INT? collection?="]")?
protected class InterfaceDefinition_Group_1_4 extends GroupToken {
	
	public InterfaceDefinition_Group_1_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getGroup_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_CollectionAssignment_1_4_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// collection?="["
protected class InterfaceDefinition_CollectionAssignment_1_4_0 extends AssignmentToken  {
	
	public InterfaceDefinition_CollectionAssignment_1_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getCollectionAssignment_1_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_NameAssignment_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collection",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collection");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getInterfaceDefinitionAccess().getCollectionLeftSquareBracketKeyword_1_4_0_0();
			return obj;
		}
		return null;
	}

}

// collectionsize=INT?
protected class InterfaceDefinition_CollectionsizeAssignment_1_4_1 extends AssignmentToken  {
	
	public InterfaceDefinition_CollectionsizeAssignment_1_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getCollectionsizeAssignment_1_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_CollectionAssignment_1_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collectionsize",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collectionsize");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInterfaceDefinitionAccess().getCollectionsizeINTTerminalRuleCall_1_4_1_0();
			return obj;
		}
		return null;
	}

}

// collection?="]"
protected class InterfaceDefinition_CollectionAssignment_1_4_2 extends AssignmentToken  {
	
	public InterfaceDefinition_CollectionAssignment_1_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getCollectionAssignment_1_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_CollectionsizeAssignment_1_4_1(parent, this, 0, inst);
			case 1: return new InterfaceDefinition_CollectionAssignment_1_4_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collection",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collection");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getInterfaceDefinitionAccess().getCollectionRightSquareBracketKeyword_1_4_2_0();
			return obj;
		}
		return null;
	}

}


// contingency=Contingency?
protected class InterfaceDefinition_ContingencyAssignment_1_5 extends AssignmentToken  {
	
	public InterfaceDefinition_ContingencyAssignment_1_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinitionAccess().getContingencyAssignment_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InterfaceDefinition_Group_1_4(parent, this, 0, inst);
			case 1: return new InterfaceDefinition_NameAssignment_1_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contingency",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contingency");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getInterfaceDefinitionAccess().getContingencyContingencyEnumRuleCall_1_5_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule InterfaceDefinition ****************/


/************ begin Rule BindingDefinition ****************
 *
 * BindingDefinition:
 *   "binds" ("this"|interfaceSourceParentName=ID) "." interfaceSourceName=ID ("["
 *   interfaceSourceIndex=INT "]")? "to" ("this"|interfaceTargetParentName=ID) "."
 *   interfaceTargetName=ID ("[" interfaceTargetIndex=INT "]")?;
 *
 **/

// "binds" ("this"|interfaceSourceParentName=ID) "." interfaceSourceName=ID ("["
// interfaceSourceIndex=INT "]")? "to" ("this"|interfaceTargetParentName=ID) "."
// interfaceTargetName=ID ("[" interfaceTargetIndex=INT "]")?
protected class BindingDefinition_Group extends GroupToken {
	
	public BindingDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_Group_9(parent, this, 0, inst);
			case 1: return new BindingDefinition_InterfaceTargetNameAssignment_8(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBindingDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "binds"
protected class BindingDefinition_BindsKeyword_0 extends KeywordToken  {
	
	public BindingDefinition_BindsKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getBindsKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "this"|interfaceSourceParentName=ID
protected class BindingDefinition_Alternatives_1 extends AlternativesToken {

	public BindingDefinition_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_ThisKeyword_1_0(parent, this, 0, inst);
			case 1: return new BindingDefinition_InterfaceSourceParentNameAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "this"
protected class BindingDefinition_ThisKeyword_1_0 extends KeywordToken  {
	
	public BindingDefinition_ThisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getThisKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_BindsKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// interfaceSourceParentName=ID
protected class BindingDefinition_InterfaceSourceParentNameAssignment_1_1 extends AssignmentToken  {
	
	public BindingDefinition_InterfaceSourceParentNameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getInterfaceSourceParentNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_BindsKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interfaceSourceParentName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interfaceSourceParentName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBindingDefinitionAccess().getInterfaceSourceParentNameIDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// "."
protected class BindingDefinition_FullStopKeyword_2 extends KeywordToken  {
	
	public BindingDefinition_FullStopKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getFullStopKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// interfaceSourceName=ID
protected class BindingDefinition_InterfaceSourceNameAssignment_3 extends AssignmentToken  {
	
	public BindingDefinition_InterfaceSourceNameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getInterfaceSourceNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_FullStopKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interfaceSourceName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interfaceSourceName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBindingDefinitionAccess().getInterfaceSourceNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("[" interfaceSourceIndex=INT "]")?
protected class BindingDefinition_Group_4 extends GroupToken {
	
	public BindingDefinition_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_RightSquareBracketKeyword_4_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class BindingDefinition_LeftSquareBracketKeyword_4_0 extends KeywordToken  {
	
	public BindingDefinition_LeftSquareBracketKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getLeftSquareBracketKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_InterfaceSourceNameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// interfaceSourceIndex=INT
protected class BindingDefinition_InterfaceSourceIndexAssignment_4_1 extends AssignmentToken  {
	
	public BindingDefinition_InterfaceSourceIndexAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getInterfaceSourceIndexAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_LeftSquareBracketKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interfaceSourceIndex",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interfaceSourceIndex");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBindingDefinitionAccess().getInterfaceSourceIndexINTTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class BindingDefinition_RightSquareBracketKeyword_4_2 extends KeywordToken  {
	
	public BindingDefinition_RightSquareBracketKeyword_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getRightSquareBracketKeyword_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_InterfaceSourceIndexAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "to"
protected class BindingDefinition_ToKeyword_5 extends KeywordToken  {
	
	public BindingDefinition_ToKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getToKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_Group_4(parent, this, 0, inst);
			case 1: return new BindingDefinition_InterfaceSourceNameAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "this"|interfaceTargetParentName=ID
protected class BindingDefinition_Alternatives_6 extends AlternativesToken {

	public BindingDefinition_Alternatives_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getAlternatives_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_ThisKeyword_6_0(parent, this, 0, inst);
			case 1: return new BindingDefinition_InterfaceTargetParentNameAssignment_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "this"
protected class BindingDefinition_ThisKeyword_6_0 extends KeywordToken  {
	
	public BindingDefinition_ThisKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getThisKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_ToKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// interfaceTargetParentName=ID
protected class BindingDefinition_InterfaceTargetParentNameAssignment_6_1 extends AssignmentToken  {
	
	public BindingDefinition_InterfaceTargetParentNameAssignment_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getInterfaceTargetParentNameAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_ToKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interfaceTargetParentName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interfaceTargetParentName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBindingDefinitionAccess().getInterfaceTargetParentNameIDTerminalRuleCall_6_1_0();
			return obj;
		}
		return null;
	}

}


// "."
protected class BindingDefinition_FullStopKeyword_7 extends KeywordToken  {
	
	public BindingDefinition_FullStopKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getFullStopKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_Alternatives_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// interfaceTargetName=ID
protected class BindingDefinition_InterfaceTargetNameAssignment_8 extends AssignmentToken  {
	
	public BindingDefinition_InterfaceTargetNameAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getInterfaceTargetNameAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_FullStopKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interfaceTargetName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interfaceTargetName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBindingDefinitionAccess().getInterfaceTargetNameIDTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}

// ("[" interfaceTargetIndex=INT "]")?
protected class BindingDefinition_Group_9 extends GroupToken {
	
	public BindingDefinition_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getGroup_9();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_RightSquareBracketKeyword_9_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class BindingDefinition_LeftSquareBracketKeyword_9_0 extends KeywordToken  {
	
	public BindingDefinition_LeftSquareBracketKeyword_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getLeftSquareBracketKeyword_9_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_InterfaceTargetNameAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// interfaceTargetIndex=INT
protected class BindingDefinition_InterfaceTargetIndexAssignment_9_1 extends AssignmentToken  {
	
	public BindingDefinition_InterfaceTargetIndexAssignment_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getInterfaceTargetIndexAssignment_9_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_LeftSquareBracketKeyword_9_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("interfaceTargetIndex",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("interfaceTargetIndex");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBindingDefinitionAccess().getInterfaceTargetIndexINTTerminalRuleCall_9_1_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class BindingDefinition_RightSquareBracketKeyword_9_2 extends KeywordToken  {
	
	public BindingDefinition_RightSquareBracketKeyword_9_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBindingDefinitionAccess().getRightSquareBracketKeyword_9_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BindingDefinition_InterfaceTargetIndexAssignment_9_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule BindingDefinition ****************/


/************ begin Rule DataDefinition ****************
 *
 * DataDefinition:
 *   "data" (fileC=FileC|inlineCcode=InlineCodeC)|"nodata";
 *
 **/

// "data" (fileC=FileC|inlineCcode=InlineCodeC)|"nodata"
protected class DataDefinition_Alternatives extends AlternativesToken {

	public DataDefinition_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataDefinition_Group_0(parent, this, 0, inst);
			case 1: return new DataDefinition_NodataKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "data" (fileC=FileC|inlineCcode=InlineCodeC)
protected class DataDefinition_Group_0 extends GroupToken {
	
	public DataDefinition_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDataDefinitionAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataDefinition_Alternatives_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "data"
protected class DataDefinition_DataKeyword_0_0 extends KeywordToken  {
	
	public DataDefinition_DataKeyword_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataDefinitionAccess().getDataKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// fileC=FileC|inlineCcode=InlineCodeC
protected class DataDefinition_Alternatives_0_1 extends AlternativesToken {

	public DataDefinition_Alternatives_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataDefinitionAccess().getAlternatives_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataDefinition_FileCAssignment_0_1_0(parent, this, 0, inst);
			case 1: return new DataDefinition_InlineCcodeAssignment_0_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// fileC=FileC
protected class DataDefinition_FileCAssignment_0_1_0 extends AssignmentToken  {
	
	public DataDefinition_FileCAssignment_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataDefinitionAccess().getFileCAssignment_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FileC_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fileC",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fileC");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFileCRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataDefinitionAccess().getFileCFileCParserRuleCall_0_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataDefinition_DataKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// inlineCcode=InlineCodeC
protected class DataDefinition_InlineCcodeAssignment_0_1_1 extends AssignmentToken  {
	
	public DataDefinition_InlineCcodeAssignment_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDataDefinitionAccess().getInlineCcodeAssignment_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InlineCodeC_CodeCAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inlineCcode",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inlineCcode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInlineCodeCRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataDefinitionAccess().getInlineCcodeInlineCodeCParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataDefinition_DataKeyword_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// "nodata"
protected class DataDefinition_NodataKeyword_1 extends KeywordToken  {
	
	public DataDefinition_NodataKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDataDefinitionAccess().getNodataKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}


/************ end Rule DataDefinition ****************/


/************ begin Rule ImplementationDefinition ****************
 *
 * ImplementationDefinition:
 *   "source" (fileC=FileC|inlineCcode=InlineCodeC);
 *
 **/

// "source" (fileC=FileC|inlineCcode=InlineCodeC)
protected class ImplementationDefinition_Group extends GroupToken {
	
	public ImplementationDefinition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImplementationDefinitionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ImplementationDefinition_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImplementationDefinitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "source"
protected class ImplementationDefinition_SourceKeyword_0 extends KeywordToken  {
	
	public ImplementationDefinition_SourceKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImplementationDefinitionAccess().getSourceKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// fileC=FileC|inlineCcode=InlineCodeC
protected class ImplementationDefinition_Alternatives_1 extends AlternativesToken {

	public ImplementationDefinition_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getImplementationDefinitionAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ImplementationDefinition_FileCAssignment_1_0(parent, this, 0, inst);
			case 1: return new ImplementationDefinition_InlineCcodeAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// fileC=FileC
protected class ImplementationDefinition_FileCAssignment_1_0 extends AssignmentToken  {
	
	public ImplementationDefinition_FileCAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImplementationDefinitionAccess().getFileCAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FileC_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fileC",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fileC");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFileCRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getImplementationDefinitionAccess().getFileCFileCParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ImplementationDefinition_SourceKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// inlineCcode=InlineCodeC
protected class ImplementationDefinition_InlineCcodeAssignment_1_1 extends AssignmentToken  {
	
	public ImplementationDefinition_InlineCcodeAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImplementationDefinitionAccess().getInlineCcodeAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InlineCodeC_CodeCAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inlineCcode",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inlineCcode");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInlineCodeCRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getImplementationDefinitionAccess().getInlineCcodeInlineCodeCParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ImplementationDefinition_SourceKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ImplementationDefinition ****************/


/************ begin Rule TemplateSpecifier ****************
 *
 * TemplateSpecifier:
 *   name=ID "conformsto" componentTypeName=FQN;
 *
 **/

// name=ID "conformsto" componentTypeName=FQN
protected class TemplateSpecifier_Group extends GroupToken {
	
	public TemplateSpecifier_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTemplateSpecifierAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifier_ComponentTypeNameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTemplateSpecifierRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class TemplateSpecifier_NameAssignment_0 extends AssignmentToken  {
	
	public TemplateSpecifier_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateSpecifierAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getTemplateSpecifierAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "conformsto"
protected class TemplateSpecifier_ConformstoKeyword_1 extends KeywordToken  {
	
	public TemplateSpecifier_ConformstoKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTemplateSpecifierAccess().getConformstoKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifier_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// componentTypeName=FQN
protected class TemplateSpecifier_ComponentTypeNameAssignment_2 extends AssignmentToken  {
	
	public TemplateSpecifier_ComponentTypeNameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTemplateSpecifierAccess().getComponentTypeNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new TemplateSpecifier_ConformstoKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("componentTypeName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("componentTypeName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getTemplateSpecifierAccess().getComponentTypeNameFQNParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TemplateSpecifier ****************/


/************ begin Rule FileC ****************
 *
 * FileC:
 *   directory=Path? fileName=FileName;
 *
 **/

// directory=Path? fileName=FileName
protected class FileC_Group extends GroupToken {
	
	public FileC_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFileCAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FileC_FileNameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFileCRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// directory=Path?
protected class FileC_DirectoryAssignment_0 extends AssignmentToken  {
	
	public FileC_DirectoryAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFileCAccess().getDirectoryAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("directory",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("directory");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFileCAccess().getDirectoryPathTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// fileName=FileName
protected class FileC_FileNameAssignment_1 extends AssignmentToken  {
	
	public FileC_FileNameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFileCAccess().getFileNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FileC_DirectoryAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fileName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fileName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getFileCAccess().getFileNameFileNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule FileC ****************/



/************ begin Rule InlineCodeC ****************
 *
 * InlineCodeC:
 *   codeC=CodeC;
 *
 **/

// codeC=CodeC
protected class InlineCodeC_CodeCAssignment extends AssignmentToken  {
	
	public InlineCodeC_CodeCAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineCodeCAccess().getCodeCAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInlineCodeCRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("codeC",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("codeC");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInlineCodeCAccess().getCodeCCodeCTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule InlineCodeC ****************/


/************ begin Rule AnnotationsList ****************
 *
 * AnnotationsList:
 *   annotations+=Annotation annotations+=Annotation*;
 *
 **/

// annotations+=Annotation annotations+=Annotation*
protected class AnnotationsList_Group extends GroupToken {
	
	public AnnotationsList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationsListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationsList_AnnotationsAssignment_1(parent, this, 0, inst);
			case 1: return new AnnotationsList_AnnotationsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAnnotationsListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// annotations+=Annotation
protected class AnnotationsList_AnnotationsAssignment_0 extends AssignmentToken  {
	
	public AnnotationsList_AnnotationsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationsListAccess().getAnnotationsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAnnotationsListAccess().getAnnotationsAnnotationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// annotations+=Annotation*
protected class AnnotationsList_AnnotationsAssignment_1 extends AssignmentToken  {
	
	public AnnotationsList_AnnotationsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationsListAccess().getAnnotationsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotations",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAnnotationsListAccess().getAnnotationsAnnotationParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationsList_AnnotationsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new AnnotationsList_AnnotationsAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule AnnotationsList ****************/


/************ begin Rule Annotation ****************
 *
 * Annotation:
 *   "@" name=AnnotationType ("(" annotationElements+=AnnotationElement (","
 *   annotationElements+=AnnotationElement)* ")")?;
 *
 **/

// "@" name=AnnotationType ("(" annotationElements+=AnnotationElement (","
// annotationElements+=AnnotationElement)* ")")?
protected class Annotation_Group extends GroupToken {
	
	public Annotation_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group_2(parent, this, 0, inst);
			case 1: return new Annotation_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "@"
protected class Annotation_CommercialAtKeyword_0 extends KeywordToken  {
	
	public Annotation_CommercialAtKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=AnnotationType
protected class Annotation_NameAssignment_1 extends AssignmentToken  {
	
	public Annotation_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_CommercialAtKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAnnotationAccess().getNameAnnotationTypeParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("(" annotationElements+=AnnotationElement ("," annotationElements+=
// AnnotationElement)* ")")?
protected class Annotation_Group_2 extends GroupToken {
	
	public Annotation_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_RightParenthesisKeyword_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Annotation_LeftParenthesisKeyword_2_0 extends KeywordToken  {
	
	public Annotation_LeftParenthesisKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// annotationElements+=AnnotationElement
protected class Annotation_AnnotationElementsAssignment_2_1 extends AssignmentToken  {
	
	public Annotation_AnnotationElementsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getAnnotationElementsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotationElements",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotationElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAnnotationAccess().getAnnotationElementsAnnotationElementParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Annotation_LeftParenthesisKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," annotationElements+=AnnotationElement)*
protected class Annotation_Group_2_2 extends GroupToken {
	
	public Annotation_Group_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_AnnotationElementsAssignment_2_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Annotation_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public Annotation_CommaKeyword_2_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getCommaKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group_2_2(parent, this, 0, inst);
			case 1: return new Annotation_AnnotationElementsAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// annotationElements+=AnnotationElement
protected class Annotation_AnnotationElementsAssignment_2_2_1 extends AssignmentToken  {
	
	public Annotation_AnnotationElementsAssignment_2_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getAnnotationElementsAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("annotationElements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("annotationElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnnotationElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAnnotationAccess().getAnnotationElementsAnnotationElementParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Annotation_CommaKeyword_2_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class Annotation_RightParenthesisKeyword_2_3 extends KeywordToken  {
	
	public Annotation_RightParenthesisKeyword_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group_2_2(parent, this, 0, inst);
			case 1: return new Annotation_AnnotationElementsAssignment_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Annotation ****************/


/************ begin Rule AnnotationElement ****************
 *
 * AnnotationElement:
 *   elementValue=ElementValue|elementName=ID "=" elementValue=ElementValue;
 *
 **/

// elementValue=ElementValue|elementName=ID "=" elementValue=ElementValue
protected class AnnotationElement_Alternatives extends AlternativesToken {

	public AnnotationElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnnotationElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationElement_ElementValueAssignment_0(parent, this, 0, inst);
			case 1: return new AnnotationElement_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAnnotationElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// elementValue=ElementValue
protected class AnnotationElement_ElementValueAssignment_0 extends AssignmentToken  {
	
	public AnnotationElement_ElementValueAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationElementAccess().getElementValueAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elementValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elementValue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementValueRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAnnotationElementAccess().getElementValueElementValueParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// elementName=ID "=" elementValue=ElementValue
protected class AnnotationElement_Group_1 extends GroupToken {
	
	public AnnotationElement_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnnotationElementAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationElement_ElementValueAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elementName=ID
protected class AnnotationElement_ElementNameAssignment_1_0 extends AssignmentToken  {
	
	public AnnotationElement_ElementNameAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationElementAccess().getElementNameAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elementName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elementName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAnnotationElementAccess().getElementNameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class AnnotationElement_EqualsSignKeyword_1_1 extends KeywordToken  {
	
	public AnnotationElement_EqualsSignKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnnotationElementAccess().getEqualsSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AnnotationElement_ElementNameAssignment_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// elementValue=ElementValue
protected class AnnotationElement_ElementValueAssignment_1_2 extends AssignmentToken  {
	
	public AnnotationElement_ElementValueAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnnotationElementAccess().getElementValueAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elementValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elementValue");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementValueRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAnnotationElementAccess().getElementValueElementValueParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AnnotationElement_EqualsSignKeyword_1_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AnnotationElement ****************/


/************ begin Rule ElementValue ****************
 *
 * ElementValue:
 *   ConstantValue|Annotation|ElementValueArrayInitializer;
 *
 **/

// ConstantValue|Annotation|ElementValueArrayInitializer
protected class ElementValue_Alternatives extends AlternativesToken {

	public ElementValue_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementValueAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValue_ConstantValueParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ElementValue_AnnotationParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ElementValue_ElementValueArrayInitializerParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ConstantValue
protected class ElementValue_ConstantValueParserRuleCall_0 extends RuleCallToken {
	
	public ElementValue_ConstantValueParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementValueAccess().getConstantValueParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstantValue_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ConstantValue_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConstantValueRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Annotation
protected class ElementValue_AnnotationParserRuleCall_1 extends RuleCallToken {
	
	public ElementValue_AnnotationParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementValueAccess().getAnnotationParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Annotation_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Annotation_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAnnotationRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ElementValueArrayInitializer
protected class ElementValue_ElementValueArrayInitializerParserRuleCall_2 extends RuleCallToken {
	
	public ElementValue_ElementValueArrayInitializerParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementValueAccess().getElementValueArrayInitializerParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValueArrayInitializer_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ElementValueArrayInitializer_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getElementValueArrayInitializerRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ElementValue ****************/


/************ begin Rule ConstantValue ****************
 *
 * ConstantValue:
 *   value=ConstantFormat;
 *
 **/

// value=ConstantFormat
protected class ConstantValue_ValueAssignment extends AssignmentToken  {
	
	public ConstantValue_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantValueAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstantValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getConstantValueAccess().getValueConstantFormatParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule ConstantValue ****************/



/************ begin Rule ElementValueArrayInitializer ****************
 *
 * ElementValueArrayInitializer:
 *   "{" values+=ElementValue ("," values+=ElementValue)* "}";
 *
 **/

// "{" values+=ElementValue ("," values+=ElementValue)* "}"
protected class ElementValueArrayInitializer_Group extends GroupToken {
	
	public ElementValueArrayInitializer_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementValueArrayInitializerAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValueArrayInitializer_RightCurlyBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getElementValueArrayInitializerRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "{"
protected class ElementValueArrayInitializer_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public ElementValueArrayInitializer_LeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementValueArrayInitializerAccess().getLeftCurlyBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// values+=ElementValue
protected class ElementValueArrayInitializer_ValuesAssignment_1 extends AssignmentToken  {
	
	public ElementValueArrayInitializer_ValuesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementValueArrayInitializerAccess().getValuesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("values",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementValueRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementValueArrayInitializerAccess().getValuesElementValueParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementValueArrayInitializer_LeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," values+=ElementValue)*
protected class ElementValueArrayInitializer_Group_2 extends GroupToken {
	
	public ElementValueArrayInitializer_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementValueArrayInitializerAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValueArrayInitializer_ValuesAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class ElementValueArrayInitializer_CommaKeyword_2_0 extends KeywordToken  {
	
	public ElementValueArrayInitializer_CommaKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementValueArrayInitializerAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValueArrayInitializer_Group_2(parent, this, 0, inst);
			case 1: return new ElementValueArrayInitializer_ValuesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// values+=ElementValue
protected class ElementValueArrayInitializer_ValuesAssignment_2_1 extends AssignmentToken  {
	
	public ElementValueArrayInitializer_ValuesAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementValueArrayInitializerAccess().getValuesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("values",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementValueRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getElementValueArrayInitializerAccess().getValuesElementValueParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ElementValueArrayInitializer_CommaKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class ElementValueArrayInitializer_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ElementValueArrayInitializer_RightCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementValueArrayInitializerAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ElementValueArrayInitializer_Group_2(parent, this, 0, inst);
			case 1: return new ElementValueArrayInitializer_ValuesAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ElementValueArrayInitializer ****************/








}
